package main

import (
	"flag"
	"os"
	"strings"
)

const (
	generatorInfo   = "// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.\n// DO NOT EDIT.\n\n"
	goPackageHeader = generatorInfo + "package cimgui\n\n"
	cppFileHeader   = generatorInfo
)

func getEnumAndStructNames(enumJsonBytes []byte) (enumNames []string, structNames []string) {
	enums := getEnumDefs(enumJsonBytes)
	structs := getStructDefs(enumJsonBytes)

	for _, e := range enums {
		goEnumName := strings.TrimSuffix(e.Name, "_")
		goEnumName = trimImGuiPrefix(goEnumName)
		enumNames = append(enumNames, goEnumName)
	}

	for _, s := range structs {
		if !shouldSkipStruct(s.Name) {
			structNames = append(structNames, s.Name)
		}
	}

	return
}

func main() {
	defJsonPath := flag.String("d", "", "definitions json file path")
	enumsJsonpath := flag.String("e", "", "structs and enums json file path")
	refEnumsJsonPath := flag.String("r", "", "reference structs and enums json file path")
	prefix := flag.String("p", "", "prefix for the generated file")
	include := flag.String("i", "", "include header file")

	flag.Parse()

	stat, err := os.Stat(*defJsonPath)
	if err != nil || stat.IsDir() {
		panic("Invalid definitions json file path")
	}

	stat, err = os.Stat(*enumsJsonpath)
	if err != nil || stat.IsDir() {
		panic("Invalid enum json file path")
	}

	defJsonBytes, err := os.ReadFile(*defJsonPath)
	if err != nil {
		panic(err.Error())
	}

	enumJsonBytes, err := os.ReadFile(*enumsJsonpath)
	if err != nil {
		panic(err.Error())
	}

	var refEnumJsonBytes []byte
	if len(*refEnumsJsonPath) > 0 {
		refEnumJsonBytes, err = os.ReadFile(*refEnumsJsonPath)
		if err != nil {
			panic(err.Error())
		}
	}

	// get definitions from json file
	funcs := getFunDefs(defJsonBytes)

	enums := getEnumDefs(enumJsonBytes)

	structs := getStructDefs(enumJsonBytes)

	validFuncs := generateCppWrapper(*prefix, *include, funcs)

	// generate code
	enumNames := generateGoEnums(*prefix, enums)
	structNames := generateGoStructs(*prefix, structs)

	structAccessorFuncs := generateCppStructsAccessor(*prefix, validFuncs, structs)
	validFuncs = append(validFuncs, structAccessorFuncs...)

	// generate reference only enum and struct names
	if len(refEnumJsonBytes) > 0 {
		es, ss := getEnumAndStructNames(refEnumJsonBytes)
		enumNames = append(enumNames, es...)
		structNames = append(structNames, ss...)
	}

	generateGoFuncs(*prefix, validFuncs, enumNames, structNames)
}
