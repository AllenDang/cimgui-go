// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package cimgui

// #include "extra_types.h"
// #include "cimgui_structs_accessor.h"
// #include "cimgui_wrapper.h"
import "C"
import "unsafe"

// Color_HSVV parameter default value hint:
// a: 1.0f
func Color_HSVV(h float32, s float32, v float32, a float32) Color {
	pOut := &Color{}
	pOutArg, pOutFin := wrap[C.ImColor, *Color](pOut)
	defer pOutFin()

	C.Color_HSVV(pOutArg, C.float(h), C.float(s), C.float(v), C.float(a))
	return *pOut
}

// Color_SetHSVV parameter default value hint:
// a: 1.0f
func (self *Color) SetHSVV(h float32, s float32, v float32, a float32) {
	selfArg, selfFin := wrap[C.ImColor, *Color](self)
	defer selfFin()

	C.Color_SetHSVV(selfArg, C.float(h), C.float(s), C.float(v), C.float(a))
}

func (self *Color) Destroy() {
	selfArg, selfFin := wrap[C.ImColor, *Color](self)
	defer selfFin()

	C.Color_Destroy(selfArg)
}

func (self DrawCmd) GetTexID() TextureID {
	return TextureID(C.DrawCmd_GetTexID(self.handle()))
}

func NewDrawCmd() DrawCmd {
	return (DrawCmd)(unsafe.Pointer(C.DrawCmd_ImDrawCmd()))
}

func (self DrawCmd) Destroy() {
	C.DrawCmd_Destroy(self.handle())
}

func (self DrawData) Clear() {
	C.DrawData_Clear(self.handle())
}

func (self DrawData) DeIndexAllBuffers() {
	C.DrawData_DeIndexAllBuffers(self.handle())
}

func NewDrawData() DrawData {
	return (DrawData)(unsafe.Pointer(C.DrawData_ImDrawData()))
}

func (self DrawData) ScaleClipRects(fb_scale Vec2) {
	C.DrawData_ScaleClipRects(self.handle(), fb_scale.toC())
}

func (self DrawData) Destroy() {
	C.DrawData_Destroy(self.handle())
}

func (self DrawListSharedData) Destroy() {
	C.DrawListSharedData_Destroy(self.handle())
}

func (self DrawListSplitter) Clear() {
	C.DrawListSplitter_Clear(self.handle())
}

func (self DrawListSplitter) ClearFreeMemory() {
	C.DrawListSplitter_ClearFreeMemory(self.handle())
}

func NewDrawListSplitter() DrawListSplitter {
	return (DrawListSplitter)(unsafe.Pointer(C.DrawListSplitter_ImDrawListSplitter()))
}

func (self DrawListSplitter) Merge(draw_list DrawList) {
	C.DrawListSplitter_Merge(self.handle(), draw_list.handle())
}

func (self DrawListSplitter) SetCurrentChannel(draw_list DrawList, channel_idx int32) {
	C.DrawListSplitter_SetCurrentChannel(self.handle(), draw_list.handle(), C.int(channel_idx))
}

func (self DrawListSplitter) Split(draw_list DrawList, count int32) {
	C.DrawListSplitter_Split(self.handle(), draw_list.handle(), C.int(count))
}

func (self DrawListSplitter) Destroy() {
	C.DrawListSplitter_Destroy(self.handle())
}

// DrawList_AddBezierCubicV parameter default value hint:
// num_segments: 0
func (self DrawList) AddBezierCubicV(p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, col uint32, thickness float32, num_segments int32) {
	C.DrawList_AddBezierCubicV(self.handle(), p1.toC(), p2.toC(), p3.toC(), p4.toC(), C.ImU32(col), C.float(thickness), C.int(num_segments))
}

// DrawList_AddBezierQuadraticV parameter default value hint:
// num_segments: 0
func (self DrawList) AddBezierQuadraticV(p1 Vec2, p2 Vec2, p3 Vec2, col uint32, thickness float32, num_segments int32) {
	C.DrawList_AddBezierQuadraticV(self.handle(), p1.toC(), p2.toC(), p3.toC(), C.ImU32(col), C.float(thickness), C.int(num_segments))
}

// DrawList_AddCircleV parameter default value hint:
// num_segments: 0
// thickness: 1.0f
func (self DrawList) AddCircleV(center Vec2, radius float32, col uint32, num_segments int32, thickness float32) {
	C.DrawList_AddCircleV(self.handle(), center.toC(), C.float(radius), C.ImU32(col), C.int(num_segments), C.float(thickness))
}

// DrawList_AddCircleFilledV parameter default value hint:
// num_segments: 0
func (self DrawList) AddCircleFilledV(center Vec2, radius float32, col uint32, num_segments int32) {
	C.DrawList_AddCircleFilledV(self.handle(), center.toC(), C.float(radius), C.ImU32(col), C.int(num_segments))
}

func (self DrawList) AddConvexPolyFilled(points *Vec2, num_points int32, col uint32) {
	pointsArg, pointsFin := wrap[C.ImVec2, *Vec2](points)
	defer pointsFin()

	C.DrawList_AddConvexPolyFilled(self.handle(), pointsArg, C.int(num_points), C.ImU32(col))
}

func (self DrawList) AddDrawCmd() {
	C.DrawList_AddDrawCmd(self.handle())
}

// DrawList_AddImageV parameter default value hint:
// col: 4294967295
// uv_max: ImVec2(1,1)
// uv_min: ImVec2(0,0)
func (self DrawList) AddImageV(user_texture_id TextureID, p_min Vec2, p_max Vec2, uv_min Vec2, uv_max Vec2, col uint32) {
	C.DrawList_AddImageV(self.handle(), C.ImTextureID(user_texture_id), p_min.toC(), p_max.toC(), uv_min.toC(), uv_max.toC(), C.ImU32(col))
}

// DrawList_AddImageQuadV parameter default value hint:
// col: 4294967295
// uv1: ImVec2(0,0)
// uv2: ImVec2(1,0)
// uv3: ImVec2(1,1)
// uv4: ImVec2(0,1)
func (self DrawList) AddImageQuadV(user_texture_id TextureID, p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, uv1 Vec2, uv2 Vec2, uv3 Vec2, uv4 Vec2, col uint32) {
	C.DrawList_AddImageQuadV(self.handle(), C.ImTextureID(user_texture_id), p1.toC(), p2.toC(), p3.toC(), p4.toC(), uv1.toC(), uv2.toC(), uv3.toC(), uv4.toC(), C.ImU32(col))
}

// DrawList_AddImageRoundedV parameter default value hint:
// flags: 0
func (self DrawList) AddImageRoundedV(user_texture_id TextureID, p_min Vec2, p_max Vec2, uv_min Vec2, uv_max Vec2, col uint32, rounding float32, flags DrawFlags) {
	C.DrawList_AddImageRoundedV(self.handle(), C.ImTextureID(user_texture_id), p_min.toC(), p_max.toC(), uv_min.toC(), uv_max.toC(), C.ImU32(col), C.float(rounding), C.ImDrawFlags(flags))
}

// DrawList_AddLineV parameter default value hint:
// thickness: 1.0f
func (self DrawList) AddLineV(p1 Vec2, p2 Vec2, col uint32, thickness float32) {
	C.DrawList_AddLineV(self.handle(), p1.toC(), p2.toC(), C.ImU32(col), C.float(thickness))
}

// DrawList_AddNgonV parameter default value hint:
// thickness: 1.0f
func (self DrawList) AddNgonV(center Vec2, radius float32, col uint32, num_segments int32, thickness float32) {
	C.DrawList_AddNgonV(self.handle(), center.toC(), C.float(radius), C.ImU32(col), C.int(num_segments), C.float(thickness))
}

func (self DrawList) AddNgonFilled(center Vec2, radius float32, col uint32, num_segments int32) {
	C.DrawList_AddNgonFilled(self.handle(), center.toC(), C.float(radius), C.ImU32(col), C.int(num_segments))
}

func (self DrawList) AddPolyline(points *Vec2, num_points int32, col uint32, flags DrawFlags, thickness float32) {
	pointsArg, pointsFin := wrap[C.ImVec2, *Vec2](points)
	defer pointsFin()

	C.DrawList_AddPolyline(self.handle(), pointsArg, C.int(num_points), C.ImU32(col), C.ImDrawFlags(flags), C.float(thickness))
}

// DrawList_AddQuadV parameter default value hint:
// thickness: 1.0f
func (self DrawList) AddQuadV(p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, col uint32, thickness float32) {
	C.DrawList_AddQuadV(self.handle(), p1.toC(), p2.toC(), p3.toC(), p4.toC(), C.ImU32(col), C.float(thickness))
}

func (self DrawList) AddQuadFilled(p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, col uint32) {
	C.DrawList_AddQuadFilled(self.handle(), p1.toC(), p2.toC(), p3.toC(), p4.toC(), C.ImU32(col))
}

// DrawList_AddRectV parameter default value hint:
// flags: 0
// rounding: 0.0f
// thickness: 1.0f
func (self DrawList) AddRectV(p_min Vec2, p_max Vec2, col uint32, rounding float32, flags DrawFlags, thickness float32) {
	C.DrawList_AddRectV(self.handle(), p_min.toC(), p_max.toC(), C.ImU32(col), C.float(rounding), C.ImDrawFlags(flags), C.float(thickness))
}

// DrawList_AddRectFilledV parameter default value hint:
// flags: 0
// rounding: 0.0f
func (self DrawList) AddRectFilledV(p_min Vec2, p_max Vec2, col uint32, rounding float32, flags DrawFlags) {
	C.DrawList_AddRectFilledV(self.handle(), p_min.toC(), p_max.toC(), C.ImU32(col), C.float(rounding), C.ImDrawFlags(flags))
}

func (self DrawList) AddRectFilledMultiColor(p_min Vec2, p_max Vec2, col_upr_left uint32, col_upr_right uint32, col_bot_right uint32, col_bot_left uint32) {
	C.DrawList_AddRectFilledMultiColor(self.handle(), p_min.toC(), p_max.toC(), C.ImU32(col_upr_left), C.ImU32(col_upr_right), C.ImU32(col_bot_right), C.ImU32(col_bot_left))
}

// DrawList_AddText_FontPtrV parameter default value hint:
// cpu_fine_clip_rect: NULL
// text_end: NULL
// wrap_width: 0.0f
func (self DrawList) AddText_FontPtrV(font Font, font_size float32, pos Vec2, col uint32, text_begin string, wrap_width float32, cpu_fine_clip_rect *Vec4) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	cpu_fine_clip_rectArg, cpu_fine_clip_rectFin := wrap[C.ImVec4, *Vec4](cpu_fine_clip_rect)
	defer cpu_fine_clip_rectFin()

	C.DrawList_AddText_FontPtrV(self.handle(), font.handle(), C.float(font_size), pos.toC(), C.ImU32(col), text_beginArg, C.float(wrap_width), cpu_fine_clip_rectArg)
}

// DrawList_AddText_Vec2V parameter default value hint:
// text_end: NULL
func (self DrawList) AddText_Vec2V(pos Vec2, col uint32, text_begin string) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.DrawList_AddText_Vec2V(self.handle(), pos.toC(), C.ImU32(col), text_beginArg)
}

// DrawList_AddTriangleV parameter default value hint:
// thickness: 1.0f
func (self DrawList) AddTriangleV(p1 Vec2, p2 Vec2, p3 Vec2, col uint32, thickness float32) {
	C.DrawList_AddTriangleV(self.handle(), p1.toC(), p2.toC(), p3.toC(), C.ImU32(col), C.float(thickness))
}

func (self DrawList) AddTriangleFilled(p1 Vec2, p2 Vec2, p3 Vec2, col uint32) {
	C.DrawList_AddTriangleFilled(self.handle(), p1.toC(), p2.toC(), p3.toC(), C.ImU32(col))
}

func (self DrawList) ChannelsMerge() {
	C.DrawList_ChannelsMerge(self.handle())
}

func (self DrawList) ChannelsSetCurrent(n int32) {
	C.DrawList_ChannelsSetCurrent(self.handle(), C.int(n))
}

func (self DrawList) ChannelsSplit(count int32) {
	C.DrawList_ChannelsSplit(self.handle(), C.int(count))
}

func (self DrawList) CloneOutput() DrawList {
	return (DrawList)(unsafe.Pointer(C.DrawList_CloneOutput(self.handle())))
}

func (self DrawList) GetClipRectMax() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.DrawList_GetClipRectMax(pOutArg, self.handle())
	return *pOut
}

func (self DrawList) GetClipRectMin() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.DrawList_GetClipRectMin(pOutArg, self.handle())
	return *pOut
}

func NewDrawList(shared_data DrawListSharedData) DrawList {
	return (DrawList)(unsafe.Pointer(C.DrawList_ImDrawList(shared_data.handle())))
}

// DrawList_PathArcToV parameter default value hint:
// num_segments: 0
func (self DrawList) PathArcToV(center Vec2, radius float32, a_min float32, a_max float32, num_segments int32) {
	C.DrawList_PathArcToV(self.handle(), center.toC(), C.float(radius), C.float(a_min), C.float(a_max), C.int(num_segments))
}

func (self DrawList) PathArcToFast(center Vec2, radius float32, a_min_of_12 int32, a_max_of_12 int32) {
	C.DrawList_PathArcToFast(self.handle(), center.toC(), C.float(radius), C.int(a_min_of_12), C.int(a_max_of_12))
}

// DrawList_PathBezierCubicCurveToV parameter default value hint:
// num_segments: 0
func (self DrawList) PathBezierCubicCurveToV(p2 Vec2, p3 Vec2, p4 Vec2, num_segments int32) {
	C.DrawList_PathBezierCubicCurveToV(self.handle(), p2.toC(), p3.toC(), p4.toC(), C.int(num_segments))
}

// DrawList_PathBezierQuadraticCurveToV parameter default value hint:
// num_segments: 0
func (self DrawList) PathBezierQuadraticCurveToV(p2 Vec2, p3 Vec2, num_segments int32) {
	C.DrawList_PathBezierQuadraticCurveToV(self.handle(), p2.toC(), p3.toC(), C.int(num_segments))
}

func (self DrawList) PathClear() {
	C.DrawList_PathClear(self.handle())
}

func (self DrawList) PathFillConvex(col uint32) {
	C.DrawList_PathFillConvex(self.handle(), C.ImU32(col))
}

func (self DrawList) PathLineTo(pos Vec2) {
	C.DrawList_PathLineTo(self.handle(), pos.toC())
}

func (self DrawList) PathLineToMergeDuplicate(pos Vec2) {
	C.DrawList_PathLineToMergeDuplicate(self.handle(), pos.toC())
}

// DrawList_PathRectV parameter default value hint:
// flags: 0
// rounding: 0.0f
func (self DrawList) PathRectV(rect_min Vec2, rect_max Vec2, rounding float32, flags DrawFlags) {
	C.DrawList_PathRectV(self.handle(), rect_min.toC(), rect_max.toC(), C.float(rounding), C.ImDrawFlags(flags))
}

// DrawList_PathStrokeV parameter default value hint:
// flags: 0
// thickness: 1.0f
func (self DrawList) PathStrokeV(col uint32, flags DrawFlags, thickness float32) {
	C.DrawList_PathStrokeV(self.handle(), C.ImU32(col), C.ImDrawFlags(flags), C.float(thickness))
}

func (self DrawList) PopClipRect() {
	C.DrawList_PopClipRect(self.handle())
}

func (self DrawList) PopTextureID() {
	C.DrawList_PopTextureID(self.handle())
}

func (self DrawList) PrimQuadUV(a Vec2, b Vec2, c Vec2, d Vec2, uv_a Vec2, uv_b Vec2, uv_c Vec2, uv_d Vec2, col uint32) {
	C.DrawList_PrimQuadUV(self.handle(), a.toC(), b.toC(), c.toC(), d.toC(), uv_a.toC(), uv_b.toC(), uv_c.toC(), uv_d.toC(), C.ImU32(col))
}

func (self DrawList) PrimRect(a Vec2, b Vec2, col uint32) {
	C.DrawList_PrimRect(self.handle(), a.toC(), b.toC(), C.ImU32(col))
}

func (self DrawList) PrimRectUV(a Vec2, b Vec2, uv_a Vec2, uv_b Vec2, col uint32) {
	C.DrawList_PrimRectUV(self.handle(), a.toC(), b.toC(), uv_a.toC(), uv_b.toC(), C.ImU32(col))
}

func (self DrawList) PrimReserve(idx_count int32, vtx_count int32) {
	C.DrawList_PrimReserve(self.handle(), C.int(idx_count), C.int(vtx_count))
}

func (self DrawList) PrimUnreserve(idx_count int32, vtx_count int32) {
	C.DrawList_PrimUnreserve(self.handle(), C.int(idx_count), C.int(vtx_count))
}

func (self DrawList) PrimVtx(pos Vec2, uv Vec2, col uint32) {
	C.DrawList_PrimVtx(self.handle(), pos.toC(), uv.toC(), C.ImU32(col))
}

func (self DrawList) PrimWriteIdx(idx DrawIdx) {
	C.DrawList_PrimWriteIdx(self.handle(), C.ImDrawIdx(idx))
}

func (self DrawList) PrimWriteVtx(pos Vec2, uv Vec2, col uint32) {
	C.DrawList_PrimWriteVtx(self.handle(), pos.toC(), uv.toC(), C.ImU32(col))
}

// DrawList_PushClipRectV parameter default value hint:
// intersect_with_current_clip_rect: false
func (self DrawList) PushClipRectV(clip_rect_min Vec2, clip_rect_max Vec2, intersect_with_current_clip_rect bool) {
	C.DrawList_PushClipRectV(self.handle(), clip_rect_min.toC(), clip_rect_max.toC(), C.bool(intersect_with_current_clip_rect))
}

func (self DrawList) PushClipRectFullScreen() {
	C.DrawList_PushClipRectFullScreen(self.handle())
}

func (self DrawList) PushTextureID(texture_id TextureID) {
	C.DrawList_PushTextureID(self.handle(), C.ImTextureID(texture_id))
}

func (self DrawList) Destroy() {
	C.DrawList_Destroy(self.handle())
}

func NewFontAtlasCustomRect() FontAtlasCustomRect {
	return (FontAtlasCustomRect)(unsafe.Pointer(C.FontAtlasCustomRect_ImFontAtlasCustomRect()))
}

func (self FontAtlasCustomRect) IsPacked() bool {
	return C.FontAtlasCustomRect_IsPacked(self.handle()) == C.bool(true)
}

func (self FontAtlasCustomRect) Destroy() {
	C.FontAtlasCustomRect_Destroy(self.handle())
}

// FontAtlas_AddCustomRectFontGlyphV parameter default value hint:
// offset: ImVec2(0,0)
func (self FontAtlas) AddCustomRectFontGlyphV(font Font, id Wchar, width int32, height int32, advance_x float32, offset Vec2) int {
	return int(C.FontAtlas_AddCustomRectFontGlyphV(self.handle(), font.handle(), C.ImWchar(id), C.int(width), C.int(height), C.float(advance_x), offset.toC()))
}

func (self FontAtlas) AddCustomRectRegular(width int32, height int32) int {
	return int(C.FontAtlas_AddCustomRectRegular(self.handle(), C.int(width), C.int(height)))
}

func (self FontAtlas) AddFont(font_cfg FontConfig) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFont(self.handle(), font_cfg.handle())))
}

// FontAtlas_AddFontDefaultV parameter default value hint:
// font_cfg: NULL
func (self FontAtlas) AddFontDefaultV(font_cfg FontConfig) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontDefaultV(self.handle(), font_cfg.handle())))
}

// FontAtlas_AddFontFromFileTTFV parameter default value hint:
// font_cfg: NULL
// glyph_ranges: NULL
func (self FontAtlas) AddFontFromFileTTFV(filename string, size_pixels float32, font_cfg FontConfig, glyph_ranges *Wchar) Font {
	filenameArg, filenameFin := wrapString(filename)
	defer filenameFin()

	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromFileTTFV(self.handle(), filenameArg, C.float(size_pixels), font_cfg.handle(), (*C.ImWchar)(glyph_ranges))))
}

// FontAtlas_AddFontFromMemoryCompressedBase85TTFV parameter default value hint:
// font_cfg: NULL
// glyph_ranges: NULL
func (self FontAtlas) AddFontFromMemoryCompressedBase85TTFV(compressed_font_data_base85 string, size_pixels float32, font_cfg FontConfig, glyph_ranges *Wchar) Font {
	compressed_font_data_base85Arg, compressed_font_data_base85Fin := wrapString(compressed_font_data_base85)
	defer compressed_font_data_base85Fin()

	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryCompressedBase85TTFV(self.handle(), compressed_font_data_base85Arg, C.float(size_pixels), font_cfg.handle(), (*C.ImWchar)(glyph_ranges))))
}

// FontAtlas_AddFontFromMemoryCompressedTTFV parameter default value hint:
// font_cfg: NULL
// glyph_ranges: NULL
func (self FontAtlas) AddFontFromMemoryCompressedTTFV(compressed_font_data unsafe.Pointer, compressed_font_size int32, size_pixels float32, font_cfg FontConfig, glyph_ranges *Wchar) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryCompressedTTFV(self.handle(), compressed_font_data, C.int(compressed_font_size), C.float(size_pixels), font_cfg.handle(), (*C.ImWchar)(glyph_ranges))))
}

// FontAtlas_AddFontFromMemoryTTFV parameter default value hint:
// font_cfg: NULL
// glyph_ranges: NULL
func (self FontAtlas) AddFontFromMemoryTTFV(font_data unsafe.Pointer, font_size int32, size_pixels float32, font_cfg FontConfig, glyph_ranges *Wchar) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryTTFV(self.handle(), font_data, C.int(font_size), C.float(size_pixels), font_cfg.handle(), (*C.ImWchar)(glyph_ranges))))
}

func (self FontAtlas) Build() bool {
	return C.FontAtlas_Build(self.handle()) == C.bool(true)
}

func (self FontAtlas) CalcCustomRectUV(rect FontAtlasCustomRect, out_uv_min *Vec2, out_uv_max *Vec2) {
	out_uv_minArg, out_uv_minFin := wrap[C.ImVec2, *Vec2](out_uv_min)
	defer out_uv_minFin()

	out_uv_maxArg, out_uv_maxFin := wrap[C.ImVec2, *Vec2](out_uv_max)
	defer out_uv_maxFin()

	C.FontAtlas_CalcCustomRectUV(self.handle(), rect.handle(), out_uv_minArg, out_uv_maxArg)
}

func (self FontAtlas) Clear() {
	C.FontAtlas_Clear(self.handle())
}

func (self FontAtlas) ClearFonts() {
	C.FontAtlas_ClearFonts(self.handle())
}

func (self FontAtlas) ClearInputData() {
	C.FontAtlas_ClearInputData(self.handle())
}

func (self FontAtlas) ClearTexData() {
	C.FontAtlas_ClearTexData(self.handle())
}

func (self FontAtlas) GetCustomRectByIndex(index int32) FontAtlasCustomRect {
	return (FontAtlasCustomRect)(unsafe.Pointer(C.FontAtlas_GetCustomRectByIndex(self.handle(), C.int(index))))
}

func (self FontAtlas) GetGlyphRangesChineseFull() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesChineseFull(self.handle()))
}

func (self FontAtlas) GetGlyphRangesChineseSimplifiedCommon() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesChineseSimplifiedCommon(self.handle()))
}

func (self FontAtlas) GetGlyphRangesCyrillic() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesCyrillic(self.handle()))
}

func (self FontAtlas) GetGlyphRangesDefault() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesDefault(self.handle()))
}

func (self FontAtlas) GetGlyphRangesJapanese() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesJapanese(self.handle()))
}

func (self FontAtlas) GetGlyphRangesKorean() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesKorean(self.handle()))
}

func (self FontAtlas) GetGlyphRangesThai() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesThai(self.handle()))
}

func (self FontAtlas) GetGlyphRangesVietnamese() *Wchar {
	return (*Wchar)(C.FontAtlas_GetGlyphRangesVietnamese(self.handle()))
}

func (self FontAtlas) GetMouseCursorTexData(cursor MouseCursor, out_offset *Vec2, out_size *Vec2, out_uv_border [2]*Vec2, out_uv_fill [2]*Vec2) bool {
	out_offsetArg, out_offsetFin := wrap[C.ImVec2, *Vec2](out_offset)
	defer out_offsetFin()

	out_sizeArg, out_sizeFin := wrap[C.ImVec2, *Vec2](out_size)
	defer out_sizeFin()

	out_uv_borderArg := make([]C.ImVec2, len(out_uv_border))
	out_uv_borderFin := make([]func(), len(out_uv_border))
	for i, out_uv_borderV := range out_uv_border {
		var tmp *C.ImVec2
		tmp, out_uv_borderFin[i] = wrap[C.ImVec2, *Vec2](out_uv_borderV)
		out_uv_borderArg[i] = *tmp
	}
	defer func() {
		for _, out_uv_borderV := range out_uv_borderFin {
			out_uv_borderV()
		}
	}()

	out_uv_fillArg := make([]C.ImVec2, len(out_uv_fill))
	out_uv_fillFin := make([]func(), len(out_uv_fill))
	for i, out_uv_fillV := range out_uv_fill {
		var tmp *C.ImVec2
		tmp, out_uv_fillFin[i] = wrap[C.ImVec2, *Vec2](out_uv_fillV)
		out_uv_fillArg[i] = *tmp
	}
	defer func() {
		for _, out_uv_fillV := range out_uv_fillFin {
			out_uv_fillV()
		}
	}()

	return C.FontAtlas_GetMouseCursorTexData(self.handle(), C.ImGuiMouseCursor(cursor), out_offsetArg, out_sizeArg, (*C.ImVec2)(&out_uv_borderArg[0]), (*C.ImVec2)(&out_uv_fillArg[0])) == C.bool(true)
}

func NewFontAtlas() FontAtlas {
	return (FontAtlas)(unsafe.Pointer(C.FontAtlas_ImFontAtlas()))
}

func (self FontAtlas) IsBuilt() bool {
	return C.FontAtlas_IsBuilt(self.handle()) == C.bool(true)
}

func (self FontAtlas) SetTexID(id TextureID) {
	C.FontAtlas_SetTexID(self.handle(), C.ImTextureID(id))
}

func (self FontAtlas) Destroy() {
	C.FontAtlas_Destroy(self.handle())
}

func NewFontConfig() FontConfig {
	return (FontConfig)(unsafe.Pointer(C.FontConfig_ImFontConfig()))
}

func (self FontConfig) Destroy() {
	C.FontConfig_Destroy(self.handle())
}

func (self FontGlyphRangesBuilder) AddChar(c Wchar) {
	C.FontGlyphRangesBuilder_AddChar(self.handle(), C.ImWchar(c))
}

func (self FontGlyphRangesBuilder) AddRanges(ranges *Wchar) {
	C.FontGlyphRangesBuilder_AddRanges(self.handle(), (*C.ImWchar)(ranges))
}

// FontGlyphRangesBuilder_AddTextV parameter default value hint:
// text_end: NULL
func (self FontGlyphRangesBuilder) AddTextV(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.FontGlyphRangesBuilder_AddTextV(self.handle(), textArg)
}

func (self FontGlyphRangesBuilder) Clear() {
	C.FontGlyphRangesBuilder_Clear(self.handle())
}

func (self FontGlyphRangesBuilder) GetBit(n uint64) bool {
	return C.FontGlyphRangesBuilder_GetBit(self.handle(), C.xlong(n)) == C.bool(true)
}

func NewFontGlyphRangesBuilder() FontGlyphRangesBuilder {
	return (FontGlyphRangesBuilder)(unsafe.Pointer(C.FontGlyphRangesBuilder_ImFontGlyphRangesBuilder()))
}

func (self FontGlyphRangesBuilder) SetBit(n uint64) {
	C.FontGlyphRangesBuilder_SetBit(self.handle(), C.xlong(n))
}

func (self FontGlyphRangesBuilder) Destroy() {
	C.FontGlyphRangesBuilder_Destroy(self.handle())
}

func (self Font) AddGlyph(src_cfg FontConfig, c Wchar, x0 float32, y0 float32, x1 float32, y1 float32, u0 float32, v0 float32, u1 float32, v1 float32, advance_x float32) {
	C.Font_AddGlyph(self.handle(), src_cfg.handle(), C.ImWchar(c), C.float(x0), C.float(y0), C.float(x1), C.float(y1), C.float(u0), C.float(v0), C.float(u1), C.float(v1), C.float(advance_x))
}

// Font_AddRemapCharV parameter default value hint:
// overwrite_dst: true
func (self Font) AddRemapCharV(dst Wchar, src Wchar, overwrite_dst bool) {
	C.Font_AddRemapCharV(self.handle(), C.ImWchar(dst), C.ImWchar(src), C.bool(overwrite_dst))
}

func (self Font) BuildLookupTable() {
	C.Font_BuildLookupTable(self.handle())
}

// Font_CalcTextSizeAV parameter default value hint:
// remaining: NULL
// text_end: NULL
func (self Font) CalcTextSizeAV(size float32, max_width float32, wrap_width float32, text_begin string, remaining []string) Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	remainingArg, remainingFin := wrapStringList(remaining)
	defer remainingFin()

	C.Font_CalcTextSizeAV(pOutArg, self.handle(), C.float(size), C.float(max_width), C.float(wrap_width), text_beginArg, remainingArg)
	return *pOut
}

func (self Font) CalcWordWrapPositionA(scale float32, text string, wrap_width float32) string {
	textArg, textFin := wrapString(text)
	defer textFin()

	return C.GoString(C.Font_CalcWordWrapPositionA(self.handle(), C.float(scale), textArg, C.float(wrap_width)))
}

func (self Font) ClearOutputData() {
	C.Font_ClearOutputData(self.handle())
}

func (self Font) FindGlyph(c Wchar) FontGlyph {
	return (FontGlyph)(unsafe.Pointer(C.Font_FindGlyph(self.handle(), C.ImWchar(c))))
}

func (self Font) FindGlyphNoFallback(c Wchar) FontGlyph {
	return (FontGlyph)(unsafe.Pointer(C.Font_FindGlyphNoFallback(self.handle(), C.ImWchar(c))))
}

func (self Font) GetCharAdvance(c Wchar) float32 {
	return float32(C.Font_GetCharAdvance(self.handle(), C.ImWchar(c)))
}

func (self Font) GetDebugName() string {
	return C.GoString(C.Font_GetDebugName(self.handle()))
}

func (self Font) GrowIndex(new_size int32) {
	C.Font_GrowIndex(self.handle(), C.int(new_size))
}

func NewFont() Font {
	return (Font)(unsafe.Pointer(C.Font_ImFont()))
}

func (self Font) IsGlyphRangeUnused(c_begin uint32, c_last uint32) bool {
	return C.Font_IsGlyphRangeUnused(self.handle(), C.uint(c_begin), C.uint(c_last)) == C.bool(true)
}

func (self Font) IsLoaded() bool {
	return C.Font_IsLoaded(self.handle()) == C.bool(true)
}

func (self Font) RenderChar(draw_list DrawList, size float32, pos Vec2, col uint32, c Wchar) {
	C.Font_RenderChar(self.handle(), draw_list.handle(), C.float(size), pos.toC(), C.ImU32(col), C.ImWchar(c))
}

// Font_RenderTextV parameter default value hint:
// cpu_fine_clip: false
// wrap_width: 0.0f
func (self Font) RenderTextV(draw_list DrawList, size float32, pos Vec2, col uint32, clip_rect Vec4, text_begin string, wrap_width float32, cpu_fine_clip bool) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.Font_RenderTextV(self.handle(), draw_list.handle(), C.float(size), pos.toC(), C.ImU32(col), clip_rect.toC(), text_beginArg, C.float(wrap_width), C.bool(cpu_fine_clip))
}

func (self Font) SetGlyphVisible(c Wchar, visible bool) {
	C.Font_SetGlyphVisible(self.handle(), C.ImWchar(c), C.bool(visible))
}

func (self Font) Destroy() {
	C.Font_Destroy(self.handle())
}

func (self ComboPreviewData) Destroy() {
	C.ComboPreviewData_Destroy(self.handle())
}

func (self ContextHook) Destroy() {
	C.ContextHook_Destroy(self.handle())
}

func (self Context) Destroy() {
	C.Context_Destroy(self.handle())
}

func (self DockContext) Destroy() {
	C.DockContext_Destroy(self.handle())
}

func (self IO) AddFocusEvent(focused bool) {
	C.IO_AddFocusEvent(self.handle(), C.bool(focused))
}

func (self IO) AddInputCharacter(c uint32) {
	C.IO_AddInputCharacter(self.handle(), C.uint(c))
}

func (self IO) AddInputCharactersUTF8(str string) {
	strArg, strFin := wrapString(str)
	defer strFin()

	C.IO_AddInputCharactersUTF8(self.handle(), strArg)
}

func (self IO) AddKeyAnalogEvent(key Key, down bool, v float32) {
	C.IO_AddKeyAnalogEvent(self.handle(), C.ImGuiKey(key), C.bool(down), C.float(v))
}

func (self IO) AddKeyEvent(key Key, down bool) {
	C.IO_AddKeyEvent(self.handle(), C.ImGuiKey(key), C.bool(down))
}

func (self IO) AddMouseButtonEvent(button int32, down bool) {
	C.IO_AddMouseButtonEvent(self.handle(), C.int(button), C.bool(down))
}

func (self IO) AddMousePosEvent(x float32, y float32) {
	C.IO_AddMousePosEvent(self.handle(), C.float(x), C.float(y))
}

func (self IO) AddMouseViewportEvent(id ImGuiID) {
	C.IO_AddMouseViewportEvent(self.handle(), C.ImGuiID(id))
}

func (self IO) AddMouseWheelEvent(wh_x float32, wh_y float32) {
	C.IO_AddMouseWheelEvent(self.handle(), C.float(wh_x), C.float(wh_y))
}

func (self IO) ClearInputCharacters() {
	C.IO_ClearInputCharacters(self.handle())
}

func (self IO) ClearInputKeys() {
	C.IO_ClearInputKeys(self.handle())
}

func NewIO() IO {
	return (IO)(unsafe.Pointer(C.IO_ImGuiIO()))
}

func (self IO) SetAppAcceptingEvents(accepting_events bool) {
	C.IO_SetAppAcceptingEvents(self.handle(), C.bool(accepting_events))
}

// IO_SetKeyEventNativeDataV parameter default value hint:
// native_legacy_index: -1
func (self IO) SetKeyEventNativeDataV(key Key, native_keycode int32, native_scancode int32, native_legacy_index int32) {
	C.IO_SetKeyEventNativeDataV(self.handle(), C.ImGuiKey(key), C.int(native_keycode), C.int(native_scancode), C.int(native_legacy_index))
}

func (self IO) Destroy() {
	C.IO_Destroy(self.handle())
}

func (self InputEvent) Destroy() {
	C.InputEvent_Destroy(self.handle())
}

func (self InputTextCallbackData) ClearSelection() {
	C.InputTextCallbackData_ClearSelection(self.handle())
}

func (self InputTextCallbackData) DeleteChars(pos int32, bytes_count int32) {
	C.InputTextCallbackData_DeleteChars(self.handle(), C.int(pos), C.int(bytes_count))
}

func (self InputTextCallbackData) HasSelection() bool {
	return C.InputTextCallbackData_HasSelection(self.handle()) == C.bool(true)
}

func NewInputTextCallbackData() InputTextCallbackData {
	return (InputTextCallbackData)(unsafe.Pointer(C.InputTextCallbackData_ImGuiInputTextCallbackData()))
}

// InputTextCallbackData_InsertCharsV parameter default value hint:
// text_end: NULL
func (self InputTextCallbackData) InsertCharsV(pos int32, text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.InputTextCallbackData_InsertCharsV(self.handle(), C.int(pos), textArg)
}

func (self InputTextCallbackData) SelectAll() {
	C.InputTextCallbackData_SelectAll(self.handle())
}

func (self InputTextCallbackData) Destroy() {
	C.InputTextCallbackData_Destroy(self.handle())
}

func (self InputTextState) Destroy() {
	C.InputTextState_Destroy(self.handle())
}

func (self LastItemData) Destroy() {
	C.LastItemData_Destroy(self.handle())
}

func (self ListClipperData) Destroy() {
	C.ListClipperData_Destroy(self.handle())
}

// ListClipper_BeginV parameter default value hint:
// items_height: -1.0f
func (self ListClipper) BeginV(items_count int32, items_height float32) {
	C.ListClipper_BeginV(self.handle(), C.int(items_count), C.float(items_height))
}

func (self ListClipper) End() {
	C.ListClipper_End(self.handle())
}

func (self ListClipper) ForceDisplayRangeByIndices(item_min int32, item_max int32) {
	C.ListClipper_ForceDisplayRangeByIndices(self.handle(), C.int(item_min), C.int(item_max))
}

func NewListClipper() ListClipper {
	return (ListClipper)(unsafe.Pointer(C.ListClipper_ImGuiListClipper()))
}

func (self ListClipper) Step() bool {
	return C.ListClipper_Step(self.handle()) == C.bool(true)
}

func (self ListClipper) Destroy() {
	C.ListClipper_Destroy(self.handle())
}

func (self MenuColumns) Destroy() {
	C.MenuColumns_Destroy(self.handle())
}

func (self MetricsConfig) Destroy() {
	C.MetricsConfig_Destroy(self.handle())
}

func (self NavItemData) Destroy() {
	C.NavItemData_Destroy(self.handle())
}

func (self NextItemData) Destroy() {
	C.NextItemData_Destroy(self.handle())
}

func (self NextWindowData) Destroy() {
	C.NextWindowData_Destroy(self.handle())
}

func (self OldColumnData) Destroy() {
	C.OldColumnData_Destroy(self.handle())
}

func (self OldColumns) Destroy() {
	C.OldColumns_Destroy(self.handle())
}

func NewOnceUponAFrame() OnceUponAFrame {
	return (OnceUponAFrame)(unsafe.Pointer(C.OnceUponAFrame_ImGuiOnceUponAFrame()))
}

func (self OnceUponAFrame) Destroy() {
	C.OnceUponAFrame_Destroy(self.handle())
}

func (self Payload) Clear() {
	C.Payload_Clear(self.handle())
}

func NewPayload() Payload {
	return (Payload)(unsafe.Pointer(C.Payload_ImGuiPayload()))
}

func (self Payload) IsDataType(typeArg string) bool {
	typeArgArg, typeArgFin := wrapString(typeArg)
	defer typeArgFin()

	return C.Payload_IsDataType(self.handle(), typeArgArg) == C.bool(true)
}

func (self Payload) IsDelivery() bool {
	return C.Payload_IsDelivery(self.handle()) == C.bool(true)
}

func (self Payload) IsPreview() bool {
	return C.Payload_IsPreview(self.handle()) == C.bool(true)
}

func (self Payload) Destroy() {
	C.Payload_Destroy(self.handle())
}

func NewPlatformIO() PlatformIO {
	return (PlatformIO)(unsafe.Pointer(C.PlatformIO_ImGuiPlatformIO()))
}

func (self PlatformIO) Destroy() {
	C.PlatformIO_Destroy(self.handle())
}

func NewPlatformImeData() PlatformImeData {
	return (PlatformImeData)(unsafe.Pointer(C.PlatformImeData_ImGuiPlatformImeData()))
}

func (self PlatformImeData) Destroy() {
	C.PlatformImeData_Destroy(self.handle())
}

func NewPlatformMonitor() PlatformMonitor {
	return (PlatformMonitor)(unsafe.Pointer(C.PlatformMonitor_ImGuiPlatformMonitor()))
}

func (self PlatformMonitor) Destroy() {
	C.PlatformMonitor_Destroy(self.handle())
}

func (self PopupData) Destroy() {
	C.PopupData_Destroy(self.handle())
}

func (self PtrOrIndex) Destroy() {
	C.PtrOrIndex_Destroy(self.handle())
}

func (self SettingsHandler) Destroy() {
	C.SettingsHandler_Destroy(self.handle())
}

func (self StackLevelInfo) Destroy() {
	C.StackLevelInfo_Destroy(self.handle())
}

func (self StackSizes) Destroy() {
	C.StackSizes_Destroy(self.handle())
}

func (self StackTool) Destroy() {
	C.StackTool_Destroy(self.handle())
}

func (self StyleMod) Destroy() {
	C.StyleMod_Destroy(self.handle())
}

func NewStyle() Style {
	return (Style)(unsafe.Pointer(C.Style_ImGuiStyle()))
}

func (self Style) ScaleAllSizes(scale_factor float32) {
	C.Style_ScaleAllSizes(self.handle(), C.float(scale_factor))
}

func (self Style) Destroy() {
	C.Style_Destroy(self.handle())
}

func (self TabBar) Destroy() {
	C.TabBar_Destroy(self.handle())
}

func (self TabItem) Destroy() {
	C.TabItem_Destroy(self.handle())
}

func (self TableColumnSettings) Destroy() {
	C.TableColumnSettings_Destroy(self.handle())
}

func NewTableColumnSortSpecs() TableColumnSortSpecs {
	return (TableColumnSortSpecs)(unsafe.Pointer(C.TableColumnSortSpecs_ImGuiTableColumnSortSpecs()))
}

func (self TableColumnSortSpecs) Destroy() {
	C.TableColumnSortSpecs_Destroy(self.handle())
}

func (self TableColumn) Destroy() {
	C.TableColumn_Destroy(self.handle())
}

func (self TableInstanceData) Destroy() {
	C.TableInstanceData_Destroy(self.handle())
}

func (self TableSettings) Destroy() {
	C.TableSettings_Destroy(self.handle())
}

func NewTableSortSpecs() TableSortSpecs {
	return (TableSortSpecs)(unsafe.Pointer(C.TableSortSpecs_ImGuiTableSortSpecs()))
}

func (self TableSortSpecs) Destroy() {
	C.TableSortSpecs_Destroy(self.handle())
}

func (self TableTempData) Destroy() {
	C.TableTempData_Destroy(self.handle())
}

func NewTextBuffer() TextBuffer {
	return (TextBuffer)(unsafe.Pointer(C.TextBuffer_ImGuiTextBuffer()))
}

// TextBuffer_AppendV parameter default value hint:
// str_end: NULL
func (self TextBuffer) AppendV(str string, str_end string) {
	strArg, strFin := wrapString(str)
	defer strFin()

	str_endArg, str_endFin := wrapString(str_end)
	defer str_endFin()

	C.TextBuffer_AppendV(self.handle(), strArg, str_endArg)
}

func (self TextBuffer) Appendf(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.TextBuffer_Appendf(self.handle(), fmtArg)
}

func (self TextBuffer) Begin() string {
	return C.GoString(C.TextBuffer_Begin(self.handle()))
}

func (self TextBuffer) c_str() string {
	return C.GoString(C.TextBuffer_c_str(self.handle()))
}

func (self TextBuffer) Clear() {
	C.TextBuffer_Clear(self.handle())
}

func (self TextBuffer) Destroy() {
	C.TextBuffer_Destroy(self.handle())
}

func (self TextBuffer) Empty() bool {
	return C.TextBuffer_Empty(self.handle()) == C.bool(true)
}

func (self TextBuffer) End() string {
	return C.GoString(C.TextBuffer_End(self.handle()))
}

func (self TextBuffer) Reserve(capacity int32) {
	C.TextBuffer_Reserve(self.handle(), C.int(capacity))
}

func (self TextBuffer) Size() int {
	return int(C.TextBuffer_Size(self.handle()))
}

func (self TextFilter) Build() {
	C.TextFilter_Build(self.handle())
}

func (self TextFilter) Clear() {
	C.TextFilter_Clear(self.handle())
}

// TextFilter_DrawV parameter default value hint:
// label: "Filter(inc,-exc)"
// width: 0.0f
func (self TextFilter) DrawV(label string, width float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TextFilter_DrawV(self.handle(), labelArg, C.float(width)) == C.bool(true)
}

// NewTextFilter parameter default value hint:
// default_filter: ""
func NewTextFilter(default_filter string) TextFilter {
	default_filterArg, default_filterFin := wrapString(default_filter)
	defer default_filterFin()

	return (TextFilter)(unsafe.Pointer(C.TextFilter_ImGuiTextFilter(default_filterArg)))
}

func (self TextFilter) IsActive() bool {
	return C.TextFilter_IsActive(self.handle()) == C.bool(true)
}

// TextFilter_PassFilterV parameter default value hint:
// text_end: NULL
func (self TextFilter) PassFilterV(text string) bool {
	textArg, textFin := wrapString(text)
	defer textFin()

	return C.TextFilter_PassFilterV(self.handle(), textArg) == C.bool(true)
}

func (self TextFilter) Destroy() {
	C.TextFilter_Destroy(self.handle())
}

func (self Viewport) GetCenter() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.Viewport_GetCenter(pOutArg, self.handle())
	return *pOut
}

func (self Viewport) GetWorkCenter() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.Viewport_GetWorkCenter(pOutArg, self.handle())
	return *pOut
}

func NewViewport() Viewport {
	return (Viewport)(unsafe.Pointer(C.Viewport_ImGuiViewport()))
}

func (self Viewport) Destroy() {
	C.Viewport_Destroy(self.handle())
}

func NewWindowClass() WindowClass {
	return (WindowClass)(unsafe.Pointer(C.WindowClass_ImGuiWindowClass()))
}

func (self WindowClass) Destroy() {
	C.WindowClass_Destroy(self.handle())
}

func (self WindowSettings) Destroy() {
	C.WindowSettings_Destroy(self.handle())
}

func (self *Rect) Destroy() {
	selfArg, selfFin := wrap[C.ImRect, *Rect](self)
	defer selfFin()

	C.Rect_Destroy(selfArg)
}

func (self *Vec2) Destroy() {
	selfArg, selfFin := wrap[C.ImVec2, *Vec2](self)
	defer selfFin()

	C.Vec2_Destroy(selfArg)
}

func (self *Vec4) Destroy() {
	selfArg, selfFin := wrap[C.ImVec4, *Vec4](self)
	defer selfFin()

	C.Vec4_Destroy(selfArg)
}

// AcceptDragDropPayloadV parameter default value hint:
// flags: 0
func AcceptDragDropPayloadV(typeArg string, flags DragDropFlags) Payload {
	typeArgArg, typeArgFin := wrapString(typeArg)
	defer typeArgFin()

	return (Payload)(unsafe.Pointer(C.AcceptDragDropPayloadV(typeArgArg, C.ImGuiDragDropFlags(flags))))
}

func AlignTextToFramePadding() {
	C.AlignTextToFramePadding()
}

func ArrowButton(str_id string, dir Dir) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.ArrowButton(str_idArg, C.ImGuiDir(dir)) == C.bool(true)
}

// BeginV parameter default value hint:
// flags: 0
// p_open: NULL
func BeginV(name string, p_open *bool, flags WindowFlags) bool {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	return C.BeginV(nameArg, p_openArg, C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginChildFrameV parameter default value hint:
// flags: 0
func BeginChildFrameV(id ImGuiID, size Vec2, flags WindowFlags) bool {
	return C.BeginChildFrameV(C.ImGuiID(id), size.toC(), C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginChild_IDV parameter default value hint:
// border: false
// flags: 0
// size: ImVec2(0,0)
func BeginChild_IDV(id ImGuiID, size Vec2, border bool, flags WindowFlags) bool {
	return C.BeginChild_IDV(C.ImGuiID(id), size.toC(), C.bool(border), C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginChild_StrV parameter default value hint:
// border: false
// flags: 0
// size: ImVec2(0,0)
func BeginChild_StrV(str_id string, size Vec2, border bool, flags WindowFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginChild_StrV(str_idArg, size.toC(), C.bool(border), C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginComboV parameter default value hint:
// flags: 0
func BeginComboV(label string, preview_value string, flags ComboFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	preview_valueArg, preview_valueFin := wrapString(preview_value)
	defer preview_valueFin()

	return C.BeginComboV(labelArg, preview_valueArg, C.ImGuiComboFlags(flags)) == C.bool(true)
}

// BeginDisabledV parameter default value hint:
// disabled: true
func BeginDisabledV(disabled bool) {
	C.BeginDisabledV(C.bool(disabled))
}

// BeginDragDropSourceV parameter default value hint:
// flags: 0
func BeginDragDropSourceV(flags DragDropFlags) bool {
	return C.BeginDragDropSourceV(C.ImGuiDragDropFlags(flags)) == C.bool(true)
}

func BeginDragDropTarget() bool {
	return C.BeginDragDropTarget() == C.bool(true)
}

func BeginGroup() {
	C.BeginGroup()
}

// BeginListBoxV parameter default value hint:
// size: ImVec2(0,0)
func BeginListBoxV(label string, size Vec2) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.BeginListBoxV(labelArg, size.toC()) == C.bool(true)
}

func BeginMainMenuBar() bool {
	return C.BeginMainMenuBar() == C.bool(true)
}

// BeginMenuV parameter default value hint:
// enabled: true
func BeginMenuV(label string, enabled bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.BeginMenuV(labelArg, C.bool(enabled)) == C.bool(true)
}

func BeginMenuBar() bool {
	return C.BeginMenuBar() == C.bool(true)
}

// BeginPopupV parameter default value hint:
// flags: 0
func BeginPopupV(str_id string, flags WindowFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginPopupV(str_idArg, C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginPopupContextItemV parameter default value hint:
// popup_flags: 1
// str_id: NULL
func BeginPopupContextItemV(str_id string, popup_flags PopupFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginPopupContextItemV(str_idArg, C.ImGuiPopupFlags(popup_flags)) == C.bool(true)
}

// BeginPopupContextVoidV parameter default value hint:
// popup_flags: 1
// str_id: NULL
func BeginPopupContextVoidV(str_id string, popup_flags PopupFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginPopupContextVoidV(str_idArg, C.ImGuiPopupFlags(popup_flags)) == C.bool(true)
}

// BeginPopupContextWindowV parameter default value hint:
// popup_flags: 1
// str_id: NULL
func BeginPopupContextWindowV(str_id string, popup_flags PopupFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginPopupContextWindowV(str_idArg, C.ImGuiPopupFlags(popup_flags)) == C.bool(true)
}

// BeginPopupModalV parameter default value hint:
// flags: 0
// p_open: NULL
func BeginPopupModalV(name string, p_open *bool, flags WindowFlags) bool {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	return C.BeginPopupModalV(nameArg, p_openArg, C.ImGuiWindowFlags(flags)) == C.bool(true)
}

// BeginTabBarV parameter default value hint:
// flags: 0
func BeginTabBarV(str_id string, flags TabBarFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginTabBarV(str_idArg, C.ImGuiTabBarFlags(flags)) == C.bool(true)
}

// BeginTabItemV parameter default value hint:
// flags: 0
// p_open: NULL
func BeginTabItemV(label string, p_open *bool, flags TabItemFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	return C.BeginTabItemV(labelArg, p_openArg, C.ImGuiTabItemFlags(flags)) == C.bool(true)
}

// BeginTableV parameter default value hint:
// flags: 0
// inner_width: 0.0f
// outer_size: ImVec2(0.0f,0.0f)
func BeginTableV(str_id string, column int32, flags TableFlags, outer_size Vec2, inner_width float32) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginTableV(str_idArg, C.int(column), C.ImGuiTableFlags(flags), outer_size.toC(), C.float(inner_width)) == C.bool(true)
}

func BeginTooltip() {
	C.BeginTooltip()
}

func Bullet() {
	C.Bullet()
}

func BulletText(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.BulletText(fmtArg)
}

// ButtonV parameter default value hint:
// size: ImVec2(0,0)
func ButtonV(label string, size Vec2) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.ButtonV(labelArg, size.toC()) == C.bool(true)
}

func CalcItemWidth() float32 {
	return float32(C.CalcItemWidth())
}

// CalcTextSizeV parameter default value hint:
// hide_text_after_double_hash: false
// text_end: NULL
// wrap_width: -1.0f
func CalcTextSizeV(text string, hide_text_after_double_hash bool, wrap_width float32) Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	textArg, textFin := wrapString(text)
	defer textFin()

	C.CalcTextSizeV(pOutArg, textArg, C.bool(hide_text_after_double_hash), C.float(wrap_width))
	return *pOut
}

func Checkbox(label string, v *bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapBool(v)
	defer vFin()

	return C.Checkbox(labelArg, vArg) == C.bool(true)
}

func CheckboxFlags_IntPtr(label string, flags *int32, flags_value int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	flagsArg, flagsFin := wrapNumberPtr[C.int, int32](flags)
	defer flagsFin()

	return C.CheckboxFlags_IntPtr(labelArg, flagsArg, C.int(flags_value)) == C.bool(true)
}

func CheckboxFlags_UintPtr(label string, flags *uint32, flags_value uint32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	flagsArg, flagsFin := wrapNumberPtr[C.uint, uint32](flags)
	defer flagsFin()

	return C.CheckboxFlags_UintPtr(labelArg, flagsArg, C.uint(flags_value)) == C.bool(true)
}

func CloseCurrentPopup() {
	C.CloseCurrentPopup()
}

// CollapsingHeader_BoolPtrV parameter default value hint:
// flags: 0
func CollapsingHeader_BoolPtrV(label string, p_visible *bool, flags TreeNodeFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	p_visibleArg, p_visibleFin := wrapBool(p_visible)
	defer p_visibleFin()

	return C.CollapsingHeader_BoolPtrV(labelArg, p_visibleArg, C.ImGuiTreeNodeFlags(flags)) == C.bool(true)
}

// CollapsingHeader_TreeNodeFlagsV parameter default value hint:
// flags: 0
func CollapsingHeader_TreeNodeFlagsV(label string, flags TreeNodeFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.CollapsingHeader_TreeNodeFlagsV(labelArg, C.ImGuiTreeNodeFlags(flags)) == C.bool(true)
}

// ColorButtonV parameter default value hint:
// flags: 0
// size: ImVec2(0,0)
func ColorButtonV(desc_id string, col Vec4, flags ColorEditFlags, size Vec2) bool {
	desc_idArg, desc_idFin := wrapString(desc_id)
	defer desc_idFin()

	return C.ColorButtonV(desc_idArg, col.toC(), C.ImGuiColorEditFlags(flags), size.toC()) == C.bool(true)
}

func ColorConvertFloat4ToU32(in Vec4) uint32 {
	return uint32(C.ColorConvertFloat4ToU32(in.toC()))
}

func ColorConvertHSVtoRGB(h float32, s float32, v float32, out_r *float32, out_g *float32, out_b *float32) {
	out_rArg, out_rFin := wrapNumberPtr[C.float, float32](out_r)
	defer out_rFin()

	out_gArg, out_gFin := wrapNumberPtr[C.float, float32](out_g)
	defer out_gFin()

	out_bArg, out_bFin := wrapNumberPtr[C.float, float32](out_b)
	defer out_bFin()

	C.ColorConvertHSVtoRGB(C.float(h), C.float(s), C.float(v), out_rArg, out_gArg, out_bArg)
}

func ColorConvertRGBtoHSV(r float32, g float32, b float32, out_h *float32, out_s *float32, out_v *float32) {
	out_hArg, out_hFin := wrapNumberPtr[C.float, float32](out_h)
	defer out_hFin()

	out_sArg, out_sFin := wrapNumberPtr[C.float, float32](out_s)
	defer out_sFin()

	out_vArg, out_vFin := wrapNumberPtr[C.float, float32](out_v)
	defer out_vFin()

	C.ColorConvertRGBtoHSV(C.float(r), C.float(g), C.float(b), out_hArg, out_sArg, out_vArg)
}

func ColorConvertU32ToFloat4(in uint32) Vec4 {
	pOut := &Vec4{}
	pOutArg, pOutFin := wrap[C.ImVec4, *Vec4](pOut)
	defer pOutFin()

	C.ColorConvertU32ToFloat4(pOutArg, C.ImU32(in))
	return *pOut
}

// ColorEdit3V parameter default value hint:
// flags: 0
func ColorEdit3V(label string, col [3]*float32, flags ColorEditFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorEdit3V(labelArg, (*C.float)(&colArg[0]), C.ImGuiColorEditFlags(flags)) == C.bool(true)
}

// ColorEdit4V parameter default value hint:
// flags: 0
func ColorEdit4V(label string, col [4]*float32, flags ColorEditFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorEdit4V(labelArg, (*C.float)(&colArg[0]), C.ImGuiColorEditFlags(flags)) == C.bool(true)
}

// ColorPicker3V parameter default value hint:
// flags: 0
func ColorPicker3V(label string, col [3]*float32, flags ColorEditFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorPicker3V(labelArg, (*C.float)(&colArg[0]), C.ImGuiColorEditFlags(flags)) == C.bool(true)
}

// ColorPicker4V parameter default value hint:
// flags: 0
// ref_col: NULL
func ColorPicker4V(label string, col [4]*float32, flags ColorEditFlags, ref_col []float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorPicker4V(labelArg, (*C.float)(&colArg[0]), C.ImGuiColorEditFlags(flags), (*C.float)(&(ref_col[0]))) == C.bool(true)
}

// ColumnsV parameter default value hint:
// border: true
// count: 1
// id: NULL
func ColumnsV(count int32, id string, border bool) {
	idArg, idFin := wrapString(id)
	defer idFin()

	C.ColumnsV(C.int(count), idArg, C.bool(border))
}

// Combo_StrV parameter default value hint:
// popup_max_height_in_items: -1
func Combo_StrV(label string, current_item *int32, items_separated_by_zeros string, popup_max_height_in_items int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	items_separated_by_zerosArg, items_separated_by_zerosFin := wrapString(items_separated_by_zeros)
	defer items_separated_by_zerosFin()

	return C.Combo_StrV(labelArg, current_itemArg, items_separated_by_zerosArg, C.int(popup_max_height_in_items)) == C.bool(true)
}

// Combo_Str_arrV parameter default value hint:
// popup_max_height_in_items: -1
func Combo_Str_arrV(label string, current_item *int32, items []string, items_count int32, popup_max_height_in_items int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	itemsArg, itemsFin := wrapStringList(items)
	defer itemsFin()

	return C.Combo_Str_arrV(labelArg, current_itemArg, itemsArg, C.int(items_count), C.int(popup_max_height_in_items)) == C.bool(true)
}

// CreateContextV parameter default value hint:
// shared_font_atlas: NULL
func CreateContextV(shared_font_atlas FontAtlas) Context {
	return (Context)(unsafe.Pointer(C.CreateContextV(shared_font_atlas.handle())))
}

func DebugCheckVersionAndDataLayout(version_str string, sz_io uint64, sz_style uint64, sz_vec2 uint64, sz_vec4 uint64, sz_drawvert uint64, sz_drawidx uint64) bool {
	version_strArg, version_strFin := wrapString(version_str)
	defer version_strFin()

	return C.DebugCheckVersionAndDataLayout(version_strArg, C.xlong(sz_io), C.xlong(sz_style), C.xlong(sz_vec2), C.xlong(sz_vec4), C.xlong(sz_drawvert), C.xlong(sz_drawidx)) == C.bool(true)
}

func DebugTextEncoding(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.DebugTextEncoding(textArg)
}

// DestroyContextV parameter default value hint:
// ctx: NULL
func DestroyContextV(ctx Context) {
	C.DestroyContextV(ctx.handle())
}

func DestroyPlatformWindows() {
	C.DestroyPlatformWindows()
}

// DockSpaceV parameter default value hint:
// flags: 0
// size: ImVec2(0,0)
// window_class: NULL
func DockSpaceV(id ImGuiID, size Vec2, flags DockNodeFlags, window_class WindowClass) ImGuiID {
	return ImGuiID(C.DockSpaceV(C.ImGuiID(id), size.toC(), C.ImGuiDockNodeFlags(flags), window_class.handle()))
}

// DockSpaceOverViewportV parameter default value hint:
// flags: 0
// viewport: NULL
// window_class: NULL
func DockSpaceOverViewportV(viewport Viewport, flags DockNodeFlags, window_class WindowClass) ImGuiID {
	return ImGuiID(C.DockSpaceOverViewportV(viewport.handle(), C.ImGuiDockNodeFlags(flags), window_class.handle()))
}

// DragFloatV parameter default value hint:
// flags: 0
// format: "%.3f"
// v_max: 0.0f
// v_min: 0.0f
// v_speed: 1.0f
func DragFloatV(label string, v *float32, v_speed float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragFloatV(labelArg, vArg, C.float(v_speed), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragFloat2V parameter default value hint:
// flags: 0
// format: "%.3f"
// v_max: 0.0f
// v_min: 0.0f
// v_speed: 1.0f
func DragFloat2V(label string, v [2]*float32, v_speed float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragFloat2V(labelArg, (*C.float)(&vArg[0]), C.float(v_speed), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragFloat3V parameter default value hint:
// flags: 0
// format: "%.3f"
// v_max: 0.0f
// v_min: 0.0f
// v_speed: 1.0f
func DragFloat3V(label string, v [3]*float32, v_speed float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragFloat3V(labelArg, (*C.float)(&vArg[0]), C.float(v_speed), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragFloat4V parameter default value hint:
// flags: 0
// format: "%.3f"
// v_max: 0.0f
// v_min: 0.0f
// v_speed: 1.0f
func DragFloat4V(label string, v [4]*float32, v_speed float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragFloat4V(labelArg, (*C.float)(&vArg[0]), C.float(v_speed), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragFloatRange2V parameter default value hint:
// flags: 0
// format: "%.3f"
// format_max: NULL
// v_max: 0.0f
// v_min: 0.0f
// v_speed: 1.0f
func DragFloatRange2V(label string, v_current_min *float32, v_current_max *float32, v_speed float32, v_min float32, v_max float32, format string, format_max string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_current_minArg, v_current_minFin := wrapNumberPtr[C.float, float32](v_current_min)
	defer v_current_minFin()

	v_current_maxArg, v_current_maxFin := wrapNumberPtr[C.float, float32](v_current_max)
	defer v_current_maxFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	format_maxArg, format_maxFin := wrapString(format_max)
	defer format_maxFin()

	return C.DragFloatRange2V(labelArg, v_current_minArg, v_current_maxArg, C.float(v_speed), C.float(v_min), C.float(v_max), formatArg, format_maxArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragIntV parameter default value hint:
// flags: 0
// format: "%d"
// v_max: 0
// v_min: 0
// v_speed: 1.0f
func DragIntV(label string, v *int32, v_speed float32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragIntV(labelArg, vArg, C.float(v_speed), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragInt2V parameter default value hint:
// flags: 0
// format: "%d"
// v_max: 0
// v_min: 0
// v_speed: 1.0f
func DragInt2V(label string, v [2]*int32, v_speed float32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragInt2V(labelArg, (*C.int)(&vArg[0]), C.float(v_speed), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragInt3V parameter default value hint:
// flags: 0
// format: "%d"
// v_max: 0
// v_min: 0
// v_speed: 1.0f
func DragInt3V(label string, v [3]*int32, v_speed float32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragInt3V(labelArg, (*C.int)(&vArg[0]), C.float(v_speed), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragInt4V parameter default value hint:
// flags: 0
// format: "%d"
// v_max: 0
// v_min: 0
// v_speed: 1.0f
func DragInt4V(label string, v [4]*int32, v_speed float32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragInt4V(labelArg, (*C.int)(&vArg[0]), C.float(v_speed), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragIntRange2V parameter default value hint:
// flags: 0
// format: "%d"
// format_max: NULL
// v_max: 0
// v_min: 0
// v_speed: 1.0f
func DragIntRange2V(label string, v_current_min *int32, v_current_max *int32, v_speed float32, v_min int32, v_max int32, format string, format_max string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_current_minArg, v_current_minFin := wrapNumberPtr[C.int, int32](v_current_min)
	defer v_current_minFin()

	v_current_maxArg, v_current_maxFin := wrapNumberPtr[C.int, int32](v_current_max)
	defer v_current_maxFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	format_maxArg, format_maxFin := wrapString(format_max)
	defer format_maxFin()

	return C.DragIntRange2V(labelArg, v_current_minArg, v_current_maxArg, C.float(v_speed), C.int(v_min), C.int(v_max), formatArg, format_maxArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragScalarV parameter default value hint:
// flags: 0
// format: NULL
// p_max: NULL
// p_min: NULL
// v_speed: 1.0f
func DragScalarV(label string, data_type DataType, p_data unsafe.Pointer, v_speed float32, p_min unsafe.Pointer, p_max unsafe.Pointer, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragScalarV(labelArg, C.ImGuiDataType(data_type), p_data, C.float(v_speed), p_min, p_max, formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// DragScalarNV parameter default value hint:
// flags: 0
// format: NULL
// p_max: NULL
// p_min: NULL
// v_speed: 1.0f
func DragScalarNV(label string, data_type DataType, p_data unsafe.Pointer, components int32, v_speed float32, p_min unsafe.Pointer, p_max unsafe.Pointer, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.DragScalarNV(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components), C.float(v_speed), p_min, p_max, formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

func Dummy(size Vec2) {
	C.Dummy(size.toC())
}

func End() {
	C.End()
}

func EndChild() {
	C.EndChild()
}

func EndChildFrame() {
	C.EndChildFrame()
}

func EndCombo() {
	C.EndCombo()
}

func EndDisabled() {
	C.EndDisabled()
}

func EndDragDropSource() {
	C.EndDragDropSource()
}

func EndDragDropTarget() {
	C.EndDragDropTarget()
}

func EndFrame() {
	C.EndFrame()
}

func EndGroup() {
	C.EndGroup()
}

func EndListBox() {
	C.EndListBox()
}

func EndMainMenuBar() {
	C.EndMainMenuBar()
}

func EndMenu() {
	C.EndMenu()
}

func EndMenuBar() {
	C.EndMenuBar()
}

func EndPopup() {
	C.EndPopup()
}

func EndTabBar() {
	C.EndTabBar()
}

func EndTabItem() {
	C.EndTabItem()
}

func EndTable() {
	C.EndTable()
}

func EndTooltip() {
	C.EndTooltip()
}

func FindViewportByID(id ImGuiID) Viewport {
	return (Viewport)(unsafe.Pointer(C.FindViewportByID(C.ImGuiID(id))))
}

func FindViewportByPlatformHandle(platform_handle unsafe.Pointer) Viewport {
	return (Viewport)(unsafe.Pointer(C.FindViewportByPlatformHandle(platform_handle)))
}

func GetBackgroundDrawList_Nil() DrawList {
	return (DrawList)(unsafe.Pointer(C.GetBackgroundDrawList_Nil()))
}

func GetBackgroundDrawList_ViewportPtr(viewport Viewport) DrawList {
	return (DrawList)(unsafe.Pointer(C.GetBackgroundDrawList_ViewportPtr(viewport.handle())))
}

func GetClipboardText() string {
	return C.GoString(C.GetClipboardText())
}

// GetColorU32_ColV parameter default value hint:
// alpha_mul: 1.0f
func GetColorU32_ColV(idx Col, alpha_mul float32) uint32 {
	return uint32(C.GetColorU32_ColV(C.ImGuiCol(idx), C.float(alpha_mul)))
}

func GetColorU32_U32(col uint32) uint32 {
	return uint32(C.GetColorU32_U32(C.ImU32(col)))
}

func GetColorU32_Vec4(col Vec4) uint32 {
	return uint32(C.GetColorU32_Vec4(col.toC()))
}

func GetColumnIndex() int {
	return int(C.GetColumnIndex())
}

// GetColumnOffsetV parameter default value hint:
// column_index: -1
func GetColumnOffsetV(column_index int32) float32 {
	return float32(C.GetColumnOffsetV(C.int(column_index)))
}

// GetColumnWidthV parameter default value hint:
// column_index: -1
func GetColumnWidthV(column_index int32) float32 {
	return float32(C.GetColumnWidthV(C.int(column_index)))
}

func GetColumnsCount() int {
	return int(C.GetColumnsCount())
}

func GetContentRegionAvail() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetContentRegionAvail(pOutArg)
	return *pOut
}

func GetContentRegionMax() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetContentRegionMax(pOutArg)
	return *pOut
}

func GetCurrentContext() Context {
	return (Context)(unsafe.Pointer(C.GetCurrentContext()))
}

func GetCursorPos() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetCursorPos(pOutArg)
	return *pOut
}

func GetCursorPosX() float32 {
	return float32(C.GetCursorPosX())
}

func GetCursorPosY() float32 {
	return float32(C.GetCursorPosY())
}

func GetCursorScreenPos() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetCursorScreenPos(pOutArg)
	return *pOut
}

func GetCursorStartPos() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetCursorStartPos(pOutArg)
	return *pOut
}

func GetDragDropPayload() Payload {
	return (Payload)(unsafe.Pointer(C.GetDragDropPayload()))
}

func GetDrawData() DrawData {
	return (DrawData)(unsafe.Pointer(C.GetDrawData()))
}

func GetDrawListSharedData() DrawListSharedData {
	return (DrawListSharedData)(unsafe.Pointer(C.GetDrawListSharedData()))
}

func GetFont() Font {
	return (Font)(unsafe.Pointer(C.GetFont()))
}

func GetFontSize() float32 {
	return float32(C.GetFontSize())
}

func GetFontTexUvWhitePixel() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetFontTexUvWhitePixel(pOutArg)
	return *pOut
}

func GetForegroundDrawList_Nil() DrawList {
	return (DrawList)(unsafe.Pointer(C.GetForegroundDrawList_Nil()))
}

func GetForegroundDrawList_ViewportPtr(viewport Viewport) DrawList {
	return (DrawList)(unsafe.Pointer(C.GetForegroundDrawList_ViewportPtr(viewport.handle())))
}

func GetFrameCount() int {
	return int(C.GetFrameCount())
}

func GetFrameHeight() float32 {
	return float32(C.GetFrameHeight())
}

func GetFrameHeightWithSpacing() float32 {
	return float32(C.GetFrameHeightWithSpacing())
}

func GetID_Ptr(ptr_id unsafe.Pointer) ImGuiID {
	return ImGuiID(C.GetID_Ptr(ptr_id))
}

func GetID_Str(str_id string) ImGuiID {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return ImGuiID(C.GetID_Str(str_idArg))
}

func GetID_StrStr(str_id_begin string, str_id_end string) ImGuiID {
	str_id_beginArg, str_id_beginFin := wrapString(str_id_begin)
	defer str_id_beginFin()

	str_id_endArg, str_id_endFin := wrapString(str_id_end)
	defer str_id_endFin()

	return ImGuiID(C.GetID_StrStr(str_id_beginArg, str_id_endArg))
}

func GetIO() IO {
	return (IO)(unsafe.Pointer(C.GetIO()))
}

func GetItemRectMax() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetItemRectMax(pOutArg)
	return *pOut
}

func GetItemRectMin() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetItemRectMin(pOutArg)
	return *pOut
}

func GetItemRectSize() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetItemRectSize(pOutArg)
	return *pOut
}

func GetKeyIndex(key Key) int {
	return int(C.GetKeyIndex(C.ImGuiKey(key)))
}

func GetKeyName(key Key) string {
	return C.GoString(C.GetKeyName(C.ImGuiKey(key)))
}

func GetKeyPressedAmount(key Key, repeat_delay float32, rate float32) int {
	return int(C.GetKeyPressedAmount(C.ImGuiKey(key), C.float(repeat_delay), C.float(rate)))
}

func GetMainViewport() Viewport {
	return (Viewport)(unsafe.Pointer(C.GetMainViewport()))
}

func GetMouseClickedCount(button MouseButton) int {
	return int(C.GetMouseClickedCount(C.ImGuiMouseButton(button)))
}

func GetMouseCursor() MouseCursor {
	return MouseCursor(C.GetMouseCursor())
}

// GetMouseDragDeltaV parameter default value hint:
// button: 0
// lock_threshold: -1.0f
func GetMouseDragDeltaV(button MouseButton, lock_threshold float32) Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetMouseDragDeltaV(pOutArg, C.ImGuiMouseButton(button), C.float(lock_threshold))
	return *pOut
}

func GetMousePos() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetMousePos(pOutArg)
	return *pOut
}

func GetMousePosOnOpeningCurrentPopup() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetMousePosOnOpeningCurrentPopup(pOutArg)
	return *pOut
}

func GetPlatformIO() PlatformIO {
	return (PlatformIO)(unsafe.Pointer(C.GetPlatformIO()))
}

func GetScrollMaxX() float32 {
	return float32(C.GetScrollMaxX())
}

func GetScrollMaxY() float32 {
	return float32(C.GetScrollMaxY())
}

func GetScrollX() float32 {
	return float32(C.GetScrollX())
}

func GetScrollY() float32 {
	return float32(C.GetScrollY())
}

func GetStyle() Style {
	return (Style)(unsafe.Pointer(C.GetStyle()))
}

func GetStyleColorName(idx Col) string {
	return C.GoString(C.GetStyleColorName(C.ImGuiCol(idx)))
}

func GetStyleColorVec4(idx Col) *Vec4 {
	out := &Vec4{}
	out.fromC(*C.GetStyleColorVec4(C.ImGuiCol(idx)))
	return out
}

func GetTextLineHeight() float32 {
	return float32(C.GetTextLineHeight())
}

func GetTextLineHeightWithSpacing() float32 {
	return float32(C.GetTextLineHeightWithSpacing())
}

func GetTime() float64 {
	return float64(C.GetTime())
}

func GetTreeNodeToLabelSpacing() float32 {
	return float32(C.GetTreeNodeToLabelSpacing())
}

func GetVersion() string {
	return C.GoString(C.GetVersion())
}

func GetWindowContentRegionMax() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetWindowContentRegionMax(pOutArg)
	return *pOut
}

func GetWindowContentRegionMin() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetWindowContentRegionMin(pOutArg)
	return *pOut
}

func GetWindowDockID() ImGuiID {
	return ImGuiID(C.GetWindowDockID())
}

func GetWindowDpiScale() float32 {
	return float32(C.GetWindowDpiScale())
}

func GetWindowDrawList() DrawList {
	return (DrawList)(unsafe.Pointer(C.GetWindowDrawList()))
}

func GetWindowHeight() float32 {
	return float32(C.GetWindowHeight())
}

func GetWindowPos() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetWindowPos(pOutArg)
	return *pOut
}

func GetWindowSize() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetWindowSize(pOutArg)
	return *pOut
}

func GetWindowViewport() Viewport {
	return (Viewport)(unsafe.Pointer(C.GetWindowViewport()))
}

func GetWindowWidth() float32 {
	return float32(C.GetWindowWidth())
}

// ImageV parameter default value hint:
// border_col: ImVec4(0,0,0,0)
// tint_col: ImVec4(1,1,1,1)
// uv0: ImVec2(0,0)
// uv1: ImVec2(1,1)
func ImageV(user_texture_id TextureID, size Vec2, uv0 Vec2, uv1 Vec2, tint_col Vec4, border_col Vec4) {
	C.ImageV(C.ImTextureID(user_texture_id), size.toC(), uv0.toC(), uv1.toC(), tint_col.toC(), border_col.toC())
}

// ImageButtonV parameter default value hint:
// bg_col: ImVec4(0,0,0,0)
// tint_col: ImVec4(1,1,1,1)
// uv0: ImVec2(0,0)
// uv1: ImVec2(1,1)
func ImageButtonV(str_id string, user_texture_id TextureID, size Vec2, uv0 Vec2, uv1 Vec2, bg_col Vec4, tint_col Vec4) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.ImageButtonV(str_idArg, C.ImTextureID(user_texture_id), size.toC(), uv0.toC(), uv1.toC(), bg_col.toC(), tint_col.toC()) == C.bool(true)
}

// IndentV parameter default value hint:
// indent_w: 0.0f
func IndentV(indent_w float32) {
	C.IndentV(C.float(indent_w))
}

// InputDoubleV parameter default value hint:
// flags: 0
// format: "%.6f"
// step: 0.0
// step_fast: 0.0
func InputDoubleV(label string, v *float64, step float64, step_fast float64, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.double, float64](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputDoubleV(labelArg, vArg, C.double(step), C.double(step_fast), formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputFloatV parameter default value hint:
// flags: 0
// format: "%.3f"
// step: 0.0f
// step_fast: 0.0f
func InputFloatV(label string, v *float32, step float32, step_fast float32, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputFloatV(labelArg, vArg, C.float(step), C.float(step_fast), formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputFloat2V parameter default value hint:
// flags: 0
// format: "%.3f"
func InputFloat2V(label string, v [2]*float32, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputFloat2V(labelArg, (*C.float)(&vArg[0]), formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputFloat3V parameter default value hint:
// flags: 0
// format: "%.3f"
func InputFloat3V(label string, v [3]*float32, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputFloat3V(labelArg, (*C.float)(&vArg[0]), formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputFloat4V parameter default value hint:
// flags: 0
// format: "%.3f"
func InputFloat4V(label string, v [4]*float32, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputFloat4V(labelArg, (*C.float)(&vArg[0]), formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputIntV parameter default value hint:
// flags: 0
// step: 1
// step_fast: 100
func InputIntV(label string, v *int32, step int32, step_fast int32, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.InputIntV(labelArg, vArg, C.int(step), C.int(step_fast), C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputInt2V parameter default value hint:
// flags: 0
func InputInt2V(label string, v [2]*int32, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt2V(labelArg, (*C.int)(&vArg[0]), C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputInt3V parameter default value hint:
// flags: 0
func InputInt3V(label string, v [3]*int32, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt3V(labelArg, (*C.int)(&vArg[0]), C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputInt4V parameter default value hint:
// flags: 0
func InputInt4V(label string, v [4]*int32, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt4V(labelArg, (*C.int)(&vArg[0]), C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputScalarV parameter default value hint:
// flags: 0
// format: NULL
// p_step: NULL
// p_step_fast: NULL
func InputScalarV(label string, data_type DataType, p_data unsafe.Pointer, p_step unsafe.Pointer, p_step_fast unsafe.Pointer, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputScalarV(labelArg, C.ImGuiDataType(data_type), p_data, p_step, p_step_fast, formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InputScalarNV parameter default value hint:
// flags: 0
// format: NULL
// p_step: NULL
// p_step_fast: NULL
func InputScalarNV(label string, data_type DataType, p_data unsafe.Pointer, components int32, p_step unsafe.Pointer, p_step_fast unsafe.Pointer, format string, flags InputTextFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.InputScalarNV(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components), p_step, p_step_fast, formatArg, C.ImGuiInputTextFlags(flags)) == C.bool(true)
}

// InvisibleButtonV parameter default value hint:
// flags: 0
func InvisibleButtonV(str_id string, size Vec2, flags ButtonFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.InvisibleButtonV(str_idArg, size.toC(), C.ImGuiButtonFlags(flags)) == C.bool(true)
}

func IsAnyItemActive() bool {
	return C.IsAnyItemActive() == C.bool(true)
}

func IsAnyItemFocused() bool {
	return C.IsAnyItemFocused() == C.bool(true)
}

func IsAnyItemHovered() bool {
	return C.IsAnyItemHovered() == C.bool(true)
}

func IsAnyMouseDown() bool {
	return C.IsAnyMouseDown() == C.bool(true)
}

func IsItemActivated() bool {
	return C.IsItemActivated() == C.bool(true)
}

func IsItemActive() bool {
	return C.IsItemActive() == C.bool(true)
}

// IsItemClickedV parameter default value hint:
// mouse_button: 0
func IsItemClickedV(mouse_button MouseButton) bool {
	return C.IsItemClickedV(C.ImGuiMouseButton(mouse_button)) == C.bool(true)
}

func IsItemDeactivated() bool {
	return C.IsItemDeactivated() == C.bool(true)
}

func IsItemDeactivatedAfterEdit() bool {
	return C.IsItemDeactivatedAfterEdit() == C.bool(true)
}

func IsItemEdited() bool {
	return C.IsItemEdited() == C.bool(true)
}

func IsItemFocused() bool {
	return C.IsItemFocused() == C.bool(true)
}

// IsItemHoveredV parameter default value hint:
// flags: 0
func IsItemHoveredV(flags HoveredFlags) bool {
	return C.IsItemHoveredV(C.ImGuiHoveredFlags(flags)) == C.bool(true)
}

func IsItemToggledOpen() bool {
	return C.IsItemToggledOpen() == C.bool(true)
}

func IsItemVisible() bool {
	return C.IsItemVisible() == C.bool(true)
}

func IsKeyDown(key Key) bool {
	return C.IsKeyDown(C.ImGuiKey(key)) == C.bool(true)
}

// IsKeyPressedV parameter default value hint:
// repeat: true
func IsKeyPressedV(key Key, repeat bool) bool {
	return C.IsKeyPressedV(C.ImGuiKey(key), C.bool(repeat)) == C.bool(true)
}

func IsKeyReleased(key Key) bool {
	return C.IsKeyReleased(C.ImGuiKey(key)) == C.bool(true)
}

// IsMouseClickedV parameter default value hint:
// repeat: false
func IsMouseClickedV(button MouseButton, repeat bool) bool {
	return C.IsMouseClickedV(C.ImGuiMouseButton(button), C.bool(repeat)) == C.bool(true)
}

func IsMouseDoubleClicked(button MouseButton) bool {
	return C.IsMouseDoubleClicked(C.ImGuiMouseButton(button)) == C.bool(true)
}

func IsMouseDown(button MouseButton) bool {
	return C.IsMouseDown(C.ImGuiMouseButton(button)) == C.bool(true)
}

// IsMouseDraggingV parameter default value hint:
// lock_threshold: -1.0f
func IsMouseDraggingV(button MouseButton, lock_threshold float32) bool {
	return C.IsMouseDraggingV(C.ImGuiMouseButton(button), C.float(lock_threshold)) == C.bool(true)
}

// IsMouseHoveringRectV parameter default value hint:
// clip: true
func IsMouseHoveringRectV(r_min Vec2, r_max Vec2, clip bool) bool {
	return C.IsMouseHoveringRectV(r_min.toC(), r_max.toC(), C.bool(clip)) == C.bool(true)
}

// IsMousePosValidV parameter default value hint:
// mouse_pos: NULL
func IsMousePosValidV(mouse_pos *Vec2) bool {
	mouse_posArg, mouse_posFin := wrap[C.ImVec2, *Vec2](mouse_pos)
	defer mouse_posFin()

	return C.IsMousePosValidV(mouse_posArg) == C.bool(true)
}

func IsMouseReleased(button MouseButton) bool {
	return C.IsMouseReleased(C.ImGuiMouseButton(button)) == C.bool(true)
}

// IsPopupOpen_StrV parameter default value hint:
// flags: 0
func IsPopupOpen_StrV(str_id string, flags PopupFlags) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.IsPopupOpen_StrV(str_idArg, C.ImGuiPopupFlags(flags)) == C.bool(true)
}

func IsRectVisible_Nil(size Vec2) bool {
	return C.IsRectVisible_Nil(size.toC()) == C.bool(true)
}

func IsRectVisible_Vec2(rect_min Vec2, rect_max Vec2) bool {
	return C.IsRectVisible_Vec2(rect_min.toC(), rect_max.toC()) == C.bool(true)
}

func IsWindowAppearing() bool {
	return C.IsWindowAppearing() == C.bool(true)
}

func IsWindowCollapsed() bool {
	return C.IsWindowCollapsed() == C.bool(true)
}

func IsWindowDocked() bool {
	return C.IsWindowDocked() == C.bool(true)
}

// IsWindowFocusedV parameter default value hint:
// flags: 0
func IsWindowFocusedV(flags FocusedFlags) bool {
	return C.IsWindowFocusedV(C.ImGuiFocusedFlags(flags)) == C.bool(true)
}

// IsWindowHoveredV parameter default value hint:
// flags: 0
func IsWindowHoveredV(flags HoveredFlags) bool {
	return C.IsWindowHoveredV(C.ImGuiHoveredFlags(flags)) == C.bool(true)
}

func LabelText(label string, fmt string) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.LabelText(labelArg, fmtArg)
}

// ListBox_Str_arrV parameter default value hint:
// height_in_items: -1
func ListBox_Str_arrV(label string, current_item *int32, items []string, items_count int32, height_in_items int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	itemsArg, itemsFin := wrapStringList(items)
	defer itemsFin()

	return C.ListBox_Str_arrV(labelArg, current_itemArg, itemsArg, C.int(items_count), C.int(height_in_items)) == C.bool(true)
}

func LoadIniSettingsFromDisk(ini_filename string) {
	ini_filenameArg, ini_filenameFin := wrapString(ini_filename)
	defer ini_filenameFin()

	C.LoadIniSettingsFromDisk(ini_filenameArg)
}

// LoadIniSettingsFromMemoryV parameter default value hint:
// ini_size: 0
func LoadIniSettingsFromMemoryV(ini_data string, ini_size uint64) {
	ini_dataArg, ini_dataFin := wrapString(ini_data)
	defer ini_dataFin()

	C.LoadIniSettingsFromMemoryV(ini_dataArg, C.xlong(ini_size))
}

func LogButtons() {
	C.LogButtons()
}

func LogFinish() {
	C.LogFinish()
}

func LogText(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.LogText(fmtArg)
}

// LogToClipboardV parameter default value hint:
// auto_open_depth: -1
func LogToClipboardV(auto_open_depth int32) {
	C.LogToClipboardV(C.int(auto_open_depth))
}

// LogToFileV parameter default value hint:
// auto_open_depth: -1
// filename: NULL
func LogToFileV(auto_open_depth int32, filename string) {
	filenameArg, filenameFin := wrapString(filename)
	defer filenameFin()

	C.LogToFileV(C.int(auto_open_depth), filenameArg)
}

// LogToTTYV parameter default value hint:
// auto_open_depth: -1
func LogToTTYV(auto_open_depth int32) {
	C.LogToTTYV(C.int(auto_open_depth))
}

func MemAlloc(size uint64) unsafe.Pointer {
	return unsafe.Pointer(C.MemAlloc(C.xlong(size)))
}

func MemFree(ptr unsafe.Pointer) {
	C.MemFree(ptr)
}

// MenuItem_BoolV parameter default value hint:
// enabled: true
// selected: false
// shortcut: NULL
func MenuItem_BoolV(label string, shortcut string, selected bool, enabled bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	shortcutArg, shortcutFin := wrapString(shortcut)
	defer shortcutFin()

	return C.MenuItem_BoolV(labelArg, shortcutArg, C.bool(selected), C.bool(enabled)) == C.bool(true)
}

// MenuItem_BoolPtrV parameter default value hint:
// enabled: true
func MenuItem_BoolPtrV(label string, shortcut string, p_selected *bool, enabled bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	shortcutArg, shortcutFin := wrapString(shortcut)
	defer shortcutFin()

	p_selectedArg, p_selectedFin := wrapBool(p_selected)
	defer p_selectedFin()

	return C.MenuItem_BoolPtrV(labelArg, shortcutArg, p_selectedArg, C.bool(enabled)) == C.bool(true)
}

func NewFrame() {
	C.NewFrame()
}

func NewLine() {
	C.NewLine()
}

func NextColumn() {
	C.NextColumn()
}

// OpenPopupOnItemClickV parameter default value hint:
// popup_flags: 1
// str_id: NULL
func OpenPopupOnItemClickV(str_id string, popup_flags PopupFlags) {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	C.OpenPopupOnItemClickV(str_idArg, C.ImGuiPopupFlags(popup_flags))
}

// OpenPopup_IDV parameter default value hint:
// popup_flags: 0
func OpenPopup_IDV(id ImGuiID, popup_flags PopupFlags) {
	C.OpenPopup_IDV(C.ImGuiID(id), C.ImGuiPopupFlags(popup_flags))
}

// OpenPopup_StrV parameter default value hint:
// popup_flags: 0
func OpenPopup_StrV(str_id string, popup_flags PopupFlags) {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	C.OpenPopup_StrV(str_idArg, C.ImGuiPopupFlags(popup_flags))
}

// PlotHistogram_FloatPtrV parameter default value hint:
// graph_size: ImVec2(0,0)
// overlay_text: NULL
// scale_max: FLT_MAX
// scale_min: FLT_MAX
// stride: sizeof(float)
// values_offset: 0
func PlotHistogram_FloatPtrV(label string, values []float32, values_count int32, values_offset int32, overlay_text string, scale_min float32, scale_max float32, graph_size Vec2, stride int32) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	overlay_textArg, overlay_textFin := wrapString(overlay_text)
	defer overlay_textFin()

	C.PlotHistogram_FloatPtrV(labelArg, (*C.float)(&(values[0])), C.int(values_count), C.int(values_offset), overlay_textArg, C.float(scale_min), C.float(scale_max), graph_size.toC(), C.int(stride))
}

// PlotLines_FloatPtrV parameter default value hint:
// graph_size: ImVec2(0,0)
// overlay_text: NULL
// scale_max: FLT_MAX
// scale_min: FLT_MAX
// stride: sizeof(float)
// values_offset: 0
func PlotLines_FloatPtrV(label string, values []float32, values_count int32, values_offset int32, overlay_text string, scale_min float32, scale_max float32, graph_size Vec2, stride int32) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	overlay_textArg, overlay_textFin := wrapString(overlay_text)
	defer overlay_textFin()

	C.PlotLines_FloatPtrV(labelArg, (*C.float)(&(values[0])), C.int(values_count), C.int(values_offset), overlay_textArg, C.float(scale_min), C.float(scale_max), graph_size.toC(), C.int(stride))
}

func PopAllowKeyboardFocus() {
	C.PopAllowKeyboardFocus()
}

func PopButtonRepeat() {
	C.PopButtonRepeat()
}

func PopClipRect() {
	C.PopClipRect()
}

func PopFont() {
	C.PopFont()
}

func PopID() {
	C.PopID()
}

func PopItemWidth() {
	C.PopItemWidth()
}

// PopStyleColorV parameter default value hint:
// count: 1
func PopStyleColorV(count int32) {
	C.PopStyleColorV(C.int(count))
}

// PopStyleVarV parameter default value hint:
// count: 1
func PopStyleVarV(count int32) {
	C.PopStyleVarV(C.int(count))
}

func PopTextWrapPos() {
	C.PopTextWrapPos()
}

// ProgressBarV parameter default value hint:
// overlay: NULL
// size_arg: ImVec2(-FLT_MIN,0)
func ProgressBarV(fraction float32, size_arg Vec2, overlay string) {
	overlayArg, overlayFin := wrapString(overlay)
	defer overlayFin()

	C.ProgressBarV(C.float(fraction), size_arg.toC(), overlayArg)
}

func PushAllowKeyboardFocus(allow_keyboard_focus bool) {
	C.PushAllowKeyboardFocus(C.bool(allow_keyboard_focus))
}

func PushButtonRepeat(repeat bool) {
	C.PushButtonRepeat(C.bool(repeat))
}

func PushClipRect(clip_rect_min Vec2, clip_rect_max Vec2, intersect_with_current_clip_rect bool) {
	C.PushClipRect(clip_rect_min.toC(), clip_rect_max.toC(), C.bool(intersect_with_current_clip_rect))
}

func PushFont(font Font) {
	C.PushFont(font.handle())
}

func PushID_Int(int_id int32) {
	C.PushID_Int(C.int(int_id))
}

func PushID_Ptr(ptr_id unsafe.Pointer) {
	C.PushID_Ptr(ptr_id)
}

func PushID_Str(str_id string) {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	C.PushID_Str(str_idArg)
}

func PushID_StrStr(str_id_begin string, str_id_end string) {
	str_id_beginArg, str_id_beginFin := wrapString(str_id_begin)
	defer str_id_beginFin()

	str_id_endArg, str_id_endFin := wrapString(str_id_end)
	defer str_id_endFin()

	C.PushID_StrStr(str_id_beginArg, str_id_endArg)
}

func PushItemWidth(item_width float32) {
	C.PushItemWidth(C.float(item_width))
}

func PushStyleColor_U32(idx Col, col uint32) {
	C.PushStyleColor_U32(C.ImGuiCol(idx), C.ImU32(col))
}

func PushStyleColor_Vec4(idx Col, col Vec4) {
	C.PushStyleColor_Vec4(C.ImGuiCol(idx), col.toC())
}

func PushStyleVar_Float(idx StyleVar, val float32) {
	C.PushStyleVar_Float(C.ImGuiStyleVar(idx), C.float(val))
}

func PushStyleVar_Vec2(idx StyleVar, val Vec2) {
	C.PushStyleVar_Vec2(C.ImGuiStyleVar(idx), val.toC())
}

// PushTextWrapPosV parameter default value hint:
// wrap_local_pos_x: 0.0f
func PushTextWrapPosV(wrap_local_pos_x float32) {
	C.PushTextWrapPosV(C.float(wrap_local_pos_x))
}

func RadioButton_Bool(label string, active bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.RadioButton_Bool(labelArg, C.bool(active)) == C.bool(true)
}

func RadioButton_IntPtr(label string, v *int32, v_button int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.RadioButton_IntPtr(labelArg, vArg, C.int(v_button)) == C.bool(true)
}

func Render() {
	C.Render()
}

// RenderPlatformWindowsDefaultV parameter default value hint:
// platform_render_arg: NULL
// renderer_render_arg: NULL
func RenderPlatformWindowsDefaultV(platform_render_arg unsafe.Pointer, renderer_render_arg unsafe.Pointer) {
	C.RenderPlatformWindowsDefaultV(platform_render_arg, renderer_render_arg)
}

// ResetMouseDragDeltaV parameter default value hint:
// button: 0
func ResetMouseDragDeltaV(button MouseButton) {
	C.ResetMouseDragDeltaV(C.ImGuiMouseButton(button))
}

// SameLineV parameter default value hint:
// offset_from_start_x: 0.0f
// spacing: -1.0f
func SameLineV(offset_from_start_x float32, spacing float32) {
	C.SameLineV(C.float(offset_from_start_x), C.float(spacing))
}

func SaveIniSettingsToDisk(ini_filename string) {
	ini_filenameArg, ini_filenameFin := wrapString(ini_filename)
	defer ini_filenameFin()

	C.SaveIniSettingsToDisk(ini_filenameArg)
}

// SaveIniSettingsToMemoryV parameter default value hint:
// out_ini_size: NULL
func SaveIniSettingsToMemoryV(out_ini_size *uint64) string {
	return C.GoString(C.SaveIniSettingsToMemoryV((*C.xlong)(out_ini_size)))
}

// Selectable_BoolV parameter default value hint:
// flags: 0
// selected: false
// size: ImVec2(0,0)
func Selectable_BoolV(label string, selected bool, flags SelectableFlags, size Vec2) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.Selectable_BoolV(labelArg, C.bool(selected), C.ImGuiSelectableFlags(flags), size.toC()) == C.bool(true)
}

// Selectable_BoolPtrV parameter default value hint:
// flags: 0
// size: ImVec2(0,0)
func Selectable_BoolPtrV(label string, p_selected *bool, flags SelectableFlags, size Vec2) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	p_selectedArg, p_selectedFin := wrapBool(p_selected)
	defer p_selectedFin()

	return C.Selectable_BoolPtrV(labelArg, p_selectedArg, C.ImGuiSelectableFlags(flags), size.toC()) == C.bool(true)
}

func Separator() {
	C.Separator()
}

func SetClipboardText(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.SetClipboardText(textArg)
}

func SetColorEditOptions(flags ColorEditFlags) {
	C.SetColorEditOptions(C.ImGuiColorEditFlags(flags))
}

func SetColumnOffset(column_index int32, offset_x float32) {
	C.SetColumnOffset(C.int(column_index), C.float(offset_x))
}

func SetColumnWidth(column_index int32, width float32) {
	C.SetColumnWidth(C.int(column_index), C.float(width))
}

func SetCurrentContext(ctx Context) {
	C.SetCurrentContext(ctx.handle())
}

func SetCursorPos(local_pos Vec2) {
	C.SetCursorPos(local_pos.toC())
}

func SetCursorPosX(local_x float32) {
	C.SetCursorPosX(C.float(local_x))
}

func SetCursorPosY(local_y float32) {
	C.SetCursorPosY(C.float(local_y))
}

func SetCursorScreenPos(pos Vec2) {
	C.SetCursorScreenPos(pos.toC())
}

// SetDragDropPayloadV parameter default value hint:
// cond: 0
func SetDragDropPayloadV(typeArg string, data unsafe.Pointer, sz uint64, cond Cond) bool {
	typeArgArg, typeArgFin := wrapString(typeArg)
	defer typeArgFin()

	return C.SetDragDropPayloadV(typeArgArg, data, C.xlong(sz), C.ImGuiCond(cond)) == C.bool(true)
}

func SetItemAllowOverlap() {
	C.SetItemAllowOverlap()
}

func SetItemDefaultFocus() {
	C.SetItemDefaultFocus()
}

// SetKeyboardFocusHereV parameter default value hint:
// offset: 0
func SetKeyboardFocusHereV(offset int32) {
	C.SetKeyboardFocusHereV(C.int(offset))
}

func SetMouseCursor(cursor_type MouseCursor) {
	C.SetMouseCursor(C.ImGuiMouseCursor(cursor_type))
}

func SetNextFrameWantCaptureKeyboard(want_capture_keyboard bool) {
	C.SetNextFrameWantCaptureKeyboard(C.bool(want_capture_keyboard))
}

func SetNextFrameWantCaptureMouse(want_capture_mouse bool) {
	C.SetNextFrameWantCaptureMouse(C.bool(want_capture_mouse))
}

// SetNextItemOpenV parameter default value hint:
// cond: 0
func SetNextItemOpenV(is_open bool, cond Cond) {
	C.SetNextItemOpenV(C.bool(is_open), C.ImGuiCond(cond))
}

func SetNextItemWidth(item_width float32) {
	C.SetNextItemWidth(C.float(item_width))
}

func SetNextWindowBgAlpha(alpha float32) {
	C.SetNextWindowBgAlpha(C.float(alpha))
}

func SetNextWindowClass(window_class WindowClass) {
	C.SetNextWindowClass(window_class.handle())
}

// SetNextWindowCollapsedV parameter default value hint:
// cond: 0
func SetNextWindowCollapsedV(collapsed bool, cond Cond) {
	C.SetNextWindowCollapsedV(C.bool(collapsed), C.ImGuiCond(cond))
}

func SetNextWindowContentSize(size Vec2) {
	C.SetNextWindowContentSize(size.toC())
}

// SetNextWindowDockIDV parameter default value hint:
// cond: 0
func SetNextWindowDockIDV(dock_id ImGuiID, cond Cond) {
	C.SetNextWindowDockIDV(C.ImGuiID(dock_id), C.ImGuiCond(cond))
}

func SetNextWindowFocus() {
	C.SetNextWindowFocus()
}

// SetNextWindowPosV parameter default value hint:
// cond: 0
// pivot: ImVec2(0,0)
func SetNextWindowPosV(pos Vec2, cond Cond, pivot Vec2) {
	C.SetNextWindowPosV(pos.toC(), C.ImGuiCond(cond), pivot.toC())
}

// SetNextWindowSizeV parameter default value hint:
// cond: 0
func SetNextWindowSizeV(size Vec2, cond Cond) {
	C.SetNextWindowSizeV(size.toC(), C.ImGuiCond(cond))
}

func SetNextWindowViewport(viewport_id ImGuiID) {
	C.SetNextWindowViewport(C.ImGuiID(viewport_id))
}

// SetScrollFromPosX_FloatV parameter default value hint:
// center_x_ratio: 0.5f
func SetScrollFromPosX_FloatV(local_x float32, center_x_ratio float32) {
	C.SetScrollFromPosX_FloatV(C.float(local_x), C.float(center_x_ratio))
}

// SetScrollFromPosY_FloatV parameter default value hint:
// center_y_ratio: 0.5f
func SetScrollFromPosY_FloatV(local_y float32, center_y_ratio float32) {
	C.SetScrollFromPosY_FloatV(C.float(local_y), C.float(center_y_ratio))
}

// SetScrollHereXV parameter default value hint:
// center_x_ratio: 0.5f
func SetScrollHereXV(center_x_ratio float32) {
	C.SetScrollHereXV(C.float(center_x_ratio))
}

// SetScrollHereYV parameter default value hint:
// center_y_ratio: 0.5f
func SetScrollHereYV(center_y_ratio float32) {
	C.SetScrollHereYV(C.float(center_y_ratio))
}

func SetScrollX_Float(scroll_x float32) {
	C.SetScrollX_Float(C.float(scroll_x))
}

func SetScrollY_Float(scroll_y float32) {
	C.SetScrollY_Float(C.float(scroll_y))
}

func SetTabItemClosed(tab_or_docked_window_label string) {
	tab_or_docked_window_labelArg, tab_or_docked_window_labelFin := wrapString(tab_or_docked_window_label)
	defer tab_or_docked_window_labelFin()

	C.SetTabItemClosed(tab_or_docked_window_labelArg)
}

func SetTooltip(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.SetTooltip(fmtArg)
}

// SetWindowCollapsed_BoolV parameter default value hint:
// cond: 0
func SetWindowCollapsed_BoolV(collapsed bool, cond Cond) {
	C.SetWindowCollapsed_BoolV(C.bool(collapsed), C.ImGuiCond(cond))
}

// SetWindowCollapsed_StrV parameter default value hint:
// cond: 0
func SetWindowCollapsed_StrV(name string, collapsed bool, cond Cond) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowCollapsed_StrV(nameArg, C.bool(collapsed), C.ImGuiCond(cond))
}

func SetWindowFocus_Nil() {
	C.SetWindowFocus_Nil()
}

func SetWindowFocus_Str(name string) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowFocus_Str(nameArg)
}

func SetWindowFontScale(scale float32) {
	C.SetWindowFontScale(C.float(scale))
}

// SetWindowPos_StrV parameter default value hint:
// cond: 0
func SetWindowPos_StrV(name string, pos Vec2, cond Cond) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowPos_StrV(nameArg, pos.toC(), C.ImGuiCond(cond))
}

// SetWindowPos_Vec2V parameter default value hint:
// cond: 0
func SetWindowPos_Vec2V(pos Vec2, cond Cond) {
	C.SetWindowPos_Vec2V(pos.toC(), C.ImGuiCond(cond))
}

// SetWindowSize_StrV parameter default value hint:
// cond: 0
func SetWindowSize_StrV(name string, size Vec2, cond Cond) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowSize_StrV(nameArg, size.toC(), C.ImGuiCond(cond))
}

// SetWindowSize_Vec2V parameter default value hint:
// cond: 0
func SetWindowSize_Vec2V(size Vec2, cond Cond) {
	C.SetWindowSize_Vec2V(size.toC(), C.ImGuiCond(cond))
}

// ShowAboutWindowV parameter default value hint:
// p_open: NULL
func ShowAboutWindowV(p_open *bool) {
	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	C.ShowAboutWindowV(p_openArg)
}

// ShowDebugLogWindowV parameter default value hint:
// p_open: NULL
func ShowDebugLogWindowV(p_open *bool) {
	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	C.ShowDebugLogWindowV(p_openArg)
}

// ShowDemoWindowV parameter default value hint:
// p_open: NULL
func ShowDemoWindowV(p_open *bool) {
	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	C.ShowDemoWindowV(p_openArg)
}

func ShowFontSelector(label string) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.ShowFontSelector(labelArg)
}

// ShowMetricsWindowV parameter default value hint:
// p_open: NULL
func ShowMetricsWindowV(p_open *bool) {
	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	C.ShowMetricsWindowV(p_openArg)
}

// ShowStackToolWindowV parameter default value hint:
// p_open: NULL
func ShowStackToolWindowV(p_open *bool) {
	p_openArg, p_openFin := wrapBool(p_open)
	defer p_openFin()

	C.ShowStackToolWindowV(p_openArg)
}

// ShowStyleEditorV parameter default value hint:
// ref: NULL
func ShowStyleEditorV(ref Style) {
	C.ShowStyleEditorV(ref.handle())
}

func ShowStyleSelector(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.ShowStyleSelector(labelArg) == C.bool(true)
}

func ShowUserGuide() {
	C.ShowUserGuide()
}

// SliderAngleV parameter default value hint:
// flags: 0
// format: "%.0f deg"
// v_degrees_max: +360.0f
// v_degrees_min: -360.0f
func SliderAngleV(label string, v_rad *float32, v_degrees_min float32, v_degrees_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_radArg, v_radFin := wrapNumberPtr[C.float, float32](v_rad)
	defer v_radFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderAngleV(labelArg, v_radArg, C.float(v_degrees_min), C.float(v_degrees_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderFloatV parameter default value hint:
// flags: 0
// format: "%.3f"
func SliderFloatV(label string, v *float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderFloatV(labelArg, vArg, C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderFloat2V parameter default value hint:
// flags: 0
// format: "%.3f"
func SliderFloat2V(label string, v [2]*float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderFloat2V(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderFloat3V parameter default value hint:
// flags: 0
// format: "%.3f"
func SliderFloat3V(label string, v [3]*float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderFloat3V(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderFloat4V parameter default value hint:
// flags: 0
// format: "%.3f"
func SliderFloat4V(label string, v [4]*float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderFloat4V(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderIntV parameter default value hint:
// flags: 0
// format: "%d"
func SliderIntV(label string, v *int32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderIntV(labelArg, vArg, C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderInt2V parameter default value hint:
// flags: 0
// format: "%d"
func SliderInt2V(label string, v [2]*int32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderInt2V(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderInt3V parameter default value hint:
// flags: 0
// format: "%d"
func SliderInt3V(label string, v [3]*int32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderInt3V(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderInt4V parameter default value hint:
// flags: 0
// format: "%d"
func SliderInt4V(label string, v [4]*int32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderInt4V(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderScalarV parameter default value hint:
// flags: 0
// format: NULL
func SliderScalarV(label string, data_type DataType, p_data unsafe.Pointer, p_min unsafe.Pointer, p_max unsafe.Pointer, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderScalarV(labelArg, C.ImGuiDataType(data_type), p_data, p_min, p_max, formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// SliderScalarNV parameter default value hint:
// flags: 0
// format: NULL
func SliderScalarNV(label string, data_type DataType, p_data unsafe.Pointer, components int32, p_min unsafe.Pointer, p_max unsafe.Pointer, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.SliderScalarNV(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components), p_min, p_max, formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

func SmallButton(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.SmallButton(labelArg) == C.bool(true)
}

func Spacing() {
	C.Spacing()
}

// StyleColorsClassicV parameter default value hint:
// dst: NULL
func StyleColorsClassicV(dst Style) {
	C.StyleColorsClassicV(dst.handle())
}

// StyleColorsDarkV parameter default value hint:
// dst: NULL
func StyleColorsDarkV(dst Style) {
	C.StyleColorsDarkV(dst.handle())
}

// StyleColorsLightV parameter default value hint:
// dst: NULL
func StyleColorsLightV(dst Style) {
	C.StyleColorsLightV(dst.handle())
}

// TabItemButtonV parameter default value hint:
// flags: 0
func TabItemButtonV(label string, flags TabItemFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TabItemButtonV(labelArg, C.ImGuiTabItemFlags(flags)) == C.bool(true)
}

func TableGetColumnCount() int {
	return int(C.TableGetColumnCount())
}

// TableGetColumnFlagsV parameter default value hint:
// column_n: -1
func TableGetColumnFlagsV(column_n int32) TableColumnFlags {
	return TableColumnFlags(C.TableGetColumnFlagsV(C.int(column_n)))
}

func TableGetColumnIndex() int {
	return int(C.TableGetColumnIndex())
}

// TableGetColumnName_IntV parameter default value hint:
// column_n: -1
func TableGetColumnName_IntV(column_n int32) string {
	return C.GoString(C.TableGetColumnName_IntV(C.int(column_n)))
}

func TableGetRowIndex() int {
	return int(C.TableGetRowIndex())
}

func TableGetSortSpecs() TableSortSpecs {
	return (TableSortSpecs)(unsafe.Pointer(C.TableGetSortSpecs()))
}

func TableHeader(label string) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.TableHeader(labelArg)
}

func TableHeadersRow() {
	C.TableHeadersRow()
}

func TableNextColumn() bool {
	return C.TableNextColumn() == C.bool(true)
}

// TableNextRowV parameter default value hint:
// min_row_height: 0.0f
// row_flags: 0
func TableNextRowV(row_flags TableRowFlags, min_row_height float32) {
	C.TableNextRowV(C.ImGuiTableRowFlags(row_flags), C.float(min_row_height))
}

// TableSetBgColorV parameter default value hint:
// column_n: -1
func TableSetBgColorV(target TableBgTarget, color uint32, column_n int32) {
	C.TableSetBgColorV(C.ImGuiTableBgTarget(target), C.ImU32(color), C.int(column_n))
}

func TableSetColumnEnabled(column_n int32, v bool) {
	C.TableSetColumnEnabled(C.int(column_n), C.bool(v))
}

func TableSetColumnIndex(column_n int32) bool {
	return C.TableSetColumnIndex(C.int(column_n)) == C.bool(true)
}

// TableSetupColumnV parameter default value hint:
// flags: 0
// init_width_or_weight: 0.0f
// user_id: 0
func TableSetupColumnV(label string, flags TableColumnFlags, init_width_or_weight float32, user_id ImGuiID) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.TableSetupColumnV(labelArg, C.ImGuiTableColumnFlags(flags), C.float(init_width_or_weight), C.ImGuiID(user_id))
}

func TableSetupScrollFreeze(cols int32, rows int32) {
	C.TableSetupScrollFreeze(C.int(cols), C.int(rows))
}

func Text(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.Text(fmtArg)
}

func TextColored(col Vec4, fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.TextColored(col.toC(), fmtArg)
}

func TextDisabled(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.TextDisabled(fmtArg)
}

// TextUnformattedV parameter default value hint:
// text_end: NULL
func TextUnformattedV(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.TextUnformattedV(textArg)
}

func TextWrapped(fmt string) {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	C.TextWrapped(fmtArg)
}

func TreeNodeEx_Ptr(ptr_id unsafe.Pointer, flags TreeNodeFlags, fmt string) bool {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	return C.TreeNodeEx_Ptr(ptr_id, C.ImGuiTreeNodeFlags(flags), fmtArg) == C.bool(true)
}

// TreeNodeEx_StrV parameter default value hint:
// flags: 0
func TreeNodeEx_StrV(label string, flags TreeNodeFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TreeNodeEx_StrV(labelArg, C.ImGuiTreeNodeFlags(flags)) == C.bool(true)
}

func TreeNodeEx_StrStr(str_id string, flags TreeNodeFlags, fmt string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	return C.TreeNodeEx_StrStr(str_idArg, C.ImGuiTreeNodeFlags(flags), fmtArg) == C.bool(true)
}

func TreeNode_Ptr(ptr_id unsafe.Pointer, fmt string) bool {
	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	return C.TreeNode_Ptr(ptr_id, fmtArg) == C.bool(true)
}

func TreeNode_Str(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TreeNode_Str(labelArg) == C.bool(true)
}

func TreeNode_StrStr(str_id string, fmt string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	fmtArg, fmtFin := wrapString(fmt)
	defer fmtFin()

	return C.TreeNode_StrStr(str_idArg, fmtArg) == C.bool(true)
}

func TreePop() {
	C.TreePop()
}

// TreePush_PtrV parameter default value hint:
// ptr_id: NULL
func TreePush_PtrV(ptr_id unsafe.Pointer) {
	C.TreePush_PtrV(ptr_id)
}

func TreePush_Str(str_id string) {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	C.TreePush_Str(str_idArg)
}

// UnindentV parameter default value hint:
// indent_w: 0.0f
func UnindentV(indent_w float32) {
	C.UnindentV(C.float(indent_w))
}

func UpdatePlatformWindows() {
	C.UpdatePlatformWindows()
}

// VSliderFloatV parameter default value hint:
// flags: 0
// format: "%.3f"
func VSliderFloatV(label string, size Vec2, v *float32, v_min float32, v_max float32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.VSliderFloatV(labelArg, size.toC(), vArg, C.float(v_min), C.float(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// VSliderIntV parameter default value hint:
// flags: 0
// format: "%d"
func VSliderIntV(label string, size Vec2, v *int32, v_min int32, v_max int32, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.VSliderIntV(labelArg, size.toC(), vArg, C.int(v_min), C.int(v_max), formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

// VSliderScalarV parameter default value hint:
// flags: 0
// format: NULL
func VSliderScalarV(label string, size Vec2, data_type DataType, p_data unsafe.Pointer, p_min unsafe.Pointer, p_max unsafe.Pointer, format string, flags SliderFlags) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	formatArg, formatFin := wrapString(format)
	defer formatFin()

	return C.VSliderScalarV(labelArg, size.toC(), C.ImGuiDataType(data_type), p_data, p_min, p_max, formatArg, C.ImGuiSliderFlags(flags)) == C.bool(true)
}

func Value_Bool(prefix string, b bool) {
	prefixArg, prefixFin := wrapString(prefix)
	defer prefixFin()

	C.Value_Bool(prefixArg, C.bool(b))
}

// Value_FloatV parameter default value hint:
// float_format: NULL
func Value_FloatV(prefix string, v float32, float_format string) {
	prefixArg, prefixFin := wrapString(prefix)
	defer prefixFin()

	float_formatArg, float_formatFin := wrapString(float_format)
	defer float_formatFin()

	C.Value_FloatV(prefixArg, C.float(v), float_formatArg)
}

func Value_Int(prefix string, v int32) {
	prefixArg, prefixFin := wrapString(prefix)
	defer prefixFin()

	C.Value_Int(prefixArg, C.int(v))
}

func Value_Uint(prefix string, v uint32) {
	prefixArg, prefixFin := wrapString(prefix)
	defer prefixFin()

	C.Value_Uint(prefixArg, C.uint(v))
}

func Color_HSV(h float32, s float32, v float32) Color {
	pOut := &Color{}
	pOutArg, pOutFin := wrap[C.ImColor, *Color](pOut)
	defer pOutFin()

	C.Color_HSV(pOutArg, C.float(h), C.float(s), C.float(v))
	return *pOut
}

func (self *Color) SetHSV(h float32, s float32, v float32) {
	selfArg, selfFin := wrap[C.ImColor, *Color](self)
	defer selfFin()

	C.Color_SetHSV(selfArg, C.float(h), C.float(s), C.float(v))
}

func (self DrawList) AddBezierCubic(p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, col uint32, thickness float32) {
	C.DrawList_AddBezierCubic(self.handle(), p1.toC(), p2.toC(), p3.toC(), p4.toC(), C.ImU32(col), C.float(thickness))
}

func (self DrawList) AddBezierQuadratic(p1 Vec2, p2 Vec2, p3 Vec2, col uint32, thickness float32) {
	C.DrawList_AddBezierQuadratic(self.handle(), p1.toC(), p2.toC(), p3.toC(), C.ImU32(col), C.float(thickness))
}

func (self DrawList) AddCircle(center Vec2, radius float32, col uint32) {
	C.DrawList_AddCircle(self.handle(), center.toC(), C.float(radius), C.ImU32(col))
}

func (self DrawList) AddCircleFilled(center Vec2, radius float32, col uint32) {
	C.DrawList_AddCircleFilled(self.handle(), center.toC(), C.float(radius), C.ImU32(col))
}

func (self DrawList) AddImage(user_texture_id TextureID, p_min Vec2, p_max Vec2) {
	C.DrawList_AddImage(self.handle(), C.ImTextureID(user_texture_id), p_min.toC(), p_max.toC())
}

func (self DrawList) AddImageQuad(user_texture_id TextureID, p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2) {
	C.DrawList_AddImageQuad(self.handle(), C.ImTextureID(user_texture_id), p1.toC(), p2.toC(), p3.toC(), p4.toC())
}

func (self DrawList) AddImageRounded(user_texture_id TextureID, p_min Vec2, p_max Vec2, uv_min Vec2, uv_max Vec2, col uint32, rounding float32) {
	C.DrawList_AddImageRounded(self.handle(), C.ImTextureID(user_texture_id), p_min.toC(), p_max.toC(), uv_min.toC(), uv_max.toC(), C.ImU32(col), C.float(rounding))
}

func (self DrawList) AddLine(p1 Vec2, p2 Vec2, col uint32) {
	C.DrawList_AddLine(self.handle(), p1.toC(), p2.toC(), C.ImU32(col))
}

func (self DrawList) AddNgon(center Vec2, radius float32, col uint32, num_segments int32) {
	C.DrawList_AddNgon(self.handle(), center.toC(), C.float(radius), C.ImU32(col), C.int(num_segments))
}

func (self DrawList) AddQuad(p1 Vec2, p2 Vec2, p3 Vec2, p4 Vec2, col uint32) {
	C.DrawList_AddQuad(self.handle(), p1.toC(), p2.toC(), p3.toC(), p4.toC(), C.ImU32(col))
}

func (self DrawList) AddRect(p_min Vec2, p_max Vec2, col uint32) {
	C.DrawList_AddRect(self.handle(), p_min.toC(), p_max.toC(), C.ImU32(col))
}

func (self DrawList) AddRectFilled(p_min Vec2, p_max Vec2, col uint32) {
	C.DrawList_AddRectFilled(self.handle(), p_min.toC(), p_max.toC(), C.ImU32(col))
}

func (self DrawList) AddText_FontPtr(font Font, font_size float32, pos Vec2, col uint32, text_begin string) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.DrawList_AddText_FontPtr(self.handle(), font.handle(), C.float(font_size), pos.toC(), C.ImU32(col), text_beginArg)
}

func (self DrawList) AddText_Vec2(pos Vec2, col uint32, text_begin string) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.DrawList_AddText_Vec2(self.handle(), pos.toC(), C.ImU32(col), text_beginArg)
}

func (self DrawList) AddTriangle(p1 Vec2, p2 Vec2, p3 Vec2, col uint32) {
	C.DrawList_AddTriangle(self.handle(), p1.toC(), p2.toC(), p3.toC(), C.ImU32(col))
}

func (self DrawList) PathArcTo(center Vec2, radius float32, a_min float32, a_max float32) {
	C.DrawList_PathArcTo(self.handle(), center.toC(), C.float(radius), C.float(a_min), C.float(a_max))
}

func (self DrawList) PathBezierCubicCurveTo(p2 Vec2, p3 Vec2, p4 Vec2) {
	C.DrawList_PathBezierCubicCurveTo(self.handle(), p2.toC(), p3.toC(), p4.toC())
}

func (self DrawList) PathBezierQuadraticCurveTo(p2 Vec2, p3 Vec2) {
	C.DrawList_PathBezierQuadraticCurveTo(self.handle(), p2.toC(), p3.toC())
}

func (self DrawList) PathRect(rect_min Vec2, rect_max Vec2) {
	C.DrawList_PathRect(self.handle(), rect_min.toC(), rect_max.toC())
}

func (self DrawList) PathStroke(col uint32) {
	C.DrawList_PathStroke(self.handle(), C.ImU32(col))
}

func (self DrawList) PushClipRect(clip_rect_min Vec2, clip_rect_max Vec2) {
	C.DrawList_PushClipRect(self.handle(), clip_rect_min.toC(), clip_rect_max.toC())
}

func (self FontAtlas) AddCustomRectFontGlyph(font Font, id Wchar, width int32, height int32, advance_x float32) int {
	return int(C.FontAtlas_AddCustomRectFontGlyph(self.handle(), font.handle(), C.ImWchar(id), C.int(width), C.int(height), C.float(advance_x)))
}

func (self FontAtlas) AddFontDefault() Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontDefault(self.handle())))
}

func (self FontAtlas) AddFontFromFileTTF(filename string, size_pixels float32) Font {
	filenameArg, filenameFin := wrapString(filename)
	defer filenameFin()

	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromFileTTF(self.handle(), filenameArg, C.float(size_pixels))))
}

func (self FontAtlas) AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85 string, size_pixels float32) Font {
	compressed_font_data_base85Arg, compressed_font_data_base85Fin := wrapString(compressed_font_data_base85)
	defer compressed_font_data_base85Fin()

	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryCompressedBase85TTF(self.handle(), compressed_font_data_base85Arg, C.float(size_pixels))))
}

func (self FontAtlas) AddFontFromMemoryCompressedTTF(compressed_font_data unsafe.Pointer, compressed_font_size int32, size_pixels float32) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryCompressedTTF(self.handle(), compressed_font_data, C.int(compressed_font_size), C.float(size_pixels))))
}

func (self FontAtlas) AddFontFromMemoryTTF(font_data unsafe.Pointer, font_size int32, size_pixels float32) Font {
	return (Font)(unsafe.Pointer(C.FontAtlas_AddFontFromMemoryTTF(self.handle(), font_data, C.int(font_size), C.float(size_pixels))))
}

func (self FontGlyphRangesBuilder) AddText(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.FontGlyphRangesBuilder_AddText(self.handle(), textArg)
}

func (self Font) AddRemapChar(dst Wchar, src Wchar) {
	C.Font_AddRemapChar(self.handle(), C.ImWchar(dst), C.ImWchar(src))
}

func (self Font) CalcTextSizeA(size float32, max_width float32, wrap_width float32, text_begin string) Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.Font_CalcTextSizeA(pOutArg, self.handle(), C.float(size), C.float(max_width), C.float(wrap_width), text_beginArg)
	return *pOut
}

func (self Font) RenderText(draw_list DrawList, size float32, pos Vec2, col uint32, clip_rect Vec4, text_begin string) {
	text_beginArg, text_beginFin := wrapString(text_begin)
	defer text_beginFin()

	C.Font_RenderText(self.handle(), draw_list.handle(), C.float(size), pos.toC(), C.ImU32(col), clip_rect.toC(), text_beginArg)
}

func (self IO) SetKeyEventNativeData(key Key, native_keycode int32, native_scancode int32) {
	C.IO_SetKeyEventNativeData(self.handle(), C.ImGuiKey(key), C.int(native_keycode), C.int(native_scancode))
}

func (self InputTextCallbackData) InsertChars(pos int32, text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.InputTextCallbackData_InsertChars(self.handle(), C.int(pos), textArg)
}

func (self ListClipper) Begin(items_count int32) {
	C.ListClipper_Begin(self.handle(), C.int(items_count))
}

func (self TextBuffer) Append(str string) {
	strArg, strFin := wrapString(str)
	defer strFin()

	C.TextBuffer_Append(self.handle(), strArg)
}

func (self TextFilter) Draw() bool {
	return C.TextFilter_Draw(self.handle()) == C.bool(true)
}

func (self TextFilter) PassFilter(text string) bool {
	textArg, textFin := wrapString(text)
	defer textFin()

	return C.TextFilter_PassFilter(self.handle(), textArg) == C.bool(true)
}

func AcceptDragDropPayload(typeArg string) Payload {
	typeArgArg, typeArgFin := wrapString(typeArg)
	defer typeArgFin()

	return (Payload)(unsafe.Pointer(C.AcceptDragDropPayload(typeArgArg)))
}

func Begin(name string) bool {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	return C.Begin(nameArg) == C.bool(true)
}

func BeginChildFrame(id ImGuiID, size Vec2) bool {
	return C.BeginChildFrame(C.ImGuiID(id), size.toC()) == C.bool(true)
}

func BeginChild_ID(id ImGuiID) bool {
	return C.BeginChild_ID(C.ImGuiID(id)) == C.bool(true)
}

func BeginChild_Str(str_id string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginChild_Str(str_idArg) == C.bool(true)
}

func BeginCombo(label string, preview_value string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	preview_valueArg, preview_valueFin := wrapString(preview_value)
	defer preview_valueFin()

	return C.BeginCombo(labelArg, preview_valueArg) == C.bool(true)
}

func BeginDisabled() {
	C.BeginDisabled()
}

func BeginDragDropSource() bool {
	return C.BeginDragDropSource() == C.bool(true)
}

func BeginListBox(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.BeginListBox(labelArg) == C.bool(true)
}

func BeginMenu(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.BeginMenu(labelArg) == C.bool(true)
}

func BeginPopup(str_id string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginPopup(str_idArg) == C.bool(true)
}

func BeginPopupContextItem() bool {
	return C.BeginPopupContextItem() == C.bool(true)
}

func BeginPopupContextVoid() bool {
	return C.BeginPopupContextVoid() == C.bool(true)
}

func BeginPopupContextWindow() bool {
	return C.BeginPopupContextWindow() == C.bool(true)
}

func BeginPopupModal(name string) bool {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	return C.BeginPopupModal(nameArg) == C.bool(true)
}

func BeginTabBar(str_id string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginTabBar(str_idArg) == C.bool(true)
}

func BeginTabItem(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.BeginTabItem(labelArg) == C.bool(true)
}

func BeginTable(str_id string, column int32) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.BeginTable(str_idArg, C.int(column)) == C.bool(true)
}

func Button(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.Button(labelArg) == C.bool(true)
}

func CalcTextSize(text string) Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	textArg, textFin := wrapString(text)
	defer textFin()

	C.CalcTextSize(pOutArg, textArg)
	return *pOut
}

func CollapsingHeader_BoolPtr(label string, p_visible *bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	p_visibleArg, p_visibleFin := wrapBool(p_visible)
	defer p_visibleFin()

	return C.CollapsingHeader_BoolPtr(labelArg, p_visibleArg) == C.bool(true)
}

func CollapsingHeader_TreeNodeFlags(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.CollapsingHeader_TreeNodeFlags(labelArg) == C.bool(true)
}

func ColorButton(desc_id string, col Vec4) bool {
	desc_idArg, desc_idFin := wrapString(desc_id)
	defer desc_idFin()

	return C.ColorButton(desc_idArg, col.toC()) == C.bool(true)
}

func ColorEdit3(label string, col [3]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorEdit3(labelArg, (*C.float)(&colArg[0])) == C.bool(true)
}

func ColorEdit4(label string, col [4]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorEdit4(labelArg, (*C.float)(&colArg[0])) == C.bool(true)
}

func ColorPicker3(label string, col [3]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorPicker3(labelArg, (*C.float)(&colArg[0])) == C.bool(true)
}

func ColorPicker4(label string, col [4]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	colArg := make([]C.float, len(col))
	for i, colV := range col {
		colArg[i] = C.float(*colV)
	}
	defer func() {
		for i, colV := range colArg {
			*col[i] = float32(colV)
		}
	}()

	return C.ColorPicker4(labelArg, (*C.float)(&colArg[0])) == C.bool(true)
}

func Columns() {
	C.Columns()
}

func Combo_Str(label string, current_item *int32, items_separated_by_zeros string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	items_separated_by_zerosArg, items_separated_by_zerosFin := wrapString(items_separated_by_zeros)
	defer items_separated_by_zerosFin()

	return C.Combo_Str(labelArg, current_itemArg, items_separated_by_zerosArg) == C.bool(true)
}

func Combo_Str_arr(label string, current_item *int32, items []string, items_count int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	itemsArg, itemsFin := wrapStringList(items)
	defer itemsFin()

	return C.Combo_Str_arr(labelArg, current_itemArg, itemsArg, C.int(items_count)) == C.bool(true)
}

func CreateContext() Context {
	return (Context)(unsafe.Pointer(C.CreateContext()))
}

func DestroyContext() {
	C.DestroyContext()
}

func DockSpace(id ImGuiID) ImGuiID {
	return ImGuiID(C.DockSpace(C.ImGuiID(id)))
}

func DockSpaceOverViewport() ImGuiID {
	return ImGuiID(C.DockSpaceOverViewport())
}

func DragFloat(label string, v *float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	return C.DragFloat(labelArg, vArg) == C.bool(true)
}

func DragFloat2(label string, v [2]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.DragFloat2(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func DragFloat3(label string, v [3]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.DragFloat3(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func DragFloat4(label string, v [4]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.DragFloat4(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func DragFloatRange2(label string, v_current_min *float32, v_current_max *float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_current_minArg, v_current_minFin := wrapNumberPtr[C.float, float32](v_current_min)
	defer v_current_minFin()

	v_current_maxArg, v_current_maxFin := wrapNumberPtr[C.float, float32](v_current_max)
	defer v_current_maxFin()

	return C.DragFloatRange2(labelArg, v_current_minArg, v_current_maxArg) == C.bool(true)
}

func DragInt(label string, v *int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.DragInt(labelArg, vArg) == C.bool(true)
}

func DragInt2(label string, v [2]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.DragInt2(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func DragInt3(label string, v [3]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.DragInt3(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func DragInt4(label string, v [4]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.DragInt4(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func DragIntRange2(label string, v_current_min *int32, v_current_max *int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_current_minArg, v_current_minFin := wrapNumberPtr[C.int, int32](v_current_min)
	defer v_current_minFin()

	v_current_maxArg, v_current_maxFin := wrapNumberPtr[C.int, int32](v_current_max)
	defer v_current_maxFin()

	return C.DragIntRange2(labelArg, v_current_minArg, v_current_maxArg) == C.bool(true)
}

func DragScalar(label string, data_type DataType, p_data unsafe.Pointer) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.DragScalar(labelArg, C.ImGuiDataType(data_type), p_data) == C.bool(true)
}

func DragScalarN(label string, data_type DataType, p_data unsafe.Pointer, components int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.DragScalarN(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components)) == C.bool(true)
}

func GetColorU32_Col(idx Col) uint32 {
	return uint32(C.GetColorU32_Col(C.ImGuiCol(idx)))
}

func GetColumnOffset() float32 {
	return float32(C.GetColumnOffset())
}

func GetColumnWidth() float32 {
	return float32(C.GetColumnWidth())
}

func GetMouseDragDelta() Vec2 {
	pOut := &Vec2{}
	pOutArg, pOutFin := wrap[C.ImVec2, *Vec2](pOut)
	defer pOutFin()

	C.GetMouseDragDelta(pOutArg)
	return *pOut
}

func Indent() {
	C.Indent()
}

func InputDouble(label string, v *float64) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.double, float64](v)
	defer vFin()

	return C.InputDouble(labelArg, vArg) == C.bool(true)
}

func InputFloat(label string, v *float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	return C.InputFloat(labelArg, vArg) == C.bool(true)
}

func InputFloat2(label string, v [2]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.InputFloat2(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func InputFloat3(label string, v [3]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.InputFloat3(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func InputFloat4(label string, v [4]*float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.InputFloat4(labelArg, (*C.float)(&vArg[0])) == C.bool(true)
}

func InputInt(label string, v *int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.InputInt(labelArg, vArg) == C.bool(true)
}

func InputInt2(label string, v [2]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt2(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func InputInt3(label string, v [3]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt3(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func InputInt4(label string, v [4]*int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.InputInt4(labelArg, (*C.int)(&vArg[0])) == C.bool(true)
}

func InputScalar(label string, data_type DataType, p_data unsafe.Pointer) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.InputScalar(labelArg, C.ImGuiDataType(data_type), p_data) == C.bool(true)
}

func InputScalarN(label string, data_type DataType, p_data unsafe.Pointer, components int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.InputScalarN(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components)) == C.bool(true)
}

func InvisibleButton(str_id string, size Vec2) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.InvisibleButton(str_idArg, size.toC()) == C.bool(true)
}

func IsItemClicked() bool {
	return C.IsItemClicked() == C.bool(true)
}

func IsItemHovered() bool {
	return C.IsItemHovered() == C.bool(true)
}

func IsKeyPressed(key Key) bool {
	return C.IsKeyPressed(C.ImGuiKey(key)) == C.bool(true)
}

func IsMouseClicked(button MouseButton) bool {
	return C.IsMouseClicked(C.ImGuiMouseButton(button)) == C.bool(true)
}

func IsMouseDragging(button MouseButton) bool {
	return C.IsMouseDragging(C.ImGuiMouseButton(button)) == C.bool(true)
}

func IsMouseHoveringRect(r_min Vec2, r_max Vec2) bool {
	return C.IsMouseHoveringRect(r_min.toC(), r_max.toC()) == C.bool(true)
}

func IsMousePosValid() bool {
	return C.IsMousePosValid() == C.bool(true)
}

func IsPopupOpen_Str(str_id string) bool {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	return C.IsPopupOpen_Str(str_idArg) == C.bool(true)
}

func IsWindowFocused() bool {
	return C.IsWindowFocused() == C.bool(true)
}

func IsWindowHovered() bool {
	return C.IsWindowHovered() == C.bool(true)
}

func ListBox_Str_arr(label string, current_item *int32, items []string, items_count int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	current_itemArg, current_itemFin := wrapNumberPtr[C.int, int32](current_item)
	defer current_itemFin()

	itemsArg, itemsFin := wrapStringList(items)
	defer itemsFin()

	return C.ListBox_Str_arr(labelArg, current_itemArg, itemsArg, C.int(items_count)) == C.bool(true)
}

func LoadIniSettingsFromMemory(ini_data string) {
	ini_dataArg, ini_dataFin := wrapString(ini_data)
	defer ini_dataFin()

	C.LoadIniSettingsFromMemory(ini_dataArg)
}

func LogToClipboard() {
	C.LogToClipboard()
}

func LogToFile() {
	C.LogToFile()
}

func LogToTTY() {
	C.LogToTTY()
}

func MenuItem_Bool(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.MenuItem_Bool(labelArg) == C.bool(true)
}

func MenuItem_BoolPtr(label string, shortcut string, p_selected *bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	shortcutArg, shortcutFin := wrapString(shortcut)
	defer shortcutFin()

	p_selectedArg, p_selectedFin := wrapBool(p_selected)
	defer p_selectedFin()

	return C.MenuItem_BoolPtr(labelArg, shortcutArg, p_selectedArg) == C.bool(true)
}

func OpenPopupOnItemClick() {
	C.OpenPopupOnItemClick()
}

func OpenPopup_ID(id ImGuiID) {
	C.OpenPopup_ID(C.ImGuiID(id))
}

func OpenPopup_Str(str_id string) {
	str_idArg, str_idFin := wrapString(str_id)
	defer str_idFin()

	C.OpenPopup_Str(str_idArg)
}

func PlotHistogram_FloatPtr(label string, values []float32, values_count int32) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.PlotHistogram_FloatPtr(labelArg, (*C.float)(&(values[0])), C.int(values_count))
}

func PlotLines_FloatPtr(label string, values []float32, values_count int32) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.PlotLines_FloatPtr(labelArg, (*C.float)(&(values[0])), C.int(values_count))
}

func PopStyleColor() {
	C.PopStyleColor()
}

func PopStyleVar() {
	C.PopStyleVar()
}

func ProgressBar(fraction float32) {
	C.ProgressBar(C.float(fraction))
}

func PushTextWrapPos() {
	C.PushTextWrapPos()
}

func RenderPlatformWindowsDefault() {
	C.RenderPlatformWindowsDefault()
}

func ResetMouseDragDelta() {
	C.ResetMouseDragDelta()
}

func SameLine() {
	C.SameLine()
}

func SaveIniSettingsToMemory() string {
	return C.GoString(C.SaveIniSettingsToMemory())
}

func Selectable_Bool(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.Selectable_Bool(labelArg) == C.bool(true)
}

func Selectable_BoolPtr(label string, p_selected *bool) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	p_selectedArg, p_selectedFin := wrapBool(p_selected)
	defer p_selectedFin()

	return C.Selectable_BoolPtr(labelArg, p_selectedArg) == C.bool(true)
}

func SetDragDropPayload(typeArg string, data unsafe.Pointer, sz uint64) bool {
	typeArgArg, typeArgFin := wrapString(typeArg)
	defer typeArgFin()

	return C.SetDragDropPayload(typeArgArg, data, C.xlong(sz)) == C.bool(true)
}

func SetKeyboardFocusHere() {
	C.SetKeyboardFocusHere()
}

func SetNextItemOpen(is_open bool) {
	C.SetNextItemOpen(C.bool(is_open))
}

func SetNextWindowCollapsed(collapsed bool) {
	C.SetNextWindowCollapsed(C.bool(collapsed))
}

func SetNextWindowDockID(dock_id ImGuiID) {
	C.SetNextWindowDockID(C.ImGuiID(dock_id))
}

func SetNextWindowPos(pos Vec2) {
	C.SetNextWindowPos(pos.toC())
}

func SetNextWindowSize(size Vec2) {
	C.SetNextWindowSize(size.toC())
}

func SetNextWindowSizeConstraints(size_min Vec2, size_max Vec2) {
	C.SetNextWindowSizeConstraints(size_min.toC(), size_max.toC())
}

func SetScrollFromPosX_Float(local_x float32) {
	C.SetScrollFromPosX_Float(C.float(local_x))
}

func SetScrollFromPosY_Float(local_y float32) {
	C.SetScrollFromPosY_Float(C.float(local_y))
}

func SetScrollHereX() {
	C.SetScrollHereX()
}

func SetScrollHereY() {
	C.SetScrollHereY()
}

func SetWindowCollapsed_Bool(collapsed bool) {
	C.SetWindowCollapsed_Bool(C.bool(collapsed))
}

func SetWindowCollapsed_Str(name string, collapsed bool) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowCollapsed_Str(nameArg, C.bool(collapsed))
}

func SetWindowPos_Str(name string, pos Vec2) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowPos_Str(nameArg, pos.toC())
}

func SetWindowPos_Vec2(pos Vec2) {
	C.SetWindowPos_Vec2(pos.toC())
}

func SetWindowSize_Str(name string, size Vec2) {
	nameArg, nameFin := wrapString(name)
	defer nameFin()

	C.SetWindowSize_Str(nameArg, size.toC())
}

func SetWindowSize_Vec2(size Vec2) {
	C.SetWindowSize_Vec2(size.toC())
}

func ShowAboutWindow() {
	C.ShowAboutWindow()
}

func ShowDebugLogWindow() {
	C.ShowDebugLogWindow()
}

func ShowDemoWindow() {
	C.ShowDemoWindow()
}

func ShowMetricsWindow() {
	C.ShowMetricsWindow()
}

func ShowStackToolWindow() {
	C.ShowStackToolWindow()
}

func ShowStyleEditor() {
	C.ShowStyleEditor()
}

func SliderAngle(label string, v_rad *float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	v_radArg, v_radFin := wrapNumberPtr[C.float, float32](v_rad)
	defer v_radFin()

	return C.SliderAngle(labelArg, v_radArg) == C.bool(true)
}

func SliderFloat(label string, v *float32, v_min float32, v_max float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	return C.SliderFloat(labelArg, vArg, C.float(v_min), C.float(v_max)) == C.bool(true)
}

func SliderFloat2(label string, v [2]*float32, v_min float32, v_max float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.SliderFloat2(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max)) == C.bool(true)
}

func SliderFloat3(label string, v [3]*float32, v_min float32, v_max float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.SliderFloat3(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max)) == C.bool(true)
}

func SliderFloat4(label string, v [4]*float32, v_min float32, v_max float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = float32(vV)
		}
	}()

	return C.SliderFloat4(labelArg, (*C.float)(&vArg[0]), C.float(v_min), C.float(v_max)) == C.bool(true)
}

func SliderInt(label string, v *int32, v_min int32, v_max int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.SliderInt(labelArg, vArg, C.int(v_min), C.int(v_max)) == C.bool(true)
}

func SliderInt2(label string, v [2]*int32, v_min int32, v_max int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.SliderInt2(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max)) == C.bool(true)
}

func SliderInt3(label string, v [3]*int32, v_min int32, v_max int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.SliderInt3(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max)) == C.bool(true)
}

func SliderInt4(label string, v [4]*int32, v_min int32, v_max int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg := make([]C.int, len(v))
	for i, vV := range v {
		vArg[i] = C.int(*vV)
	}
	defer func() {
		for i, vV := range vArg {
			*v[i] = int32(vV)
		}
	}()

	return C.SliderInt4(labelArg, (*C.int)(&vArg[0]), C.int(v_min), C.int(v_max)) == C.bool(true)
}

func SliderScalar(label string, data_type DataType, p_data unsafe.Pointer, p_min unsafe.Pointer, p_max unsafe.Pointer) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.SliderScalar(labelArg, C.ImGuiDataType(data_type), p_data, p_min, p_max) == C.bool(true)
}

func SliderScalarN(label string, data_type DataType, p_data unsafe.Pointer, components int32, p_min unsafe.Pointer, p_max unsafe.Pointer) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.SliderScalarN(labelArg, C.ImGuiDataType(data_type), p_data, C.int(components), p_min, p_max) == C.bool(true)
}

func StyleColorsClassic() {
	C.StyleColorsClassic()
}

func StyleColorsDark() {
	C.StyleColorsDark()
}

func StyleColorsLight() {
	C.StyleColorsLight()
}

func TabItemButton(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TabItemButton(labelArg) == C.bool(true)
}

func TableGetColumnFlags() TableColumnFlags {
	return TableColumnFlags(C.TableGetColumnFlags())
}

func TableGetColumnName_Int() string {
	return C.GoString(C.TableGetColumnName_Int())
}

func TableNextRow() {
	C.TableNextRow()
}

func TableSetBgColor(target TableBgTarget, color uint32) {
	C.TableSetBgColor(C.ImGuiTableBgTarget(target), C.ImU32(color))
}

func TableSetupColumn(label string) {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	C.TableSetupColumn(labelArg)
}

func TextUnformatted(text string) {
	textArg, textFin := wrapString(text)
	defer textFin()

	C.TextUnformatted(textArg)
}

func TreeNodeEx_Str(label string) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.TreeNodeEx_Str(labelArg) == C.bool(true)
}

func TreePush_Ptr() {
	C.TreePush_Ptr()
}

func Unindent() {
	C.Unindent()
}

func VSliderFloat(label string, size Vec2, v *float32, v_min float32, v_max float32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.float, float32](v)
	defer vFin()

	return C.VSliderFloat(labelArg, size.toC(), vArg, C.float(v_min), C.float(v_max)) == C.bool(true)
}

func VSliderInt(label string, size Vec2, v *int32, v_min int32, v_max int32) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	vArg, vFin := wrapNumberPtr[C.int, int32](v)
	defer vFin()

	return C.VSliderInt(labelArg, size.toC(), vArg, C.int(v_min), C.int(v_max)) == C.bool(true)
}

func VSliderScalar(label string, size Vec2, data_type DataType, p_data unsafe.Pointer, p_min unsafe.Pointer, p_max unsafe.Pointer) bool {
	labelArg, labelFin := wrapString(label)
	defer labelFin()

	return C.VSliderScalar(labelArg, size.toC(), C.ImGuiDataType(data_type), p_data, p_min, p_max) == C.bool(true)
}

func Value_Float(prefix string, v float32) {
	prefixArg, prefixFin := wrapString(prefix)
	defer prefixFin()

	C.Value_Float(prefixArg, C.float(v))
}

func (self DrawCmd) SetClipRect(v Vec4) {
	C.ImDrawCmd_SetClipRect(self.handle(), v.toC())
}

func (self DrawCmd) GetClipRect() Vec4 {
	out := &Vec4{}
	out.fromC(C.ImDrawCmd_GetClipRect(self.handle()))
	return *out
}

func (self DrawCmd) SetTextureId(v TextureID) {
	C.ImDrawCmd_SetTextureId(self.handle(), C.ImTextureID(v))
}

func (self DrawCmd) GetTextureId() TextureID {
	return TextureID(C.ImDrawCmd_GetTextureId(self.handle()))
}

func (self DrawCmd) SetVtxOffset(v uint32) {
	C.ImDrawCmd_SetVtxOffset(self.handle(), C.uint(v))
}

func (self DrawCmd) GetVtxOffset() uint32 {
	return uint32(C.ImDrawCmd_GetVtxOffset(self.handle()))
}

func (self DrawCmd) SetIdxOffset(v uint32) {
	C.ImDrawCmd_SetIdxOffset(self.handle(), C.uint(v))
}

func (self DrawCmd) GetIdxOffset() uint32 {
	return uint32(C.ImDrawCmd_GetIdxOffset(self.handle()))
}

func (self DrawCmd) SetElemCount(v uint32) {
	C.ImDrawCmd_SetElemCount(self.handle(), C.uint(v))
}

func (self DrawCmd) GetElemCount() uint32 {
	return uint32(C.ImDrawCmd_GetElemCount(self.handle()))
}

func (self DrawCmd) SetUserCallbackData(v unsafe.Pointer) {
	C.ImDrawCmd_SetUserCallbackData(self.handle(), v)
}

func (self DrawCmd) GetUserCallbackData() unsafe.Pointer {
	return unsafe.Pointer(C.ImDrawCmd_GetUserCallbackData(self.handle()))
}

func (self DrawCmdHeader) SetClipRect(v Vec4) {
	C.ImDrawCmdHeader_SetClipRect(self.handle(), v.toC())
}

func (self DrawCmdHeader) GetClipRect() Vec4 {
	out := &Vec4{}
	out.fromC(C.ImDrawCmdHeader_GetClipRect(self.handle()))
	return *out
}

func (self DrawCmdHeader) SetTextureId(v TextureID) {
	C.ImDrawCmdHeader_SetTextureId(self.handle(), C.ImTextureID(v))
}

func (self DrawCmdHeader) GetTextureId() TextureID {
	return TextureID(C.ImDrawCmdHeader_GetTextureId(self.handle()))
}

func (self DrawCmdHeader) SetVtxOffset(v uint32) {
	C.ImDrawCmdHeader_SetVtxOffset(self.handle(), C.uint(v))
}

func (self DrawCmdHeader) GetVtxOffset() uint32 {
	return uint32(C.ImDrawCmdHeader_GetVtxOffset(self.handle()))
}

func (self DrawData) SetValid(v bool) {
	C.ImDrawData_SetValid(self.handle(), C.bool(v))
}

func (self DrawData) GetValid() bool {
	return C.ImDrawData_GetValid(self.handle()) == C.bool(true)
}

func (self DrawData) SetCmdListsCount(v int32) {
	C.ImDrawData_SetCmdListsCount(self.handle(), C.int(v))
}

func (self DrawData) GetCmdListsCount() int {
	return int(C.ImDrawData_GetCmdListsCount(self.handle()))
}

func (self DrawData) SetTotalIdxCount(v int32) {
	C.ImDrawData_SetTotalIdxCount(self.handle(), C.int(v))
}

func (self DrawData) GetTotalIdxCount() int {
	return int(C.ImDrawData_GetTotalIdxCount(self.handle()))
}

func (self DrawData) SetTotalVtxCount(v int32) {
	C.ImDrawData_SetTotalVtxCount(self.handle(), C.int(v))
}

func (self DrawData) GetTotalVtxCount() int {
	return int(C.ImDrawData_GetTotalVtxCount(self.handle()))
}

func (self DrawData) SetDisplayPos(v Vec2) {
	C.ImDrawData_SetDisplayPos(self.handle(), v.toC())
}

func (self DrawData) GetDisplayPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawData_GetDisplayPos(self.handle()))
	return *out
}

func (self DrawData) SetDisplaySize(v Vec2) {
	C.ImDrawData_SetDisplaySize(self.handle(), v.toC())
}

func (self DrawData) GetDisplaySize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawData_GetDisplaySize(self.handle()))
	return *out
}

func (self DrawData) SetFramebufferScale(v Vec2) {
	C.ImDrawData_SetFramebufferScale(self.handle(), v.toC())
}

func (self DrawData) GetFramebufferScale() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawData_GetFramebufferScale(self.handle()))
	return *out
}

func (self DrawData) SetOwnerViewport(v Viewport) {
	C.ImDrawData_SetOwnerViewport(self.handle(), v.handle())
}

func (self DrawData) GetOwnerViewport() Viewport {
	return (Viewport)(unsafe.Pointer(C.ImDrawData_GetOwnerViewport(self.handle())))
}

func (self DrawList) SetFlags(v DrawListFlags) {
	C.ImDrawList_SetFlags(self.handle(), C.ImDrawListFlags(v))
}

func (self DrawList) GetFlags() DrawListFlags {
	return DrawListFlags(C.ImDrawList_GetFlags(self.handle()))
}

func (self DrawList) Set_VtxCurrentIdx(v uint32) {
	C.ImDrawList_Set_VtxCurrentIdx(self.handle(), C.uint(v))
}

func (self DrawList) Get_VtxCurrentIdx() uint32 {
	return uint32(C.ImDrawList_Get_VtxCurrentIdx(self.handle()))
}

func (self DrawList) Set_Data(v DrawListSharedData) {
	C.ImDrawList_Set_Data(self.handle(), v.handle())
}

func (self DrawList) Get_Data() DrawListSharedData {
	return (DrawListSharedData)(unsafe.Pointer(C.ImDrawList_Get_Data(self.handle())))
}

func (self DrawList) Set_OwnerName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImDrawList_Set_OwnerName(self.handle(), vArg)
}

func (self DrawList) Get_OwnerName() string {
	return C.GoString(C.ImDrawList_Get_OwnerName(self.handle()))
}

func (self DrawList) Set_VtxWritePtr(v DrawVert) {
	C.ImDrawList_Set_VtxWritePtr(self.handle(), v.handle())
}

func (self DrawList) Get_VtxWritePtr() DrawVert {
	return (DrawVert)(unsafe.Pointer(C.ImDrawList_Get_VtxWritePtr(self.handle())))
}

func (self DrawList) Get_CmdHeader() DrawCmdHeader {
	return newDrawCmdHeaderFromC(C.ImDrawList_Get_CmdHeader(self.handle()))
}

func (self DrawList) Get_Splitter() DrawListSplitter {
	return newDrawListSplitterFromC(C.ImDrawList_Get_Splitter(self.handle()))
}

func (self DrawList) Set_FringeScale(v float32) {
	C.ImDrawList_Set_FringeScale(self.handle(), C.float(v))
}

func (self DrawList) Get_FringeScale() float32 {
	return float32(C.ImDrawList_Get_FringeScale(self.handle()))
}

func (self DrawListSharedData) SetTexUvWhitePixel(v Vec2) {
	C.ImDrawListSharedData_SetTexUvWhitePixel(self.handle(), v.toC())
}

func (self DrawListSharedData) GetTexUvWhitePixel() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawListSharedData_GetTexUvWhitePixel(self.handle()))
	return *out
}

func (self DrawListSharedData) SetFont(v Font) {
	C.ImDrawListSharedData_SetFont(self.handle(), v.handle())
}

func (self DrawListSharedData) GetFont() Font {
	return (Font)(unsafe.Pointer(C.ImDrawListSharedData_GetFont(self.handle())))
}

func (self DrawListSharedData) SetFontSize(v float32) {
	C.ImDrawListSharedData_SetFontSize(self.handle(), C.float(v))
}

func (self DrawListSharedData) GetFontSize() float32 {
	return float32(C.ImDrawListSharedData_GetFontSize(self.handle()))
}

func (self DrawListSharedData) SetCurveTessellationTol(v float32) {
	C.ImDrawListSharedData_SetCurveTessellationTol(self.handle(), C.float(v))
}

func (self DrawListSharedData) GetCurveTessellationTol() float32 {
	return float32(C.ImDrawListSharedData_GetCurveTessellationTol(self.handle()))
}

func (self DrawListSharedData) SetCircleSegmentMaxError(v float32) {
	C.ImDrawListSharedData_SetCircleSegmentMaxError(self.handle(), C.float(v))
}

func (self DrawListSharedData) GetCircleSegmentMaxError() float32 {
	return float32(C.ImDrawListSharedData_GetCircleSegmentMaxError(self.handle()))
}

func (self DrawListSharedData) SetClipRectFullscreen(v Vec4) {
	C.ImDrawListSharedData_SetClipRectFullscreen(self.handle(), v.toC())
}

func (self DrawListSharedData) GetClipRectFullscreen() Vec4 {
	out := &Vec4{}
	out.fromC(C.ImDrawListSharedData_GetClipRectFullscreen(self.handle()))
	return *out
}

func (self DrawListSharedData) SetInitialFlags(v DrawListFlags) {
	C.ImDrawListSharedData_SetInitialFlags(self.handle(), C.ImDrawListFlags(v))
}

func (self DrawListSharedData) GetInitialFlags() DrawListFlags {
	return DrawListFlags(C.ImDrawListSharedData_GetInitialFlags(self.handle()))
}

func (self DrawListSharedData) SetArcFastRadiusCutoff(v float32) {
	C.ImDrawListSharedData_SetArcFastRadiusCutoff(self.handle(), C.float(v))
}

func (self DrawListSharedData) GetArcFastRadiusCutoff() float32 {
	return float32(C.ImDrawListSharedData_GetArcFastRadiusCutoff(self.handle()))
}

func (self DrawListSharedData) SetTexUvLines(v *Vec4) {
	vArg, vFin := wrap[C.ImVec4, *Vec4](v)
	defer vFin()

	C.ImDrawListSharedData_SetTexUvLines(self.handle(), vArg)
}

func (self DrawListSharedData) GetTexUvLines() *Vec4 {
	out := &Vec4{}
	out.fromC(*C.ImDrawListSharedData_GetTexUvLines(self.handle()))
	return out
}

func (self DrawListSplitter) Set_Current(v int32) {
	C.ImDrawListSplitter_Set_Current(self.handle(), C.int(v))
}

func (self DrawListSplitter) Get_Current() int {
	return int(C.ImDrawListSplitter_Get_Current(self.handle()))
}

func (self DrawListSplitter) Set_Count(v int32) {
	C.ImDrawListSplitter_Set_Count(self.handle(), C.int(v))
}

func (self DrawListSplitter) Get_Count() int {
	return int(C.ImDrawListSplitter_Get_Count(self.handle()))
}

func (self DrawVert) Setpos(v Vec2) {
	C.ImDrawVert_Setpos(self.handle(), v.toC())
}

func (self DrawVert) Getpos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawVert_Getpos(self.handle()))
	return *out
}

func (self DrawVert) Setuv(v Vec2) {
	C.ImDrawVert_Setuv(self.handle(), v.toC())
}

func (self DrawVert) Getuv() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImDrawVert_Getuv(self.handle()))
	return *out
}

func (self DrawVert) Setcol(v uint32) {
	C.ImDrawVert_Setcol(self.handle(), C.ImU32(v))
}

func (self DrawVert) Getcol() uint32 {
	return uint32(C.ImDrawVert_Getcol(self.handle()))
}

func (self Font) SetFallbackAdvanceX(v float32) {
	C.ImFont_SetFallbackAdvanceX(self.handle(), C.float(v))
}

func (self Font) GetFallbackAdvanceX() float32 {
	return float32(C.ImFont_GetFallbackAdvanceX(self.handle()))
}

func (self Font) SetFontSize(v float32) {
	C.ImFont_SetFontSize(self.handle(), C.float(v))
}

func (self Font) GetFontSize() float32 {
	return float32(C.ImFont_GetFontSize(self.handle()))
}

func (self Font) SetFallbackGlyph(v FontGlyph) {
	C.ImFont_SetFallbackGlyph(self.handle(), v.handle())
}

func (self Font) GetFallbackGlyph() FontGlyph {
	return (FontGlyph)(unsafe.Pointer(C.ImFont_GetFallbackGlyph(self.handle())))
}

func (self Font) SetContainerAtlas(v FontAtlas) {
	C.ImFont_SetContainerAtlas(self.handle(), v.handle())
}

func (self Font) GetContainerAtlas() FontAtlas {
	return (FontAtlas)(unsafe.Pointer(C.ImFont_GetContainerAtlas(self.handle())))
}

func (self Font) SetConfigData(v FontConfig) {
	C.ImFont_SetConfigData(self.handle(), v.handle())
}

func (self Font) GetConfigData() FontConfig {
	return (FontConfig)(unsafe.Pointer(C.ImFont_GetConfigData(self.handle())))
}

func (self Font) SetConfigDataCount(v int) {
	C.ImFont_SetConfigDataCount(self.handle(), C.short(v))
}

func (self Font) GetConfigDataCount() int {
	return int(C.ImFont_GetConfigDataCount(self.handle()))
}

func (self Font) SetFallbackChar(v Wchar) {
	C.ImFont_SetFallbackChar(self.handle(), C.ImWchar(v))
}

func (self Font) GetFallbackChar() Wchar {
	return (Wchar)(C.ImFont_GetFallbackChar(self.handle()))
}

func (self Font) SetEllipsisChar(v Wchar) {
	C.ImFont_SetEllipsisChar(self.handle(), C.ImWchar(v))
}

func (self Font) GetEllipsisChar() Wchar {
	return (Wchar)(C.ImFont_GetEllipsisChar(self.handle()))
}

func (self Font) SetDotChar(v Wchar) {
	C.ImFont_SetDotChar(self.handle(), C.ImWchar(v))
}

func (self Font) GetDotChar() Wchar {
	return (Wchar)(C.ImFont_GetDotChar(self.handle()))
}

func (self Font) SetDirtyLookupTables(v bool) {
	C.ImFont_SetDirtyLookupTables(self.handle(), C.bool(v))
}

func (self Font) GetDirtyLookupTables() bool {
	return C.ImFont_GetDirtyLookupTables(self.handle()) == C.bool(true)
}

func (self Font) SetScale(v float32) {
	C.ImFont_SetScale(self.handle(), C.float(v))
}

func (self Font) GetScale() float32 {
	return float32(C.ImFont_GetScale(self.handle()))
}

func (self Font) SetAscent(v float32) {
	C.ImFont_SetAscent(self.handle(), C.float(v))
}

func (self Font) GetAscent() float32 {
	return float32(C.ImFont_GetAscent(self.handle()))
}

func (self Font) SetDescent(v float32) {
	C.ImFont_SetDescent(self.handle(), C.float(v))
}

func (self Font) GetDescent() float32 {
	return float32(C.ImFont_GetDescent(self.handle()))
}

func (self Font) SetMetricsTotalSurface(v int32) {
	C.ImFont_SetMetricsTotalSurface(self.handle(), C.int(v))
}

func (self Font) GetMetricsTotalSurface() int {
	return int(C.ImFont_GetMetricsTotalSurface(self.handle()))
}

func (self FontAtlas) SetFlags(v FontAtlasFlags) {
	C.ImFontAtlas_SetFlags(self.handle(), C.ImFontAtlasFlags(v))
}

func (self FontAtlas) GetFlags() FontAtlasFlags {
	return FontAtlasFlags(C.ImFontAtlas_GetFlags(self.handle()))
}

func (self FontAtlas) SetTexDesiredWidth(v int32) {
	C.ImFontAtlas_SetTexDesiredWidth(self.handle(), C.int(v))
}

func (self FontAtlas) GetTexDesiredWidth() int {
	return int(C.ImFontAtlas_GetTexDesiredWidth(self.handle()))
}

func (self FontAtlas) SetTexGlyphPadding(v int32) {
	C.ImFontAtlas_SetTexGlyphPadding(self.handle(), C.int(v))
}

func (self FontAtlas) GetTexGlyphPadding() int {
	return int(C.ImFontAtlas_GetTexGlyphPadding(self.handle()))
}

func (self FontAtlas) SetLocked(v bool) {
	C.ImFontAtlas_SetLocked(self.handle(), C.bool(v))
}

func (self FontAtlas) GetLocked() bool {
	return C.ImFontAtlas_GetLocked(self.handle()) == C.bool(true)
}

func (self FontAtlas) SetTexReady(v bool) {
	C.ImFontAtlas_SetTexReady(self.handle(), C.bool(v))
}

func (self FontAtlas) GetTexReady() bool {
	return C.ImFontAtlas_GetTexReady(self.handle()) == C.bool(true)
}

func (self FontAtlas) SetTexPixelsUseColors(v bool) {
	C.ImFontAtlas_SetTexPixelsUseColors(self.handle(), C.bool(v))
}

func (self FontAtlas) GetTexPixelsUseColors() bool {
	return C.ImFontAtlas_GetTexPixelsUseColors(self.handle()) == C.bool(true)
}

func (self FontAtlas) SetTexPixelsRGBA32(v *uint32) {
	vArg, vFin := wrapNumberPtr[C.uint, uint32](v)
	defer vFin()

	C.ImFontAtlas_SetTexPixelsRGBA32(self.handle(), vArg)
}

func (self FontAtlas) SetTexWidth(v int32) {
	C.ImFontAtlas_SetTexWidth(self.handle(), C.int(v))
}

func (self FontAtlas) GetTexWidth() int {
	return int(C.ImFontAtlas_GetTexWidth(self.handle()))
}

func (self FontAtlas) SetTexHeight(v int32) {
	C.ImFontAtlas_SetTexHeight(self.handle(), C.int(v))
}

func (self FontAtlas) GetTexHeight() int {
	return int(C.ImFontAtlas_GetTexHeight(self.handle()))
}

func (self FontAtlas) SetTexUvScale(v Vec2) {
	C.ImFontAtlas_SetTexUvScale(self.handle(), v.toC())
}

func (self FontAtlas) GetTexUvScale() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImFontAtlas_GetTexUvScale(self.handle()))
	return *out
}

func (self FontAtlas) SetTexUvWhitePixel(v Vec2) {
	C.ImFontAtlas_SetTexUvWhitePixel(self.handle(), v.toC())
}

func (self FontAtlas) GetTexUvWhitePixel() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImFontAtlas_GetTexUvWhitePixel(self.handle()))
	return *out
}

func (self FontAtlas) SetFontBuilderIO(v FontBuilderIO) {
	C.ImFontAtlas_SetFontBuilderIO(self.handle(), v.handle())
}

func (self FontAtlas) GetFontBuilderIO() FontBuilderIO {
	return (FontBuilderIO)(unsafe.Pointer(C.ImFontAtlas_GetFontBuilderIO(self.handle())))
}

func (self FontAtlas) SetFontBuilderFlags(v uint32) {
	C.ImFontAtlas_SetFontBuilderFlags(self.handle(), C.uint(v))
}

func (self FontAtlas) GetFontBuilderFlags() uint32 {
	return uint32(C.ImFontAtlas_GetFontBuilderFlags(self.handle()))
}

func (self FontAtlas) SetPackIdMouseCursors(v int32) {
	C.ImFontAtlas_SetPackIdMouseCursors(self.handle(), C.int(v))
}

func (self FontAtlas) GetPackIdMouseCursors() int {
	return int(C.ImFontAtlas_GetPackIdMouseCursors(self.handle()))
}

func (self FontAtlas) SetPackIdLines(v int32) {
	C.ImFontAtlas_SetPackIdLines(self.handle(), C.int(v))
}

func (self FontAtlas) GetPackIdLines() int {
	return int(C.ImFontAtlas_GetPackIdLines(self.handle()))
}

func (self FontAtlasCustomRect) SetWidth(v uint) {
	C.ImFontAtlasCustomRect_SetWidth(self.handle(), C.ushort(v))
}

func (self FontAtlasCustomRect) SetHeight(v uint) {
	C.ImFontAtlasCustomRect_SetHeight(self.handle(), C.ushort(v))
}

func (self FontAtlasCustomRect) SetX(v uint) {
	C.ImFontAtlasCustomRect_SetX(self.handle(), C.ushort(v))
}

func (self FontAtlasCustomRect) SetY(v uint) {
	C.ImFontAtlasCustomRect_SetY(self.handle(), C.ushort(v))
}

func (self FontAtlasCustomRect) SetGlyphID(v uint32) {
	C.ImFontAtlasCustomRect_SetGlyphID(self.handle(), C.uint(v))
}

func (self FontAtlasCustomRect) GetGlyphID() uint32 {
	return uint32(C.ImFontAtlasCustomRect_GetGlyphID(self.handle()))
}

func (self FontAtlasCustomRect) SetGlyphAdvanceX(v float32) {
	C.ImFontAtlasCustomRect_SetGlyphAdvanceX(self.handle(), C.float(v))
}

func (self FontAtlasCustomRect) GetGlyphAdvanceX() float32 {
	return float32(C.ImFontAtlasCustomRect_GetGlyphAdvanceX(self.handle()))
}

func (self FontAtlasCustomRect) SetGlyphOffset(v Vec2) {
	C.ImFontAtlasCustomRect_SetGlyphOffset(self.handle(), v.toC())
}

func (self FontAtlasCustomRect) GetGlyphOffset() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImFontAtlasCustomRect_GetGlyphOffset(self.handle()))
	return *out
}

func (self FontAtlasCustomRect) SetFont(v Font) {
	C.ImFontAtlasCustomRect_SetFont(self.handle(), v.handle())
}

func (self FontAtlasCustomRect) GetFont() Font {
	return (Font)(unsafe.Pointer(C.ImFontAtlasCustomRect_GetFont(self.handle())))
}

func (self FontConfig) SetFontData(v unsafe.Pointer) {
	C.ImFontConfig_SetFontData(self.handle(), v)
}

func (self FontConfig) GetFontData() unsafe.Pointer {
	return unsafe.Pointer(C.ImFontConfig_GetFontData(self.handle()))
}

func (self FontConfig) SetFontDataSize(v int32) {
	C.ImFontConfig_SetFontDataSize(self.handle(), C.int(v))
}

func (self FontConfig) GetFontDataSize() int {
	return int(C.ImFontConfig_GetFontDataSize(self.handle()))
}

func (self FontConfig) SetFontDataOwnedByAtlas(v bool) {
	C.ImFontConfig_SetFontDataOwnedByAtlas(self.handle(), C.bool(v))
}

func (self FontConfig) GetFontDataOwnedByAtlas() bool {
	return C.ImFontConfig_GetFontDataOwnedByAtlas(self.handle()) == C.bool(true)
}

func (self FontConfig) SetFontNo(v int32) {
	C.ImFontConfig_SetFontNo(self.handle(), C.int(v))
}

func (self FontConfig) GetFontNo() int {
	return int(C.ImFontConfig_GetFontNo(self.handle()))
}

func (self FontConfig) SetSizePixels(v float32) {
	C.ImFontConfig_SetSizePixels(self.handle(), C.float(v))
}

func (self FontConfig) GetSizePixels() float32 {
	return float32(C.ImFontConfig_GetSizePixels(self.handle()))
}

func (self FontConfig) SetOversampleH(v int32) {
	C.ImFontConfig_SetOversampleH(self.handle(), C.int(v))
}

func (self FontConfig) GetOversampleH() int {
	return int(C.ImFontConfig_GetOversampleH(self.handle()))
}

func (self FontConfig) SetOversampleV(v int32) {
	C.ImFontConfig_SetOversampleV(self.handle(), C.int(v))
}

func (self FontConfig) GetOversampleV() int {
	return int(C.ImFontConfig_GetOversampleV(self.handle()))
}

func (self FontConfig) SetPixelSnapH(v bool) {
	C.ImFontConfig_SetPixelSnapH(self.handle(), C.bool(v))
}

func (self FontConfig) GetPixelSnapH() bool {
	return C.ImFontConfig_GetPixelSnapH(self.handle()) == C.bool(true)
}

func (self FontConfig) SetGlyphExtraSpacing(v Vec2) {
	C.ImFontConfig_SetGlyphExtraSpacing(self.handle(), v.toC())
}

func (self FontConfig) GetGlyphExtraSpacing() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImFontConfig_GetGlyphExtraSpacing(self.handle()))
	return *out
}

func (self FontConfig) SetGlyphOffset(v Vec2) {
	C.ImFontConfig_SetGlyphOffset(self.handle(), v.toC())
}

func (self FontConfig) GetGlyphOffset() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImFontConfig_GetGlyphOffset(self.handle()))
	return *out
}

func (self FontConfig) SetGlyphRanges(v *Wchar) {
	C.ImFontConfig_SetGlyphRanges(self.handle(), (*C.ImWchar)(v))
}

func (self FontConfig) GetGlyphRanges() *Wchar {
	return (*Wchar)(C.ImFontConfig_GetGlyphRanges(self.handle()))
}

func (self FontConfig) SetGlyphMinAdvanceX(v float32) {
	C.ImFontConfig_SetGlyphMinAdvanceX(self.handle(), C.float(v))
}

func (self FontConfig) GetGlyphMinAdvanceX() float32 {
	return float32(C.ImFontConfig_GetGlyphMinAdvanceX(self.handle()))
}

func (self FontConfig) SetGlyphMaxAdvanceX(v float32) {
	C.ImFontConfig_SetGlyphMaxAdvanceX(self.handle(), C.float(v))
}

func (self FontConfig) GetGlyphMaxAdvanceX() float32 {
	return float32(C.ImFontConfig_GetGlyphMaxAdvanceX(self.handle()))
}

func (self FontConfig) SetMergeMode(v bool) {
	C.ImFontConfig_SetMergeMode(self.handle(), C.bool(v))
}

func (self FontConfig) GetMergeMode() bool {
	return C.ImFontConfig_GetMergeMode(self.handle()) == C.bool(true)
}

func (self FontConfig) SetFontBuilderFlags(v uint32) {
	C.ImFontConfig_SetFontBuilderFlags(self.handle(), C.uint(v))
}

func (self FontConfig) GetFontBuilderFlags() uint32 {
	return uint32(C.ImFontConfig_GetFontBuilderFlags(self.handle()))
}

func (self FontConfig) SetRasterizerMultiply(v float32) {
	C.ImFontConfig_SetRasterizerMultiply(self.handle(), C.float(v))
}

func (self FontConfig) GetRasterizerMultiply() float32 {
	return float32(C.ImFontConfig_GetRasterizerMultiply(self.handle()))
}

func (self FontConfig) SetEllipsisChar(v Wchar) {
	C.ImFontConfig_SetEllipsisChar(self.handle(), C.ImWchar(v))
}

func (self FontConfig) GetEllipsisChar() Wchar {
	return (Wchar)(C.ImFontConfig_GetEllipsisChar(self.handle()))
}

func (self FontConfig) SetDstFont(v Font) {
	C.ImFontConfig_SetDstFont(self.handle(), v.handle())
}

func (self FontConfig) GetDstFont() Font {
	return (Font)(unsafe.Pointer(C.ImFontConfig_GetDstFont(self.handle())))
}

func (self FontGlyph) SetColored(v uint32) {
	C.ImFontGlyph_SetColored(self.handle(), C.uint(v))
}

func (self FontGlyph) GetColored() uint32 {
	return uint32(C.ImFontGlyph_GetColored(self.handle()))
}

func (self FontGlyph) SetVisible(v uint32) {
	C.ImFontGlyph_SetVisible(self.handle(), C.uint(v))
}

func (self FontGlyph) GetVisible() uint32 {
	return uint32(C.ImFontGlyph_GetVisible(self.handle()))
}

func (self FontGlyph) SetCodepoint(v uint32) {
	C.ImFontGlyph_SetCodepoint(self.handle(), C.uint(v))
}

func (self FontGlyph) GetCodepoint() uint32 {
	return uint32(C.ImFontGlyph_GetCodepoint(self.handle()))
}

func (self FontGlyph) SetAdvanceX(v float32) {
	C.ImFontGlyph_SetAdvanceX(self.handle(), C.float(v))
}

func (self FontGlyph) GetAdvanceX() float32 {
	return float32(C.ImFontGlyph_GetAdvanceX(self.handle()))
}

func (self FontGlyph) SetX0(v float32) {
	C.ImFontGlyph_SetX0(self.handle(), C.float(v))
}

func (self FontGlyph) GetX0() float32 {
	return float32(C.ImFontGlyph_GetX0(self.handle()))
}

func (self FontGlyph) SetY0(v float32) {
	C.ImFontGlyph_SetY0(self.handle(), C.float(v))
}

func (self FontGlyph) GetY0() float32 {
	return float32(C.ImFontGlyph_GetY0(self.handle()))
}

func (self FontGlyph) SetX1(v float32) {
	C.ImFontGlyph_SetX1(self.handle(), C.float(v))
}

func (self FontGlyph) GetX1() float32 {
	return float32(C.ImFontGlyph_GetX1(self.handle()))
}

func (self FontGlyph) SetY1(v float32) {
	C.ImFontGlyph_SetY1(self.handle(), C.float(v))
}

func (self FontGlyph) GetY1() float32 {
	return float32(C.ImFontGlyph_GetY1(self.handle()))
}

func (self FontGlyph) SetU0(v float32) {
	C.ImFontGlyph_SetU0(self.handle(), C.float(v))
}

func (self FontGlyph) GetU0() float32 {
	return float32(C.ImFontGlyph_GetU0(self.handle()))
}

func (self FontGlyph) SetV0(v float32) {
	C.ImFontGlyph_SetV0(self.handle(), C.float(v))
}

func (self FontGlyph) GetV0() float32 {
	return float32(C.ImFontGlyph_GetV0(self.handle()))
}

func (self FontGlyph) SetU1(v float32) {
	C.ImFontGlyph_SetU1(self.handle(), C.float(v))
}

func (self FontGlyph) GetU1() float32 {
	return float32(C.ImFontGlyph_GetU1(self.handle()))
}

func (self FontGlyph) SetV1(v float32) {
	C.ImFontGlyph_SetV1(self.handle(), C.float(v))
}

func (self FontGlyph) GetV1() float32 {
	return float32(C.ImFontGlyph_GetV1(self.handle()))
}

func (self ColorMod) SetCol(v Col) {
	C.ImGuiColorMod_SetCol(self.handle(), C.ImGuiCol(v))
}

func (self ColorMod) GetCol() Col {
	return Col(C.ImGuiColorMod_GetCol(self.handle()))
}

func (self ColorMod) SetBackupValue(v Vec4) {
	C.ImGuiColorMod_SetBackupValue(self.handle(), v.toC())
}

func (self ColorMod) GetBackupValue() Vec4 {
	out := &Vec4{}
	out.fromC(C.ImGuiColorMod_GetBackupValue(self.handle()))
	return *out
}

func (self ComboPreviewData) SetPreviewRect(v Rect) {
	C.ImGuiComboPreviewData_SetPreviewRect(self.handle(), v.toC())
}

func (self ComboPreviewData) GetPreviewRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiComboPreviewData_GetPreviewRect(self.handle()))
	return *out
}

func (self ComboPreviewData) SetBackupCursorPos(v Vec2) {
	C.ImGuiComboPreviewData_SetBackupCursorPos(self.handle(), v.toC())
}

func (self ComboPreviewData) GetBackupCursorPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiComboPreviewData_GetBackupCursorPos(self.handle()))
	return *out
}

func (self ComboPreviewData) SetBackupCursorMaxPos(v Vec2) {
	C.ImGuiComboPreviewData_SetBackupCursorMaxPos(self.handle(), v.toC())
}

func (self ComboPreviewData) GetBackupCursorMaxPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiComboPreviewData_GetBackupCursorMaxPos(self.handle()))
	return *out
}

func (self ComboPreviewData) SetBackupCursorPosPrevLine(v Vec2) {
	C.ImGuiComboPreviewData_SetBackupCursorPosPrevLine(self.handle(), v.toC())
}

func (self ComboPreviewData) GetBackupCursorPosPrevLine() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiComboPreviewData_GetBackupCursorPosPrevLine(self.handle()))
	return *out
}

func (self ComboPreviewData) SetBackupPrevLineTextBaseOffset(v float32) {
	C.ImGuiComboPreviewData_SetBackupPrevLineTextBaseOffset(self.handle(), C.float(v))
}

func (self ComboPreviewData) GetBackupPrevLineTextBaseOffset() float32 {
	return float32(C.ImGuiComboPreviewData_GetBackupPrevLineTextBaseOffset(self.handle()))
}

func (self ComboPreviewData) SetBackupLayout(v LayoutType) {
	C.ImGuiComboPreviewData_SetBackupLayout(self.handle(), C.ImGuiLayoutType(v))
}

func (self ComboPreviewData) GetBackupLayout() LayoutType {
	return LayoutType(C.ImGuiComboPreviewData_GetBackupLayout(self.handle()))
}

func (self Context) SetInitialized(v bool) {
	C.ImGuiContext_SetInitialized(self.handle(), C.bool(v))
}

func (self Context) GetInitialized() bool {
	return C.ImGuiContext_GetInitialized(self.handle()) == C.bool(true)
}

func (self Context) SetFontAtlasOwnedByContext(v bool) {
	C.ImGuiContext_SetFontAtlasOwnedByContext(self.handle(), C.bool(v))
}

func (self Context) GetFontAtlasOwnedByContext() bool {
	return C.ImGuiContext_GetFontAtlasOwnedByContext(self.handle()) == C.bool(true)
}

func (self Context) GetIO() IO {
	return newIOFromC(C.ImGuiContext_GetIO(self.handle()))
}

func (self Context) GetPlatformIO() PlatformIO {
	return newPlatformIOFromC(C.ImGuiContext_GetPlatformIO(self.handle()))
}

func (self Context) GetStyle() Style {
	return newStyleFromC(C.ImGuiContext_GetStyle(self.handle()))
}

func (self Context) SetConfigFlagsCurrFrame(v ConfigFlags) {
	C.ImGuiContext_SetConfigFlagsCurrFrame(self.handle(), C.ImGuiConfigFlags(v))
}

func (self Context) GetConfigFlagsCurrFrame() ConfigFlags {
	return ConfigFlags(C.ImGuiContext_GetConfigFlagsCurrFrame(self.handle()))
}

func (self Context) SetConfigFlagsLastFrame(v ConfigFlags) {
	C.ImGuiContext_SetConfigFlagsLastFrame(self.handle(), C.ImGuiConfigFlags(v))
}

func (self Context) GetConfigFlagsLastFrame() ConfigFlags {
	return ConfigFlags(C.ImGuiContext_GetConfigFlagsLastFrame(self.handle()))
}

func (self Context) SetFont(v Font) {
	C.ImGuiContext_SetFont(self.handle(), v.handle())
}

func (self Context) GetFont() Font {
	return (Font)(unsafe.Pointer(C.ImGuiContext_GetFont(self.handle())))
}

func (self Context) SetFontSize(v float32) {
	C.ImGuiContext_SetFontSize(self.handle(), C.float(v))
}

func (self Context) GetFontSize() float32 {
	return float32(C.ImGuiContext_GetFontSize(self.handle()))
}

func (self Context) SetFontBaseSize(v float32) {
	C.ImGuiContext_SetFontBaseSize(self.handle(), C.float(v))
}

func (self Context) GetFontBaseSize() float32 {
	return float32(C.ImGuiContext_GetFontBaseSize(self.handle()))
}

func (self Context) GetDrawListSharedData() DrawListSharedData {
	return newDrawListSharedDataFromC(C.ImGuiContext_GetDrawListSharedData(self.handle()))
}

func (self Context) SetTime(v float64) {
	C.ImGuiContext_SetTime(self.handle(), C.double(v))
}

func (self Context) GetTime() float64 {
	return float64(C.ImGuiContext_GetTime(self.handle()))
}

func (self Context) SetFrameCount(v int32) {
	C.ImGuiContext_SetFrameCount(self.handle(), C.int(v))
}

func (self Context) GetFrameCount() int {
	return int(C.ImGuiContext_GetFrameCount(self.handle()))
}

func (self Context) SetFrameCountEnded(v int32) {
	C.ImGuiContext_SetFrameCountEnded(self.handle(), C.int(v))
}

func (self Context) GetFrameCountEnded() int {
	return int(C.ImGuiContext_GetFrameCountEnded(self.handle()))
}

func (self Context) SetFrameCountPlatformEnded(v int32) {
	C.ImGuiContext_SetFrameCountPlatformEnded(self.handle(), C.int(v))
}

func (self Context) GetFrameCountPlatformEnded() int {
	return int(C.ImGuiContext_GetFrameCountPlatformEnded(self.handle()))
}

func (self Context) SetFrameCountRendered(v int32) {
	C.ImGuiContext_SetFrameCountRendered(self.handle(), C.int(v))
}

func (self Context) GetFrameCountRendered() int {
	return int(C.ImGuiContext_GetFrameCountRendered(self.handle()))
}

func (self Context) SetWithinFrameScope(v bool) {
	C.ImGuiContext_SetWithinFrameScope(self.handle(), C.bool(v))
}

func (self Context) GetWithinFrameScope() bool {
	return C.ImGuiContext_GetWithinFrameScope(self.handle()) == C.bool(true)
}

func (self Context) SetWithinFrameScopeWithImplicitWindow(v bool) {
	C.ImGuiContext_SetWithinFrameScopeWithImplicitWindow(self.handle(), C.bool(v))
}

func (self Context) GetWithinFrameScopeWithImplicitWindow() bool {
	return C.ImGuiContext_GetWithinFrameScopeWithImplicitWindow(self.handle()) == C.bool(true)
}

func (self Context) SetWithinEndChild(v bool) {
	C.ImGuiContext_SetWithinEndChild(self.handle(), C.bool(v))
}

func (self Context) GetWithinEndChild() bool {
	return C.ImGuiContext_GetWithinEndChild(self.handle()) == C.bool(true)
}

func (self Context) SetGcCompactAll(v bool) {
	C.ImGuiContext_SetGcCompactAll(self.handle(), C.bool(v))
}

func (self Context) GetGcCompactAll() bool {
	return C.ImGuiContext_GetGcCompactAll(self.handle()) == C.bool(true)
}

func (self Context) SetTestEngineHookItems(v bool) {
	C.ImGuiContext_SetTestEngineHookItems(self.handle(), C.bool(v))
}

func (self Context) GetTestEngineHookItems() bool {
	return C.ImGuiContext_GetTestEngineHookItems(self.handle()) == C.bool(true)
}

func (self Context) SetTestEngine(v unsafe.Pointer) {
	C.ImGuiContext_SetTestEngine(self.handle(), v)
}

func (self Context) GetTestEngine() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiContext_GetTestEngine(self.handle()))
}

func (self Context) GetWindowsById() Storage {
	return newStorageFromC(C.ImGuiContext_GetWindowsById(self.handle()))
}

func (self Context) SetWindowsActiveCount(v int32) {
	C.ImGuiContext_SetWindowsActiveCount(self.handle(), C.int(v))
}

func (self Context) GetWindowsActiveCount() int {
	return int(C.ImGuiContext_GetWindowsActiveCount(self.handle()))
}

func (self Context) SetWindowsHoverPadding(v Vec2) {
	C.ImGuiContext_SetWindowsHoverPadding(self.handle(), v.toC())
}

func (self Context) GetWindowsHoverPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetWindowsHoverPadding(self.handle()))
	return *out
}

func (self Context) SetCurrentWindow(v Window) {
	C.ImGuiContext_SetCurrentWindow(self.handle(), v.handle())
}

func (self Context) GetCurrentWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetCurrentWindow(self.handle())))
}

func (self Context) SetHoveredWindow(v Window) {
	C.ImGuiContext_SetHoveredWindow(self.handle(), v.handle())
}

func (self Context) GetHoveredWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetHoveredWindow(self.handle())))
}

func (self Context) SetHoveredWindowUnderMovingWindow(v Window) {
	C.ImGuiContext_SetHoveredWindowUnderMovingWindow(self.handle(), v.handle())
}

func (self Context) GetHoveredWindowUnderMovingWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetHoveredWindowUnderMovingWindow(self.handle())))
}

func (self Context) SetMovingWindow(v Window) {
	C.ImGuiContext_SetMovingWindow(self.handle(), v.handle())
}

func (self Context) GetMovingWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetMovingWindow(self.handle())))
}

func (self Context) SetWheelingWindow(v Window) {
	C.ImGuiContext_SetWheelingWindow(self.handle(), v.handle())
}

func (self Context) GetWheelingWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetWheelingWindow(self.handle())))
}

func (self Context) SetWheelingWindowRefMousePos(v Vec2) {
	C.ImGuiContext_SetWheelingWindowRefMousePos(self.handle(), v.toC())
}

func (self Context) GetWheelingWindowRefMousePos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetWheelingWindowRefMousePos(self.handle()))
	return *out
}

func (self Context) SetWheelingWindowTimer(v float32) {
	C.ImGuiContext_SetWheelingWindowTimer(self.handle(), C.float(v))
}

func (self Context) GetWheelingWindowTimer() float32 {
	return float32(C.ImGuiContext_GetWheelingWindowTimer(self.handle()))
}

func (self Context) SetDebugHookIdInfo(v ImGuiID) {
	C.ImGuiContext_SetDebugHookIdInfo(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDebugHookIdInfo() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDebugHookIdInfo(self.handle()))
}

func (self Context) SetHoveredId(v ImGuiID) {
	C.ImGuiContext_SetHoveredId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetHoveredId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetHoveredId(self.handle()))
}

func (self Context) SetHoveredIdPreviousFrame(v ImGuiID) {
	C.ImGuiContext_SetHoveredIdPreviousFrame(self.handle(), C.ImGuiID(v))
}

func (self Context) GetHoveredIdPreviousFrame() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetHoveredIdPreviousFrame(self.handle()))
}

func (self Context) SetHoveredIdAllowOverlap(v bool) {
	C.ImGuiContext_SetHoveredIdAllowOverlap(self.handle(), C.bool(v))
}

func (self Context) GetHoveredIdAllowOverlap() bool {
	return C.ImGuiContext_GetHoveredIdAllowOverlap(self.handle()) == C.bool(true)
}

func (self Context) SetHoveredIdUsingMouseWheel(v bool) {
	C.ImGuiContext_SetHoveredIdUsingMouseWheel(self.handle(), C.bool(v))
}

func (self Context) GetHoveredIdUsingMouseWheel() bool {
	return C.ImGuiContext_GetHoveredIdUsingMouseWheel(self.handle()) == C.bool(true)
}

func (self Context) SetHoveredIdPreviousFrameUsingMouseWheel(v bool) {
	C.ImGuiContext_SetHoveredIdPreviousFrameUsingMouseWheel(self.handle(), C.bool(v))
}

func (self Context) GetHoveredIdPreviousFrameUsingMouseWheel() bool {
	return C.ImGuiContext_GetHoveredIdPreviousFrameUsingMouseWheel(self.handle()) == C.bool(true)
}

func (self Context) SetHoveredIdDisabled(v bool) {
	C.ImGuiContext_SetHoveredIdDisabled(self.handle(), C.bool(v))
}

func (self Context) GetHoveredIdDisabled() bool {
	return C.ImGuiContext_GetHoveredIdDisabled(self.handle()) == C.bool(true)
}

func (self Context) SetHoveredIdTimer(v float32) {
	C.ImGuiContext_SetHoveredIdTimer(self.handle(), C.float(v))
}

func (self Context) GetHoveredIdTimer() float32 {
	return float32(C.ImGuiContext_GetHoveredIdTimer(self.handle()))
}

func (self Context) SetHoveredIdNotActiveTimer(v float32) {
	C.ImGuiContext_SetHoveredIdNotActiveTimer(self.handle(), C.float(v))
}

func (self Context) GetHoveredIdNotActiveTimer() float32 {
	return float32(C.ImGuiContext_GetHoveredIdNotActiveTimer(self.handle()))
}

func (self Context) SetActiveId(v ImGuiID) {
	C.ImGuiContext_SetActiveId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetActiveId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetActiveId(self.handle()))
}

func (self Context) SetActiveIdIsAlive(v ImGuiID) {
	C.ImGuiContext_SetActiveIdIsAlive(self.handle(), C.ImGuiID(v))
}

func (self Context) GetActiveIdIsAlive() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetActiveIdIsAlive(self.handle()))
}

func (self Context) SetActiveIdTimer(v float32) {
	C.ImGuiContext_SetActiveIdTimer(self.handle(), C.float(v))
}

func (self Context) GetActiveIdTimer() float32 {
	return float32(C.ImGuiContext_GetActiveIdTimer(self.handle()))
}

func (self Context) SetActiveIdIsJustActivated(v bool) {
	C.ImGuiContext_SetActiveIdIsJustActivated(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdIsJustActivated() bool {
	return C.ImGuiContext_GetActiveIdIsJustActivated(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdAllowOverlap(v bool) {
	C.ImGuiContext_SetActiveIdAllowOverlap(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdAllowOverlap() bool {
	return C.ImGuiContext_GetActiveIdAllowOverlap(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdNoClearOnFocusLoss(v bool) {
	C.ImGuiContext_SetActiveIdNoClearOnFocusLoss(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdNoClearOnFocusLoss() bool {
	return C.ImGuiContext_GetActiveIdNoClearOnFocusLoss(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdHasBeenPressedBefore(v bool) {
	C.ImGuiContext_SetActiveIdHasBeenPressedBefore(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdHasBeenPressedBefore() bool {
	return C.ImGuiContext_GetActiveIdHasBeenPressedBefore(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdHasBeenEditedBefore(v bool) {
	C.ImGuiContext_SetActiveIdHasBeenEditedBefore(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdHasBeenEditedBefore() bool {
	return C.ImGuiContext_GetActiveIdHasBeenEditedBefore(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdHasBeenEditedThisFrame(v bool) {
	C.ImGuiContext_SetActiveIdHasBeenEditedThisFrame(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdHasBeenEditedThisFrame() bool {
	return C.ImGuiContext_GetActiveIdHasBeenEditedThisFrame(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdClickOffset(v Vec2) {
	C.ImGuiContext_SetActiveIdClickOffset(self.handle(), v.toC())
}

func (self Context) GetActiveIdClickOffset() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetActiveIdClickOffset(self.handle()))
	return *out
}

func (self Context) SetActiveIdWindow(v Window) {
	C.ImGuiContext_SetActiveIdWindow(self.handle(), v.handle())
}

func (self Context) GetActiveIdWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetActiveIdWindow(self.handle())))
}

func (self Context) SetActiveIdSource(v InputSource) {
	C.ImGuiContext_SetActiveIdSource(self.handle(), C.ImGuiInputSource(v))
}

func (self Context) GetActiveIdSource() InputSource {
	return InputSource(C.ImGuiContext_GetActiveIdSource(self.handle()))
}

func (self Context) SetActiveIdMouseButton(v int32) {
	C.ImGuiContext_SetActiveIdMouseButton(self.handle(), C.int(v))
}

func (self Context) GetActiveIdMouseButton() int {
	return int(C.ImGuiContext_GetActiveIdMouseButton(self.handle()))
}

func (self Context) SetActiveIdPreviousFrame(v ImGuiID) {
	C.ImGuiContext_SetActiveIdPreviousFrame(self.handle(), C.ImGuiID(v))
}

func (self Context) GetActiveIdPreviousFrame() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetActiveIdPreviousFrame(self.handle()))
}

func (self Context) SetActiveIdPreviousFrameIsAlive(v bool) {
	C.ImGuiContext_SetActiveIdPreviousFrameIsAlive(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdPreviousFrameIsAlive() bool {
	return C.ImGuiContext_GetActiveIdPreviousFrameIsAlive(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdPreviousFrameHasBeenEditedBefore(v bool) {
	C.ImGuiContext_SetActiveIdPreviousFrameHasBeenEditedBefore(self.handle(), C.bool(v))
}

func (self Context) GetActiveIdPreviousFrameHasBeenEditedBefore() bool {
	return C.ImGuiContext_GetActiveIdPreviousFrameHasBeenEditedBefore(self.handle()) == C.bool(true)
}

func (self Context) SetActiveIdPreviousFrameWindow(v Window) {
	C.ImGuiContext_SetActiveIdPreviousFrameWindow(self.handle(), v.handle())
}

func (self Context) GetActiveIdPreviousFrameWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetActiveIdPreviousFrameWindow(self.handle())))
}

func (self Context) SetLastActiveId(v ImGuiID) {
	C.ImGuiContext_SetLastActiveId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetLastActiveId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetLastActiveId(self.handle()))
}

func (self Context) SetLastActiveIdTimer(v float32) {
	C.ImGuiContext_SetLastActiveIdTimer(self.handle(), C.float(v))
}

func (self Context) GetLastActiveIdTimer() float32 {
	return float32(C.ImGuiContext_GetLastActiveIdTimer(self.handle()))
}

func (self Context) SetActiveIdUsingNavDirMask(v uint32) {
	C.ImGuiContext_SetActiveIdUsingNavDirMask(self.handle(), C.ImU32(v))
}

func (self Context) GetActiveIdUsingNavDirMask() uint32 {
	return uint32(C.ImGuiContext_GetActiveIdUsingNavDirMask(self.handle()))
}

func (self Context) SetActiveIdUsingNavInputMask(v uint32) {
	C.ImGuiContext_SetActiveIdUsingNavInputMask(self.handle(), C.ImU32(v))
}

func (self Context) GetActiveIdUsingNavInputMask() uint32 {
	return uint32(C.ImGuiContext_GetActiveIdUsingNavInputMask(self.handle()))
}

func (self Context) SetCurrentItemFlags(v ItemFlags) {
	C.ImGuiContext_SetCurrentItemFlags(self.handle(), C.ImGuiItemFlags(v))
}

func (self Context) GetCurrentItemFlags() ItemFlags {
	return ItemFlags(C.ImGuiContext_GetCurrentItemFlags(self.handle()))
}

func (self Context) GetNextItemData() NextItemData {
	return newNextItemDataFromC(C.ImGuiContext_GetNextItemData(self.handle()))
}

func (self Context) GetLastItemData() LastItemData {
	return newLastItemDataFromC(C.ImGuiContext_GetLastItemData(self.handle()))
}

func (self Context) GetNextWindowData() NextWindowData {
	return newNextWindowDataFromC(C.ImGuiContext_GetNextWindowData(self.handle()))
}

func (self Context) SetBeginMenuCount(v int32) {
	C.ImGuiContext_SetBeginMenuCount(self.handle(), C.int(v))
}

func (self Context) GetBeginMenuCount() int {
	return int(C.ImGuiContext_GetBeginMenuCount(self.handle()))
}

func (self Context) SetCurrentDpiScale(v float32) {
	C.ImGuiContext_SetCurrentDpiScale(self.handle(), C.float(v))
}

func (self Context) GetCurrentDpiScale() float32 {
	return float32(C.ImGuiContext_GetCurrentDpiScale(self.handle()))
}

func (self Context) SetCurrentViewport(v ViewportP) {
	C.ImGuiContext_SetCurrentViewport(self.handle(), v.handle())
}

func (self Context) GetCurrentViewport() ViewportP {
	return (ViewportP)(unsafe.Pointer(C.ImGuiContext_GetCurrentViewport(self.handle())))
}

func (self Context) SetMouseViewport(v ViewportP) {
	C.ImGuiContext_SetMouseViewport(self.handle(), v.handle())
}

func (self Context) GetMouseViewport() ViewportP {
	return (ViewportP)(unsafe.Pointer(C.ImGuiContext_GetMouseViewport(self.handle())))
}

func (self Context) SetMouseLastHoveredViewport(v ViewportP) {
	C.ImGuiContext_SetMouseLastHoveredViewport(self.handle(), v.handle())
}

func (self Context) GetMouseLastHoveredViewport() ViewportP {
	return (ViewportP)(unsafe.Pointer(C.ImGuiContext_GetMouseLastHoveredViewport(self.handle())))
}

func (self Context) SetPlatformLastFocusedViewportId(v ImGuiID) {
	C.ImGuiContext_SetPlatformLastFocusedViewportId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetPlatformLastFocusedViewportId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetPlatformLastFocusedViewportId(self.handle()))
}

func (self Context) GetFallbackMonitor() PlatformMonitor {
	return newPlatformMonitorFromC(C.ImGuiContext_GetFallbackMonitor(self.handle()))
}

func (self Context) SetViewportFrontMostStampCount(v int32) {
	C.ImGuiContext_SetViewportFrontMostStampCount(self.handle(), C.int(v))
}

func (self Context) GetViewportFrontMostStampCount() int {
	return int(C.ImGuiContext_GetViewportFrontMostStampCount(self.handle()))
}

func (self Context) SetNavWindow(v Window) {
	C.ImGuiContext_SetNavWindow(self.handle(), v.handle())
}

func (self Context) GetNavWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetNavWindow(self.handle())))
}

func (self Context) SetNavId(v ImGuiID) {
	C.ImGuiContext_SetNavId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavId(self.handle()))
}

func (self Context) SetNavFocusScopeId(v ImGuiID) {
	C.ImGuiContext_SetNavFocusScopeId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavFocusScopeId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavFocusScopeId(self.handle()))
}

func (self Context) SetNavActivateId(v ImGuiID) {
	C.ImGuiContext_SetNavActivateId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavActivateId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavActivateId(self.handle()))
}

func (self Context) SetNavActivateDownId(v ImGuiID) {
	C.ImGuiContext_SetNavActivateDownId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavActivateDownId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavActivateDownId(self.handle()))
}

func (self Context) SetNavActivatePressedId(v ImGuiID) {
	C.ImGuiContext_SetNavActivatePressedId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavActivatePressedId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavActivatePressedId(self.handle()))
}

func (self Context) SetNavActivateInputId(v ImGuiID) {
	C.ImGuiContext_SetNavActivateInputId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavActivateInputId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavActivateInputId(self.handle()))
}

func (self Context) SetNavActivateFlags(v ActivateFlags) {
	C.ImGuiContext_SetNavActivateFlags(self.handle(), C.ImGuiActivateFlags(v))
}

func (self Context) GetNavActivateFlags() ActivateFlags {
	return ActivateFlags(C.ImGuiContext_GetNavActivateFlags(self.handle()))
}

func (self Context) SetNavJustMovedToId(v ImGuiID) {
	C.ImGuiContext_SetNavJustMovedToId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavJustMovedToId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavJustMovedToId(self.handle()))
}

func (self Context) SetNavJustMovedToFocusScopeId(v ImGuiID) {
	C.ImGuiContext_SetNavJustMovedToFocusScopeId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavJustMovedToFocusScopeId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavJustMovedToFocusScopeId(self.handle()))
}

func (self Context) SetNavJustMovedToKeyMods(v ModFlags) {
	C.ImGuiContext_SetNavJustMovedToKeyMods(self.handle(), C.ImGuiModFlags(v))
}

func (self Context) GetNavJustMovedToKeyMods() ModFlags {
	return ModFlags(C.ImGuiContext_GetNavJustMovedToKeyMods(self.handle()))
}

func (self Context) SetNavNextActivateId(v ImGuiID) {
	C.ImGuiContext_SetNavNextActivateId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavNextActivateId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavNextActivateId(self.handle()))
}

func (self Context) SetNavNextActivateFlags(v ActivateFlags) {
	C.ImGuiContext_SetNavNextActivateFlags(self.handle(), C.ImGuiActivateFlags(v))
}

func (self Context) GetNavNextActivateFlags() ActivateFlags {
	return ActivateFlags(C.ImGuiContext_GetNavNextActivateFlags(self.handle()))
}

func (self Context) SetNavInputSource(v InputSource) {
	C.ImGuiContext_SetNavInputSource(self.handle(), C.ImGuiInputSource(v))
}

func (self Context) GetNavInputSource() InputSource {
	return InputSource(C.ImGuiContext_GetNavInputSource(self.handle()))
}

func (self Context) SetNavLayer(v NavLayer) {
	C.ImGuiContext_SetNavLayer(self.handle(), C.ImGuiNavLayer(v))
}

func (self Context) GetNavLayer() NavLayer {
	return NavLayer(C.ImGuiContext_GetNavLayer(self.handle()))
}

func (self Context) SetNavIdIsAlive(v bool) {
	C.ImGuiContext_SetNavIdIsAlive(self.handle(), C.bool(v))
}

func (self Context) GetNavIdIsAlive() bool {
	return C.ImGuiContext_GetNavIdIsAlive(self.handle()) == C.bool(true)
}

func (self Context) SetNavMousePosDirty(v bool) {
	C.ImGuiContext_SetNavMousePosDirty(self.handle(), C.bool(v))
}

func (self Context) GetNavMousePosDirty() bool {
	return C.ImGuiContext_GetNavMousePosDirty(self.handle()) == C.bool(true)
}

func (self Context) SetNavDisableHighlight(v bool) {
	C.ImGuiContext_SetNavDisableHighlight(self.handle(), C.bool(v))
}

func (self Context) GetNavDisableHighlight() bool {
	return C.ImGuiContext_GetNavDisableHighlight(self.handle()) == C.bool(true)
}

func (self Context) SetNavDisableMouseHover(v bool) {
	C.ImGuiContext_SetNavDisableMouseHover(self.handle(), C.bool(v))
}

func (self Context) GetNavDisableMouseHover() bool {
	return C.ImGuiContext_GetNavDisableMouseHover(self.handle()) == C.bool(true)
}

func (self Context) SetNavAnyRequest(v bool) {
	C.ImGuiContext_SetNavAnyRequest(self.handle(), C.bool(v))
}

func (self Context) GetNavAnyRequest() bool {
	return C.ImGuiContext_GetNavAnyRequest(self.handle()) == C.bool(true)
}

func (self Context) SetNavInitRequest(v bool) {
	C.ImGuiContext_SetNavInitRequest(self.handle(), C.bool(v))
}

func (self Context) GetNavInitRequest() bool {
	return C.ImGuiContext_GetNavInitRequest(self.handle()) == C.bool(true)
}

func (self Context) SetNavInitRequestFromMove(v bool) {
	C.ImGuiContext_SetNavInitRequestFromMove(self.handle(), C.bool(v))
}

func (self Context) GetNavInitRequestFromMove() bool {
	return C.ImGuiContext_GetNavInitRequestFromMove(self.handle()) == C.bool(true)
}

func (self Context) SetNavInitResultId(v ImGuiID) {
	C.ImGuiContext_SetNavInitResultId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetNavInitResultId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetNavInitResultId(self.handle()))
}

func (self Context) SetNavInitResultRectRel(v Rect) {
	C.ImGuiContext_SetNavInitResultRectRel(self.handle(), v.toC())
}

func (self Context) GetNavInitResultRectRel() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiContext_GetNavInitResultRectRel(self.handle()))
	return *out
}

func (self Context) SetNavMoveSubmitted(v bool) {
	C.ImGuiContext_SetNavMoveSubmitted(self.handle(), C.bool(v))
}

func (self Context) GetNavMoveSubmitted() bool {
	return C.ImGuiContext_GetNavMoveSubmitted(self.handle()) == C.bool(true)
}

func (self Context) SetNavMoveScoringItems(v bool) {
	C.ImGuiContext_SetNavMoveScoringItems(self.handle(), C.bool(v))
}

func (self Context) GetNavMoveScoringItems() bool {
	return C.ImGuiContext_GetNavMoveScoringItems(self.handle()) == C.bool(true)
}

func (self Context) SetNavMoveForwardToNextFrame(v bool) {
	C.ImGuiContext_SetNavMoveForwardToNextFrame(self.handle(), C.bool(v))
}

func (self Context) GetNavMoveForwardToNextFrame() bool {
	return C.ImGuiContext_GetNavMoveForwardToNextFrame(self.handle()) == C.bool(true)
}

func (self Context) SetNavMoveFlags(v NavMoveFlags) {
	C.ImGuiContext_SetNavMoveFlags(self.handle(), C.ImGuiNavMoveFlags(v))
}

func (self Context) GetNavMoveFlags() NavMoveFlags {
	return NavMoveFlags(C.ImGuiContext_GetNavMoveFlags(self.handle()))
}

func (self Context) SetNavMoveScrollFlags(v ScrollFlags) {
	C.ImGuiContext_SetNavMoveScrollFlags(self.handle(), C.ImGuiScrollFlags(v))
}

func (self Context) GetNavMoveScrollFlags() ScrollFlags {
	return ScrollFlags(C.ImGuiContext_GetNavMoveScrollFlags(self.handle()))
}

func (self Context) SetNavMoveKeyMods(v ModFlags) {
	C.ImGuiContext_SetNavMoveKeyMods(self.handle(), C.ImGuiModFlags(v))
}

func (self Context) GetNavMoveKeyMods() ModFlags {
	return ModFlags(C.ImGuiContext_GetNavMoveKeyMods(self.handle()))
}

func (self Context) SetNavMoveDir(v Dir) {
	C.ImGuiContext_SetNavMoveDir(self.handle(), C.ImGuiDir(v))
}

func (self Context) GetNavMoveDir() Dir {
	return Dir(C.ImGuiContext_GetNavMoveDir(self.handle()))
}

func (self Context) SetNavMoveDirForDebug(v Dir) {
	C.ImGuiContext_SetNavMoveDirForDebug(self.handle(), C.ImGuiDir(v))
}

func (self Context) GetNavMoveDirForDebug() Dir {
	return Dir(C.ImGuiContext_GetNavMoveDirForDebug(self.handle()))
}

func (self Context) SetNavMoveClipDir(v Dir) {
	C.ImGuiContext_SetNavMoveClipDir(self.handle(), C.ImGuiDir(v))
}

func (self Context) GetNavMoveClipDir() Dir {
	return Dir(C.ImGuiContext_GetNavMoveClipDir(self.handle()))
}

func (self Context) SetNavScoringRect(v Rect) {
	C.ImGuiContext_SetNavScoringRect(self.handle(), v.toC())
}

func (self Context) GetNavScoringRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiContext_GetNavScoringRect(self.handle()))
	return *out
}

func (self Context) SetNavScoringNoClipRect(v Rect) {
	C.ImGuiContext_SetNavScoringNoClipRect(self.handle(), v.toC())
}

func (self Context) GetNavScoringNoClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiContext_GetNavScoringNoClipRect(self.handle()))
	return *out
}

func (self Context) SetNavScoringDebugCount(v int32) {
	C.ImGuiContext_SetNavScoringDebugCount(self.handle(), C.int(v))
}

func (self Context) GetNavScoringDebugCount() int {
	return int(C.ImGuiContext_GetNavScoringDebugCount(self.handle()))
}

func (self Context) SetNavTabbingDir(v int32) {
	C.ImGuiContext_SetNavTabbingDir(self.handle(), C.int(v))
}

func (self Context) GetNavTabbingDir() int {
	return int(C.ImGuiContext_GetNavTabbingDir(self.handle()))
}

func (self Context) SetNavTabbingCounter(v int32) {
	C.ImGuiContext_SetNavTabbingCounter(self.handle(), C.int(v))
}

func (self Context) GetNavTabbingCounter() int {
	return int(C.ImGuiContext_GetNavTabbingCounter(self.handle()))
}

func (self Context) GetNavMoveResultLocal() NavItemData {
	return newNavItemDataFromC(C.ImGuiContext_GetNavMoveResultLocal(self.handle()))
}

func (self Context) GetNavMoveResultLocalVisible() NavItemData {
	return newNavItemDataFromC(C.ImGuiContext_GetNavMoveResultLocalVisible(self.handle()))
}

func (self Context) GetNavMoveResultOther() NavItemData {
	return newNavItemDataFromC(C.ImGuiContext_GetNavMoveResultOther(self.handle()))
}

func (self Context) GetNavTabbingResultFirst() NavItemData {
	return newNavItemDataFromC(C.ImGuiContext_GetNavTabbingResultFirst(self.handle()))
}

func (self Context) SetNavWindowingTarget(v Window) {
	C.ImGuiContext_SetNavWindowingTarget(self.handle(), v.handle())
}

func (self Context) GetNavWindowingTarget() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetNavWindowingTarget(self.handle())))
}

func (self Context) SetNavWindowingTargetAnim(v Window) {
	C.ImGuiContext_SetNavWindowingTargetAnim(self.handle(), v.handle())
}

func (self Context) GetNavWindowingTargetAnim() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetNavWindowingTargetAnim(self.handle())))
}

func (self Context) SetNavWindowingListWindow(v Window) {
	C.ImGuiContext_SetNavWindowingListWindow(self.handle(), v.handle())
}

func (self Context) GetNavWindowingListWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiContext_GetNavWindowingListWindow(self.handle())))
}

func (self Context) SetNavWindowingTimer(v float32) {
	C.ImGuiContext_SetNavWindowingTimer(self.handle(), C.float(v))
}

func (self Context) GetNavWindowingTimer() float32 {
	return float32(C.ImGuiContext_GetNavWindowingTimer(self.handle()))
}

func (self Context) SetNavWindowingHighlightAlpha(v float32) {
	C.ImGuiContext_SetNavWindowingHighlightAlpha(self.handle(), C.float(v))
}

func (self Context) GetNavWindowingHighlightAlpha() float32 {
	return float32(C.ImGuiContext_GetNavWindowingHighlightAlpha(self.handle()))
}

func (self Context) SetNavWindowingToggleLayer(v bool) {
	C.ImGuiContext_SetNavWindowingToggleLayer(self.handle(), C.bool(v))
}

func (self Context) GetNavWindowingToggleLayer() bool {
	return C.ImGuiContext_GetNavWindowingToggleLayer(self.handle()) == C.bool(true)
}

func (self Context) SetNavWindowingAccumDeltaPos(v Vec2) {
	C.ImGuiContext_SetNavWindowingAccumDeltaPos(self.handle(), v.toC())
}

func (self Context) GetNavWindowingAccumDeltaPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetNavWindowingAccumDeltaPos(self.handle()))
	return *out
}

func (self Context) SetNavWindowingAccumDeltaSize(v Vec2) {
	C.ImGuiContext_SetNavWindowingAccumDeltaSize(self.handle(), v.toC())
}

func (self Context) GetNavWindowingAccumDeltaSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetNavWindowingAccumDeltaSize(self.handle()))
	return *out
}

func (self Context) SetDimBgRatio(v float32) {
	C.ImGuiContext_SetDimBgRatio(self.handle(), C.float(v))
}

func (self Context) GetDimBgRatio() float32 {
	return float32(C.ImGuiContext_GetDimBgRatio(self.handle()))
}

func (self Context) SetMouseCursor(v MouseCursor) {
	C.ImGuiContext_SetMouseCursor(self.handle(), C.ImGuiMouseCursor(v))
}

func (self Context) GetMouseCursor() MouseCursor {
	return MouseCursor(C.ImGuiContext_GetMouseCursor(self.handle()))
}

func (self Context) SetDragDropActive(v bool) {
	C.ImGuiContext_SetDragDropActive(self.handle(), C.bool(v))
}

func (self Context) GetDragDropActive() bool {
	return C.ImGuiContext_GetDragDropActive(self.handle()) == C.bool(true)
}

func (self Context) SetDragDropWithinSource(v bool) {
	C.ImGuiContext_SetDragDropWithinSource(self.handle(), C.bool(v))
}

func (self Context) GetDragDropWithinSource() bool {
	return C.ImGuiContext_GetDragDropWithinSource(self.handle()) == C.bool(true)
}

func (self Context) SetDragDropWithinTarget(v bool) {
	C.ImGuiContext_SetDragDropWithinTarget(self.handle(), C.bool(v))
}

func (self Context) GetDragDropWithinTarget() bool {
	return C.ImGuiContext_GetDragDropWithinTarget(self.handle()) == C.bool(true)
}

func (self Context) SetDragDropSourceFlags(v DragDropFlags) {
	C.ImGuiContext_SetDragDropSourceFlags(self.handle(), C.ImGuiDragDropFlags(v))
}

func (self Context) GetDragDropSourceFlags() DragDropFlags {
	return DragDropFlags(C.ImGuiContext_GetDragDropSourceFlags(self.handle()))
}

func (self Context) SetDragDropSourceFrameCount(v int32) {
	C.ImGuiContext_SetDragDropSourceFrameCount(self.handle(), C.int(v))
}

func (self Context) GetDragDropSourceFrameCount() int {
	return int(C.ImGuiContext_GetDragDropSourceFrameCount(self.handle()))
}

func (self Context) SetDragDropMouseButton(v int32) {
	C.ImGuiContext_SetDragDropMouseButton(self.handle(), C.int(v))
}

func (self Context) GetDragDropMouseButton() int {
	return int(C.ImGuiContext_GetDragDropMouseButton(self.handle()))
}

func (self Context) GetDragDropPayload() Payload {
	return newPayloadFromC(C.ImGuiContext_GetDragDropPayload(self.handle()))
}

func (self Context) SetDragDropTargetRect(v Rect) {
	C.ImGuiContext_SetDragDropTargetRect(self.handle(), v.toC())
}

func (self Context) GetDragDropTargetRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiContext_GetDragDropTargetRect(self.handle()))
	return *out
}

func (self Context) SetDragDropTargetId(v ImGuiID) {
	C.ImGuiContext_SetDragDropTargetId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDragDropTargetId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDragDropTargetId(self.handle()))
}

func (self Context) SetDragDropAcceptFlags(v DragDropFlags) {
	C.ImGuiContext_SetDragDropAcceptFlags(self.handle(), C.ImGuiDragDropFlags(v))
}

func (self Context) GetDragDropAcceptFlags() DragDropFlags {
	return DragDropFlags(C.ImGuiContext_GetDragDropAcceptFlags(self.handle()))
}

func (self Context) SetDragDropAcceptIdCurrRectSurface(v float32) {
	C.ImGuiContext_SetDragDropAcceptIdCurrRectSurface(self.handle(), C.float(v))
}

func (self Context) GetDragDropAcceptIdCurrRectSurface() float32 {
	return float32(C.ImGuiContext_GetDragDropAcceptIdCurrRectSurface(self.handle()))
}

func (self Context) SetDragDropAcceptIdCurr(v ImGuiID) {
	C.ImGuiContext_SetDragDropAcceptIdCurr(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDragDropAcceptIdCurr() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDragDropAcceptIdCurr(self.handle()))
}

func (self Context) SetDragDropAcceptIdPrev(v ImGuiID) {
	C.ImGuiContext_SetDragDropAcceptIdPrev(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDragDropAcceptIdPrev() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDragDropAcceptIdPrev(self.handle()))
}

func (self Context) SetDragDropAcceptFrameCount(v int32) {
	C.ImGuiContext_SetDragDropAcceptFrameCount(self.handle(), C.int(v))
}

func (self Context) GetDragDropAcceptFrameCount() int {
	return int(C.ImGuiContext_GetDragDropAcceptFrameCount(self.handle()))
}

func (self Context) SetDragDropHoldJustPressedId(v ImGuiID) {
	C.ImGuiContext_SetDragDropHoldJustPressedId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDragDropHoldJustPressedId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDragDropHoldJustPressedId(self.handle()))
}

func (self Context) SetClipperTempDataStacked(v int32) {
	C.ImGuiContext_SetClipperTempDataStacked(self.handle(), C.int(v))
}

func (self Context) GetClipperTempDataStacked() int {
	return int(C.ImGuiContext_GetClipperTempDataStacked(self.handle()))
}

func (self Context) SetCurrentTable(v Table) {
	C.ImGuiContext_SetCurrentTable(self.handle(), v.handle())
}

func (self Context) GetCurrentTable() Table {
	return (Table)(unsafe.Pointer(C.ImGuiContext_GetCurrentTable(self.handle())))
}

func (self Context) SetTablesTempDataStacked(v int32) {
	C.ImGuiContext_SetTablesTempDataStacked(self.handle(), C.int(v))
}

func (self Context) GetTablesTempDataStacked() int {
	return int(C.ImGuiContext_GetTablesTempDataStacked(self.handle()))
}

func (self Context) SetCurrentTabBar(v TabBar) {
	C.ImGuiContext_SetCurrentTabBar(self.handle(), v.handle())
}

func (self Context) GetCurrentTabBar() TabBar {
	return (TabBar)(unsafe.Pointer(C.ImGuiContext_GetCurrentTabBar(self.handle())))
}

func (self Context) SetMouseLastValidPos(v Vec2) {
	C.ImGuiContext_SetMouseLastValidPos(self.handle(), v.toC())
}

func (self Context) GetMouseLastValidPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiContext_GetMouseLastValidPos(self.handle()))
	return *out
}

func (self Context) GetInputTextState() InputTextState {
	return newInputTextStateFromC(C.ImGuiContext_GetInputTextState(self.handle()))
}

func (self Context) GetInputTextPasswordFont() Font {
	return newFontFromC(C.ImGuiContext_GetInputTextPasswordFont(self.handle()))
}

func (self Context) SetTempInputId(v ImGuiID) {
	C.ImGuiContext_SetTempInputId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetTempInputId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetTempInputId(self.handle()))
}

func (self Context) SetColorEditOptions(v ColorEditFlags) {
	C.ImGuiContext_SetColorEditOptions(self.handle(), C.ImGuiColorEditFlags(v))
}

func (self Context) GetColorEditOptions() ColorEditFlags {
	return ColorEditFlags(C.ImGuiContext_GetColorEditOptions(self.handle()))
}

func (self Context) SetColorEditLastHue(v float32) {
	C.ImGuiContext_SetColorEditLastHue(self.handle(), C.float(v))
}

func (self Context) GetColorEditLastHue() float32 {
	return float32(C.ImGuiContext_GetColorEditLastHue(self.handle()))
}

func (self Context) SetColorEditLastSat(v float32) {
	C.ImGuiContext_SetColorEditLastSat(self.handle(), C.float(v))
}

func (self Context) GetColorEditLastSat() float32 {
	return float32(C.ImGuiContext_GetColorEditLastSat(self.handle()))
}

func (self Context) SetColorEditLastColor(v uint32) {
	C.ImGuiContext_SetColorEditLastColor(self.handle(), C.ImU32(v))
}

func (self Context) GetColorEditLastColor() uint32 {
	return uint32(C.ImGuiContext_GetColorEditLastColor(self.handle()))
}

func (self Context) SetColorPickerRef(v Vec4) {
	C.ImGuiContext_SetColorPickerRef(self.handle(), v.toC())
}

func (self Context) GetColorPickerRef() Vec4 {
	out := &Vec4{}
	out.fromC(C.ImGuiContext_GetColorPickerRef(self.handle()))
	return *out
}

func (self Context) GetComboPreviewData() ComboPreviewData {
	return newComboPreviewDataFromC(C.ImGuiContext_GetComboPreviewData(self.handle()))
}

func (self Context) SetSliderGrabClickOffset(v float32) {
	C.ImGuiContext_SetSliderGrabClickOffset(self.handle(), C.float(v))
}

func (self Context) GetSliderGrabClickOffset() float32 {
	return float32(C.ImGuiContext_GetSliderGrabClickOffset(self.handle()))
}

func (self Context) SetSliderCurrentAccum(v float32) {
	C.ImGuiContext_SetSliderCurrentAccum(self.handle(), C.float(v))
}

func (self Context) GetSliderCurrentAccum() float32 {
	return float32(C.ImGuiContext_GetSliderCurrentAccum(self.handle()))
}

func (self Context) SetSliderCurrentAccumDirty(v bool) {
	C.ImGuiContext_SetSliderCurrentAccumDirty(self.handle(), C.bool(v))
}

func (self Context) GetSliderCurrentAccumDirty() bool {
	return C.ImGuiContext_GetSliderCurrentAccumDirty(self.handle()) == C.bool(true)
}

func (self Context) SetDragCurrentAccumDirty(v bool) {
	C.ImGuiContext_SetDragCurrentAccumDirty(self.handle(), C.bool(v))
}

func (self Context) GetDragCurrentAccumDirty() bool {
	return C.ImGuiContext_GetDragCurrentAccumDirty(self.handle()) == C.bool(true)
}

func (self Context) SetDragCurrentAccum(v float32) {
	C.ImGuiContext_SetDragCurrentAccum(self.handle(), C.float(v))
}

func (self Context) GetDragCurrentAccum() float32 {
	return float32(C.ImGuiContext_GetDragCurrentAccum(self.handle()))
}

func (self Context) SetDragSpeedDefaultRatio(v float32) {
	C.ImGuiContext_SetDragSpeedDefaultRatio(self.handle(), C.float(v))
}

func (self Context) GetDragSpeedDefaultRatio() float32 {
	return float32(C.ImGuiContext_GetDragSpeedDefaultRatio(self.handle()))
}

func (self Context) SetScrollbarClickDeltaToGrabCenter(v float32) {
	C.ImGuiContext_SetScrollbarClickDeltaToGrabCenter(self.handle(), C.float(v))
}

func (self Context) GetScrollbarClickDeltaToGrabCenter() float32 {
	return float32(C.ImGuiContext_GetScrollbarClickDeltaToGrabCenter(self.handle()))
}

func (self Context) SetDisabledAlphaBackup(v float32) {
	C.ImGuiContext_SetDisabledAlphaBackup(self.handle(), C.float(v))
}

func (self Context) GetDisabledAlphaBackup() float32 {
	return float32(C.ImGuiContext_GetDisabledAlphaBackup(self.handle()))
}

func (self Context) SetDisabledStackSize(v int) {
	C.ImGuiContext_SetDisabledStackSize(self.handle(), C.short(v))
}

func (self Context) GetDisabledStackSize() int {
	return int(C.ImGuiContext_GetDisabledStackSize(self.handle()))
}

func (self Context) SetTooltipOverrideCount(v int) {
	C.ImGuiContext_SetTooltipOverrideCount(self.handle(), C.short(v))
}

func (self Context) GetTooltipOverrideCount() int {
	return int(C.ImGuiContext_GetTooltipOverrideCount(self.handle()))
}

func (self Context) SetTooltipSlowDelay(v float32) {
	C.ImGuiContext_SetTooltipSlowDelay(self.handle(), C.float(v))
}

func (self Context) GetTooltipSlowDelay() float32 {
	return float32(C.ImGuiContext_GetTooltipSlowDelay(self.handle()))
}

func (self Context) GetPlatformImeData() PlatformImeData {
	return newPlatformImeDataFromC(C.ImGuiContext_GetPlatformImeData(self.handle()))
}

func (self Context) GetPlatformImeDataPrev() PlatformImeData {
	return newPlatformImeDataFromC(C.ImGuiContext_GetPlatformImeDataPrev(self.handle()))
}

func (self Context) SetPlatformImeViewport(v ImGuiID) {
	C.ImGuiContext_SetPlatformImeViewport(self.handle(), C.ImGuiID(v))
}

func (self Context) GetPlatformImeViewport() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetPlatformImeViewport(self.handle()))
}

func (self Context) GetDockContext() DockContext {
	return newDockContextFromC(C.ImGuiContext_GetDockContext(self.handle()))
}

func (self Context) SetSettingsLoaded(v bool) {
	C.ImGuiContext_SetSettingsLoaded(self.handle(), C.bool(v))
}

func (self Context) GetSettingsLoaded() bool {
	return C.ImGuiContext_GetSettingsLoaded(self.handle()) == C.bool(true)
}

func (self Context) SetSettingsDirtyTimer(v float32) {
	C.ImGuiContext_SetSettingsDirtyTimer(self.handle(), C.float(v))
}

func (self Context) GetSettingsDirtyTimer() float32 {
	return float32(C.ImGuiContext_GetSettingsDirtyTimer(self.handle()))
}

func (self Context) GetSettingsIniData() TextBuffer {
	return newTextBufferFromC(C.ImGuiContext_GetSettingsIniData(self.handle()))
}

func (self Context) SetHookIdNext(v ImGuiID) {
	C.ImGuiContext_SetHookIdNext(self.handle(), C.ImGuiID(v))
}

func (self Context) GetHookIdNext() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetHookIdNext(self.handle()))
}

func (self Context) SetLogEnabled(v bool) {
	C.ImGuiContext_SetLogEnabled(self.handle(), C.bool(v))
}

func (self Context) GetLogEnabled() bool {
	return C.ImGuiContext_GetLogEnabled(self.handle()) == C.bool(true)
}

func (self Context) SetLogType(v LogType) {
	C.ImGuiContext_SetLogType(self.handle(), C.ImGuiLogType(v))
}

func (self Context) GetLogType() LogType {
	return LogType(C.ImGuiContext_GetLogType(self.handle()))
}

func (self Context) GetLogBuffer() TextBuffer {
	return newTextBufferFromC(C.ImGuiContext_GetLogBuffer(self.handle()))
}

func (self Context) SetLogNextPrefix(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiContext_SetLogNextPrefix(self.handle(), vArg)
}

func (self Context) GetLogNextPrefix() string {
	return C.GoString(C.ImGuiContext_GetLogNextPrefix(self.handle()))
}

func (self Context) SetLogNextSuffix(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiContext_SetLogNextSuffix(self.handle(), vArg)
}

func (self Context) GetLogNextSuffix() string {
	return C.GoString(C.ImGuiContext_GetLogNextSuffix(self.handle()))
}

func (self Context) SetLogLinePosY(v float32) {
	C.ImGuiContext_SetLogLinePosY(self.handle(), C.float(v))
}

func (self Context) GetLogLinePosY() float32 {
	return float32(C.ImGuiContext_GetLogLinePosY(self.handle()))
}

func (self Context) SetLogLineFirstItem(v bool) {
	C.ImGuiContext_SetLogLineFirstItem(self.handle(), C.bool(v))
}

func (self Context) GetLogLineFirstItem() bool {
	return C.ImGuiContext_GetLogLineFirstItem(self.handle()) == C.bool(true)
}

func (self Context) SetLogDepthRef(v int32) {
	C.ImGuiContext_SetLogDepthRef(self.handle(), C.int(v))
}

func (self Context) GetLogDepthRef() int {
	return int(C.ImGuiContext_GetLogDepthRef(self.handle()))
}

func (self Context) SetLogDepthToExpand(v int32) {
	C.ImGuiContext_SetLogDepthToExpand(self.handle(), C.int(v))
}

func (self Context) GetLogDepthToExpand() int {
	return int(C.ImGuiContext_GetLogDepthToExpand(self.handle()))
}

func (self Context) SetLogDepthToExpandDefault(v int32) {
	C.ImGuiContext_SetLogDepthToExpandDefault(self.handle(), C.int(v))
}

func (self Context) GetLogDepthToExpandDefault() int {
	return int(C.ImGuiContext_GetLogDepthToExpandDefault(self.handle()))
}

func (self Context) SetDebugLogFlags(v DebugLogFlags) {
	C.ImGuiContext_SetDebugLogFlags(self.handle(), C.ImGuiDebugLogFlags(v))
}

func (self Context) GetDebugLogFlags() DebugLogFlags {
	return DebugLogFlags(C.ImGuiContext_GetDebugLogFlags(self.handle()))
}

func (self Context) GetDebugLogBuf() TextBuffer {
	return newTextBufferFromC(C.ImGuiContext_GetDebugLogBuf(self.handle()))
}

func (self Context) SetDebugItemPickerActive(v bool) {
	C.ImGuiContext_SetDebugItemPickerActive(self.handle(), C.bool(v))
}

func (self Context) GetDebugItemPickerActive() bool {
	return C.ImGuiContext_GetDebugItemPickerActive(self.handle()) == C.bool(true)
}

func (self Context) SetDebugItemPickerMouseButton(v uint) {
	C.ImGuiContext_SetDebugItemPickerMouseButton(self.handle(), C.ImU8(v))
}

func (self Context) GetDebugItemPickerMouseButton() uint32 {
	return uint32(C.ImGuiContext_GetDebugItemPickerMouseButton(self.handle()))
}

func (self Context) SetDebugItemPickerBreakId(v ImGuiID) {
	C.ImGuiContext_SetDebugItemPickerBreakId(self.handle(), C.ImGuiID(v))
}

func (self Context) GetDebugItemPickerBreakId() ImGuiID {
	return ImGuiID(C.ImGuiContext_GetDebugItemPickerBreakId(self.handle()))
}

func (self Context) GetDebugMetricsConfig() MetricsConfig {
	return newMetricsConfigFromC(C.ImGuiContext_GetDebugMetricsConfig(self.handle()))
}

func (self Context) GetDebugStackTool() StackTool {
	return newStackToolFromC(C.ImGuiContext_GetDebugStackTool(self.handle()))
}

func (self Context) SetDebugHoveredDockNode(v DockNode) {
	C.ImGuiContext_SetDebugHoveredDockNode(self.handle(), v.handle())
}

func (self Context) GetDebugHoveredDockNode() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiContext_GetDebugHoveredDockNode(self.handle())))
}

func (self Context) SetFramerateSecPerFrameIdx(v int32) {
	C.ImGuiContext_SetFramerateSecPerFrameIdx(self.handle(), C.int(v))
}

func (self Context) GetFramerateSecPerFrameIdx() int {
	return int(C.ImGuiContext_GetFramerateSecPerFrameIdx(self.handle()))
}

func (self Context) SetFramerateSecPerFrameCount(v int32) {
	C.ImGuiContext_SetFramerateSecPerFrameCount(self.handle(), C.int(v))
}

func (self Context) GetFramerateSecPerFrameCount() int {
	return int(C.ImGuiContext_GetFramerateSecPerFrameCount(self.handle()))
}

func (self Context) SetFramerateSecPerFrameAccum(v float32) {
	C.ImGuiContext_SetFramerateSecPerFrameAccum(self.handle(), C.float(v))
}

func (self Context) GetFramerateSecPerFrameAccum() float32 {
	return float32(C.ImGuiContext_GetFramerateSecPerFrameAccum(self.handle()))
}

func (self Context) SetWantCaptureMouseNextFrame(v int32) {
	C.ImGuiContext_SetWantCaptureMouseNextFrame(self.handle(), C.int(v))
}

func (self Context) GetWantCaptureMouseNextFrame() int {
	return int(C.ImGuiContext_GetWantCaptureMouseNextFrame(self.handle()))
}

func (self Context) SetWantCaptureKeyboardNextFrame(v int32) {
	C.ImGuiContext_SetWantCaptureKeyboardNextFrame(self.handle(), C.int(v))
}

func (self Context) GetWantCaptureKeyboardNextFrame() int {
	return int(C.ImGuiContext_GetWantCaptureKeyboardNextFrame(self.handle()))
}

func (self Context) SetWantTextInputNextFrame(v int32) {
	C.ImGuiContext_SetWantTextInputNextFrame(self.handle(), C.int(v))
}

func (self Context) GetWantTextInputNextFrame() int {
	return int(C.ImGuiContext_GetWantTextInputNextFrame(self.handle()))
}

func (self ContextHook) SetHookId(v ImGuiID) {
	C.ImGuiContextHook_SetHookId(self.handle(), C.ImGuiID(v))
}

func (self ContextHook) GetHookId() ImGuiID {
	return ImGuiID(C.ImGuiContextHook_GetHookId(self.handle()))
}

func (self ContextHook) SetType(v ContextHookType) {
	C.ImGuiContextHook_SetType(self.handle(), C.ImGuiContextHookType(v))
}

func (self ContextHook) GetType() ContextHookType {
	return ContextHookType(C.ImGuiContextHook_GetType(self.handle()))
}

func (self ContextHook) SetOwner(v ImGuiID) {
	C.ImGuiContextHook_SetOwner(self.handle(), C.ImGuiID(v))
}

func (self ContextHook) GetOwner() ImGuiID {
	return ImGuiID(C.ImGuiContextHook_GetOwner(self.handle()))
}

func (self ContextHook) SetUserData(v unsafe.Pointer) {
	C.ImGuiContextHook_SetUserData(self.handle(), v)
}

func (self ContextHook) GetUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiContextHook_GetUserData(self.handle()))
}

func (self DataTypeInfo) SetSize(v uint64) {
	C.ImGuiDataTypeInfo_SetSize(self.handle(), C.xlong(v))
}

func (self DataTypeInfo) GetSize() float64 {
	return float64(C.ImGuiDataTypeInfo_GetSize(self.handle()))
}

func (self DataTypeInfo) SetName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiDataTypeInfo_SetName(self.handle(), vArg)
}

func (self DataTypeInfo) GetName() string {
	return C.GoString(C.ImGuiDataTypeInfo_GetName(self.handle()))
}

func (self DataTypeInfo) SetPrintFmt(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiDataTypeInfo_SetPrintFmt(self.handle(), vArg)
}

func (self DataTypeInfo) GetPrintFmt() string {
	return C.GoString(C.ImGuiDataTypeInfo_GetPrintFmt(self.handle()))
}

func (self DataTypeInfo) SetScanFmt(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiDataTypeInfo_SetScanFmt(self.handle(), vArg)
}

func (self DataTypeInfo) GetScanFmt() string {
	return C.GoString(C.ImGuiDataTypeInfo_GetScanFmt(self.handle()))
}

func (self DockContext) GetNodes() Storage {
	return newStorageFromC(C.ImGuiDockContext_GetNodes(self.handle()))
}

func (self DockContext) SetWantFullRebuild(v bool) {
	C.ImGuiDockContext_SetWantFullRebuild(self.handle(), C.bool(v))
}

func (self DockContext) GetWantFullRebuild() bool {
	return C.ImGuiDockContext_GetWantFullRebuild(self.handle()) == C.bool(true)
}

func (self DockNode) SetID(v ImGuiID) {
	C.ImGuiDockNode_SetID(self.handle(), C.ImGuiID(v))
}

func (self DockNode) GetID() ImGuiID {
	return ImGuiID(C.ImGuiDockNode_GetID(self.handle()))
}

func (self DockNode) SetSharedFlags(v DockNodeFlags) {
	C.ImGuiDockNode_SetSharedFlags(self.handle(), C.ImGuiDockNodeFlags(v))
}

func (self DockNode) GetSharedFlags() DockNodeFlags {
	return DockNodeFlags(C.ImGuiDockNode_GetSharedFlags(self.handle()))
}

func (self DockNode) SetLocalFlagsInWindows(v DockNodeFlags) {
	C.ImGuiDockNode_SetLocalFlagsInWindows(self.handle(), C.ImGuiDockNodeFlags(v))
}

func (self DockNode) GetLocalFlagsInWindows() DockNodeFlags {
	return DockNodeFlags(C.ImGuiDockNode_GetLocalFlagsInWindows(self.handle()))
}

func (self DockNode) SetMergedFlags(v DockNodeFlags) {
	C.ImGuiDockNode_SetMergedFlags(self.handle(), C.ImGuiDockNodeFlags(v))
}

func (self DockNode) GetMergedFlags() DockNodeFlags {
	return DockNodeFlags(C.ImGuiDockNode_GetMergedFlags(self.handle()))
}

func (self DockNode) SetState(v DockNodeState) {
	C.ImGuiDockNode_SetState(self.handle(), C.ImGuiDockNodeState(v))
}

func (self DockNode) GetState() DockNodeState {
	return DockNodeState(C.ImGuiDockNode_GetState(self.handle()))
}

func (self DockNode) SetParentNode(v DockNode) {
	C.ImGuiDockNode_SetParentNode(self.handle(), v.handle())
}

func (self DockNode) GetParentNode() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiDockNode_GetParentNode(self.handle())))
}

func (self DockNode) SetTabBar(v TabBar) {
	C.ImGuiDockNode_SetTabBar(self.handle(), v.handle())
}

func (self DockNode) GetTabBar() TabBar {
	return (TabBar)(unsafe.Pointer(C.ImGuiDockNode_GetTabBar(self.handle())))
}

func (self DockNode) SetPos(v Vec2) {
	C.ImGuiDockNode_SetPos(self.handle(), v.toC())
}

func (self DockNode) GetPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiDockNode_GetPos(self.handle()))
	return *out
}

func (self DockNode) SetSize(v Vec2) {
	C.ImGuiDockNode_SetSize(self.handle(), v.toC())
}

func (self DockNode) GetSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiDockNode_GetSize(self.handle()))
	return *out
}

func (self DockNode) SetSizeRef(v Vec2) {
	C.ImGuiDockNode_SetSizeRef(self.handle(), v.toC())
}

func (self DockNode) GetSizeRef() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiDockNode_GetSizeRef(self.handle()))
	return *out
}

func (self DockNode) SetSplitAxis(v Axis) {
	C.ImGuiDockNode_SetSplitAxis(self.handle(), C.ImGuiAxis(v))
}

func (self DockNode) GetSplitAxis() Axis {
	return Axis(C.ImGuiDockNode_GetSplitAxis(self.handle()))
}

func (self DockNode) GetWindowClass() WindowClass {
	return newWindowClassFromC(C.ImGuiDockNode_GetWindowClass(self.handle()))
}

func (self DockNode) SetLastBgColor(v uint32) {
	C.ImGuiDockNode_SetLastBgColor(self.handle(), C.ImU32(v))
}

func (self DockNode) GetLastBgColor() uint32 {
	return uint32(C.ImGuiDockNode_GetLastBgColor(self.handle()))
}

func (self DockNode) SetHostWindow(v Window) {
	C.ImGuiDockNode_SetHostWindow(self.handle(), v.handle())
}

func (self DockNode) GetHostWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiDockNode_GetHostWindow(self.handle())))
}

func (self DockNode) SetVisibleWindow(v Window) {
	C.ImGuiDockNode_SetVisibleWindow(self.handle(), v.handle())
}

func (self DockNode) GetVisibleWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiDockNode_GetVisibleWindow(self.handle())))
}

func (self DockNode) SetCentralNode(v DockNode) {
	C.ImGuiDockNode_SetCentralNode(self.handle(), v.handle())
}

func (self DockNode) GetCentralNode() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiDockNode_GetCentralNode(self.handle())))
}

func (self DockNode) SetOnlyNodeWithWindows(v DockNode) {
	C.ImGuiDockNode_SetOnlyNodeWithWindows(self.handle(), v.handle())
}

func (self DockNode) GetOnlyNodeWithWindows() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiDockNode_GetOnlyNodeWithWindows(self.handle())))
}

func (self DockNode) SetCountNodeWithWindows(v int32) {
	C.ImGuiDockNode_SetCountNodeWithWindows(self.handle(), C.int(v))
}

func (self DockNode) GetCountNodeWithWindows() int {
	return int(C.ImGuiDockNode_GetCountNodeWithWindows(self.handle()))
}

func (self DockNode) SetLastFrameAlive(v int32) {
	C.ImGuiDockNode_SetLastFrameAlive(self.handle(), C.int(v))
}

func (self DockNode) GetLastFrameAlive() int {
	return int(C.ImGuiDockNode_GetLastFrameAlive(self.handle()))
}

func (self DockNode) SetLastFrameActive(v int32) {
	C.ImGuiDockNode_SetLastFrameActive(self.handle(), C.int(v))
}

func (self DockNode) GetLastFrameActive() int {
	return int(C.ImGuiDockNode_GetLastFrameActive(self.handle()))
}

func (self DockNode) SetLastFrameFocused(v int32) {
	C.ImGuiDockNode_SetLastFrameFocused(self.handle(), C.int(v))
}

func (self DockNode) GetLastFrameFocused() int {
	return int(C.ImGuiDockNode_GetLastFrameFocused(self.handle()))
}

func (self DockNode) SetLastFocusedNodeId(v ImGuiID) {
	C.ImGuiDockNode_SetLastFocusedNodeId(self.handle(), C.ImGuiID(v))
}

func (self DockNode) GetLastFocusedNodeId() ImGuiID {
	return ImGuiID(C.ImGuiDockNode_GetLastFocusedNodeId(self.handle()))
}

func (self DockNode) SetSelectedTabId(v ImGuiID) {
	C.ImGuiDockNode_SetSelectedTabId(self.handle(), C.ImGuiID(v))
}

func (self DockNode) GetSelectedTabId() ImGuiID {
	return ImGuiID(C.ImGuiDockNode_GetSelectedTabId(self.handle()))
}

func (self DockNode) SetWantCloseTabId(v ImGuiID) {
	C.ImGuiDockNode_SetWantCloseTabId(self.handle(), C.ImGuiID(v))
}

func (self DockNode) GetWantCloseTabId() ImGuiID {
	return ImGuiID(C.ImGuiDockNode_GetWantCloseTabId(self.handle()))
}

func (self DockNode) SetAuthorityForPos(v DataAuthority) {
	C.ImGuiDockNode_SetAuthorityForPos(self.handle(), C.ImGuiDataAuthority(v))
}

func (self DockNode) GetAuthorityForPos() DataAuthority {
	return DataAuthority(C.ImGuiDockNode_GetAuthorityForPos(self.handle()))
}

func (self DockNode) SetAuthorityForSize(v DataAuthority) {
	C.ImGuiDockNode_SetAuthorityForSize(self.handle(), C.ImGuiDataAuthority(v))
}

func (self DockNode) GetAuthorityForSize() DataAuthority {
	return DataAuthority(C.ImGuiDockNode_GetAuthorityForSize(self.handle()))
}

func (self DockNode) SetAuthorityForViewport(v DataAuthority) {
	C.ImGuiDockNode_SetAuthorityForViewport(self.handle(), C.ImGuiDataAuthority(v))
}

func (self DockNode) GetAuthorityForViewport() DataAuthority {
	return DataAuthority(C.ImGuiDockNode_GetAuthorityForViewport(self.handle()))
}

func (self DockNode) SetIsVisible(v bool) {
	C.ImGuiDockNode_SetIsVisible(self.handle(), C.bool(v))
}

func (self DockNode) GetIsVisible() bool {
	return C.ImGuiDockNode_GetIsVisible(self.handle()) == C.bool(true)
}

func (self DockNode) SetIsFocused(v bool) {
	C.ImGuiDockNode_SetIsFocused(self.handle(), C.bool(v))
}

func (self DockNode) GetIsFocused() bool {
	return C.ImGuiDockNode_GetIsFocused(self.handle()) == C.bool(true)
}

func (self DockNode) SetIsBgDrawnThisFrame(v bool) {
	C.ImGuiDockNode_SetIsBgDrawnThisFrame(self.handle(), C.bool(v))
}

func (self DockNode) GetIsBgDrawnThisFrame() bool {
	return C.ImGuiDockNode_GetIsBgDrawnThisFrame(self.handle()) == C.bool(true)
}

func (self DockNode) SetHasCloseButton(v bool) {
	C.ImGuiDockNode_SetHasCloseButton(self.handle(), C.bool(v))
}

func (self DockNode) GetHasCloseButton() bool {
	return C.ImGuiDockNode_GetHasCloseButton(self.handle()) == C.bool(true)
}

func (self DockNode) SetHasWindowMenuButton(v bool) {
	C.ImGuiDockNode_SetHasWindowMenuButton(self.handle(), C.bool(v))
}

func (self DockNode) GetHasWindowMenuButton() bool {
	return C.ImGuiDockNode_GetHasWindowMenuButton(self.handle()) == C.bool(true)
}

func (self DockNode) SetHasCentralNodeChild(v bool) {
	C.ImGuiDockNode_SetHasCentralNodeChild(self.handle(), C.bool(v))
}

func (self DockNode) GetHasCentralNodeChild() bool {
	return C.ImGuiDockNode_GetHasCentralNodeChild(self.handle()) == C.bool(true)
}

func (self DockNode) SetWantCloseAll(v bool) {
	C.ImGuiDockNode_SetWantCloseAll(self.handle(), C.bool(v))
}

func (self DockNode) GetWantCloseAll() bool {
	return C.ImGuiDockNode_GetWantCloseAll(self.handle()) == C.bool(true)
}

func (self DockNode) SetWantLockSizeOnce(v bool) {
	C.ImGuiDockNode_SetWantLockSizeOnce(self.handle(), C.bool(v))
}

func (self DockNode) GetWantLockSizeOnce() bool {
	return C.ImGuiDockNode_GetWantLockSizeOnce(self.handle()) == C.bool(true)
}

func (self DockNode) SetWantMouseMove(v bool) {
	C.ImGuiDockNode_SetWantMouseMove(self.handle(), C.bool(v))
}

func (self DockNode) GetWantMouseMove() bool {
	return C.ImGuiDockNode_GetWantMouseMove(self.handle()) == C.bool(true)
}

func (self DockNode) SetWantHiddenTabBarUpdate(v bool) {
	C.ImGuiDockNode_SetWantHiddenTabBarUpdate(self.handle(), C.bool(v))
}

func (self DockNode) GetWantHiddenTabBarUpdate() bool {
	return C.ImGuiDockNode_GetWantHiddenTabBarUpdate(self.handle()) == C.bool(true)
}

func (self DockNode) SetWantHiddenTabBarToggle(v bool) {
	C.ImGuiDockNode_SetWantHiddenTabBarToggle(self.handle(), C.bool(v))
}

func (self DockNode) GetWantHiddenTabBarToggle() bool {
	return C.ImGuiDockNode_GetWantHiddenTabBarToggle(self.handle()) == C.bool(true)
}

func (self GroupData) SetWindowID(v ImGuiID) {
	C.ImGuiGroupData_SetWindowID(self.handle(), C.ImGuiID(v))
}

func (self GroupData) GetWindowID() ImGuiID {
	return ImGuiID(C.ImGuiGroupData_GetWindowID(self.handle()))
}

func (self GroupData) SetBackupCursorPos(v Vec2) {
	C.ImGuiGroupData_SetBackupCursorPos(self.handle(), v.toC())
}

func (self GroupData) GetBackupCursorPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiGroupData_GetBackupCursorPos(self.handle()))
	return *out
}

func (self GroupData) SetBackupCursorMaxPos(v Vec2) {
	C.ImGuiGroupData_SetBackupCursorMaxPos(self.handle(), v.toC())
}

func (self GroupData) GetBackupCursorMaxPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiGroupData_GetBackupCursorMaxPos(self.handle()))
	return *out
}

func (self GroupData) SetBackupCurrLineSize(v Vec2) {
	C.ImGuiGroupData_SetBackupCurrLineSize(self.handle(), v.toC())
}

func (self GroupData) GetBackupCurrLineSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiGroupData_GetBackupCurrLineSize(self.handle()))
	return *out
}

func (self GroupData) SetBackupCurrLineTextBaseOffset(v float32) {
	C.ImGuiGroupData_SetBackupCurrLineTextBaseOffset(self.handle(), C.float(v))
}

func (self GroupData) GetBackupCurrLineTextBaseOffset() float32 {
	return float32(C.ImGuiGroupData_GetBackupCurrLineTextBaseOffset(self.handle()))
}

func (self GroupData) SetBackupActiveIdIsAlive(v ImGuiID) {
	C.ImGuiGroupData_SetBackupActiveIdIsAlive(self.handle(), C.ImGuiID(v))
}

func (self GroupData) GetBackupActiveIdIsAlive() ImGuiID {
	return ImGuiID(C.ImGuiGroupData_GetBackupActiveIdIsAlive(self.handle()))
}

func (self GroupData) SetBackupActiveIdPreviousFrameIsAlive(v bool) {
	C.ImGuiGroupData_SetBackupActiveIdPreviousFrameIsAlive(self.handle(), C.bool(v))
}

func (self GroupData) GetBackupActiveIdPreviousFrameIsAlive() bool {
	return C.ImGuiGroupData_GetBackupActiveIdPreviousFrameIsAlive(self.handle()) == C.bool(true)
}

func (self GroupData) SetBackupHoveredIdIsAlive(v bool) {
	C.ImGuiGroupData_SetBackupHoveredIdIsAlive(self.handle(), C.bool(v))
}

func (self GroupData) GetBackupHoveredIdIsAlive() bool {
	return C.ImGuiGroupData_GetBackupHoveredIdIsAlive(self.handle()) == C.bool(true)
}

func (self GroupData) SetEmitItem(v bool) {
	C.ImGuiGroupData_SetEmitItem(self.handle(), C.bool(v))
}

func (self GroupData) GetEmitItem() bool {
	return C.ImGuiGroupData_GetEmitItem(self.handle()) == C.bool(true)
}

func (self IO) SetConfigFlags(v ConfigFlags) {
	C.ImGuiIO_SetConfigFlags(self.handle(), C.ImGuiConfigFlags(v))
}

func (self IO) GetConfigFlags() ConfigFlags {
	return ConfigFlags(C.ImGuiIO_GetConfigFlags(self.handle()))
}

func (self IO) SetBackendFlags(v BackendFlags) {
	C.ImGuiIO_SetBackendFlags(self.handle(), C.ImGuiBackendFlags(v))
}

func (self IO) GetBackendFlags() BackendFlags {
	return BackendFlags(C.ImGuiIO_GetBackendFlags(self.handle()))
}

func (self IO) SetDisplaySize(v Vec2) {
	C.ImGuiIO_SetDisplaySize(self.handle(), v.toC())
}

func (self IO) GetDisplaySize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiIO_GetDisplaySize(self.handle()))
	return *out
}

func (self IO) SetDeltaTime(v float32) {
	C.ImGuiIO_SetDeltaTime(self.handle(), C.float(v))
}

func (self IO) GetDeltaTime() float32 {
	return float32(C.ImGuiIO_GetDeltaTime(self.handle()))
}

func (self IO) SetIniSavingRate(v float32) {
	C.ImGuiIO_SetIniSavingRate(self.handle(), C.float(v))
}

func (self IO) GetIniSavingRate() float32 {
	return float32(C.ImGuiIO_GetIniSavingRate(self.handle()))
}

func (self IO) SetIniFilename(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiIO_SetIniFilename(self.handle(), vArg)
}

func (self IO) GetIniFilename() string {
	return C.GoString(C.ImGuiIO_GetIniFilename(self.handle()))
}

func (self IO) SetLogFilename(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiIO_SetLogFilename(self.handle(), vArg)
}

func (self IO) GetLogFilename() string {
	return C.GoString(C.ImGuiIO_GetLogFilename(self.handle()))
}

func (self IO) SetMouseDoubleClickTime(v float32) {
	C.ImGuiIO_SetMouseDoubleClickTime(self.handle(), C.float(v))
}

func (self IO) GetMouseDoubleClickTime() float32 {
	return float32(C.ImGuiIO_GetMouseDoubleClickTime(self.handle()))
}

func (self IO) SetMouseDoubleClickMaxDist(v float32) {
	C.ImGuiIO_SetMouseDoubleClickMaxDist(self.handle(), C.float(v))
}

func (self IO) GetMouseDoubleClickMaxDist() float32 {
	return float32(C.ImGuiIO_GetMouseDoubleClickMaxDist(self.handle()))
}

func (self IO) SetMouseDragThreshold(v float32) {
	C.ImGuiIO_SetMouseDragThreshold(self.handle(), C.float(v))
}

func (self IO) GetMouseDragThreshold() float32 {
	return float32(C.ImGuiIO_GetMouseDragThreshold(self.handle()))
}

func (self IO) SetKeyRepeatDelay(v float32) {
	C.ImGuiIO_SetKeyRepeatDelay(self.handle(), C.float(v))
}

func (self IO) GetKeyRepeatDelay() float32 {
	return float32(C.ImGuiIO_GetKeyRepeatDelay(self.handle()))
}

func (self IO) SetKeyRepeatRate(v float32) {
	C.ImGuiIO_SetKeyRepeatRate(self.handle(), C.float(v))
}

func (self IO) GetKeyRepeatRate() float32 {
	return float32(C.ImGuiIO_GetKeyRepeatRate(self.handle()))
}

func (self IO) SetUserData(v unsafe.Pointer) {
	C.ImGuiIO_SetUserData(self.handle(), v)
}

func (self IO) GetUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_GetUserData(self.handle()))
}

func (self IO) SetFonts(v FontAtlas) {
	C.ImGuiIO_SetFonts(self.handle(), v.handle())
}

func (self IO) GetFonts() FontAtlas {
	return (FontAtlas)(unsafe.Pointer(C.ImGuiIO_GetFonts(self.handle())))
}

func (self IO) SetFontGlobalScale(v float32) {
	C.ImGuiIO_SetFontGlobalScale(self.handle(), C.float(v))
}

func (self IO) GetFontGlobalScale() float32 {
	return float32(C.ImGuiIO_GetFontGlobalScale(self.handle()))
}

func (self IO) SetFontAllowUserScaling(v bool) {
	C.ImGuiIO_SetFontAllowUserScaling(self.handle(), C.bool(v))
}

func (self IO) GetFontAllowUserScaling() bool {
	return C.ImGuiIO_GetFontAllowUserScaling(self.handle()) == C.bool(true)
}

func (self IO) SetFontDefault(v Font) {
	C.ImGuiIO_SetFontDefault(self.handle(), v.handle())
}

func (self IO) GetFontDefault() Font {
	return (Font)(unsafe.Pointer(C.ImGuiIO_GetFontDefault(self.handle())))
}

func (self IO) SetDisplayFramebufferScale(v Vec2) {
	C.ImGuiIO_SetDisplayFramebufferScale(self.handle(), v.toC())
}

func (self IO) GetDisplayFramebufferScale() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiIO_GetDisplayFramebufferScale(self.handle()))
	return *out
}

func (self IO) SetConfigDockingNoSplit(v bool) {
	C.ImGuiIO_SetConfigDockingNoSplit(self.handle(), C.bool(v))
}

func (self IO) GetConfigDockingNoSplit() bool {
	return C.ImGuiIO_GetConfigDockingNoSplit(self.handle()) == C.bool(true)
}

func (self IO) SetConfigDockingWithShift(v bool) {
	C.ImGuiIO_SetConfigDockingWithShift(self.handle(), C.bool(v))
}

func (self IO) GetConfigDockingWithShift() bool {
	return C.ImGuiIO_GetConfigDockingWithShift(self.handle()) == C.bool(true)
}

func (self IO) SetConfigDockingAlwaysTabBar(v bool) {
	C.ImGuiIO_SetConfigDockingAlwaysTabBar(self.handle(), C.bool(v))
}

func (self IO) GetConfigDockingAlwaysTabBar() bool {
	return C.ImGuiIO_GetConfigDockingAlwaysTabBar(self.handle()) == C.bool(true)
}

func (self IO) SetConfigDockingTransparentPayload(v bool) {
	C.ImGuiIO_SetConfigDockingTransparentPayload(self.handle(), C.bool(v))
}

func (self IO) GetConfigDockingTransparentPayload() bool {
	return C.ImGuiIO_GetConfigDockingTransparentPayload(self.handle()) == C.bool(true)
}

func (self IO) SetConfigViewportsNoAutoMerge(v bool) {
	C.ImGuiIO_SetConfigViewportsNoAutoMerge(self.handle(), C.bool(v))
}

func (self IO) GetConfigViewportsNoAutoMerge() bool {
	return C.ImGuiIO_GetConfigViewportsNoAutoMerge(self.handle()) == C.bool(true)
}

func (self IO) SetConfigViewportsNoTaskBarIcon(v bool) {
	C.ImGuiIO_SetConfigViewportsNoTaskBarIcon(self.handle(), C.bool(v))
}

func (self IO) GetConfigViewportsNoTaskBarIcon() bool {
	return C.ImGuiIO_GetConfigViewportsNoTaskBarIcon(self.handle()) == C.bool(true)
}

func (self IO) SetConfigViewportsNoDecoration(v bool) {
	C.ImGuiIO_SetConfigViewportsNoDecoration(self.handle(), C.bool(v))
}

func (self IO) GetConfigViewportsNoDecoration() bool {
	return C.ImGuiIO_GetConfigViewportsNoDecoration(self.handle()) == C.bool(true)
}

func (self IO) SetConfigViewportsNoDefaultParent(v bool) {
	C.ImGuiIO_SetConfigViewportsNoDefaultParent(self.handle(), C.bool(v))
}

func (self IO) GetConfigViewportsNoDefaultParent() bool {
	return C.ImGuiIO_GetConfigViewportsNoDefaultParent(self.handle()) == C.bool(true)
}

func (self IO) SetMouseDrawCursor(v bool) {
	C.ImGuiIO_SetMouseDrawCursor(self.handle(), C.bool(v))
}

func (self IO) GetMouseDrawCursor() bool {
	return C.ImGuiIO_GetMouseDrawCursor(self.handle()) == C.bool(true)
}

func (self IO) SetConfigMacOSXBehaviors(v bool) {
	C.ImGuiIO_SetConfigMacOSXBehaviors(self.handle(), C.bool(v))
}

func (self IO) GetConfigMacOSXBehaviors() bool {
	return C.ImGuiIO_GetConfigMacOSXBehaviors(self.handle()) == C.bool(true)
}

func (self IO) SetConfigInputTrickleEventQueue(v bool) {
	C.ImGuiIO_SetConfigInputTrickleEventQueue(self.handle(), C.bool(v))
}

func (self IO) GetConfigInputTrickleEventQueue() bool {
	return C.ImGuiIO_GetConfigInputTrickleEventQueue(self.handle()) == C.bool(true)
}

func (self IO) SetConfigInputTextCursorBlink(v bool) {
	C.ImGuiIO_SetConfigInputTextCursorBlink(self.handle(), C.bool(v))
}

func (self IO) GetConfigInputTextCursorBlink() bool {
	return C.ImGuiIO_GetConfigInputTextCursorBlink(self.handle()) == C.bool(true)
}

func (self IO) SetConfigInputTextEnterKeepActive(v bool) {
	C.ImGuiIO_SetConfigInputTextEnterKeepActive(self.handle(), C.bool(v))
}

func (self IO) GetConfigInputTextEnterKeepActive() bool {
	return C.ImGuiIO_GetConfigInputTextEnterKeepActive(self.handle()) == C.bool(true)
}

func (self IO) SetConfigDragClickToInputText(v bool) {
	C.ImGuiIO_SetConfigDragClickToInputText(self.handle(), C.bool(v))
}

func (self IO) GetConfigDragClickToInputText() bool {
	return C.ImGuiIO_GetConfigDragClickToInputText(self.handle()) == C.bool(true)
}

func (self IO) SetConfigWindowsResizeFromEdges(v bool) {
	C.ImGuiIO_SetConfigWindowsResizeFromEdges(self.handle(), C.bool(v))
}

func (self IO) GetConfigWindowsResizeFromEdges() bool {
	return C.ImGuiIO_GetConfigWindowsResizeFromEdges(self.handle()) == C.bool(true)
}

func (self IO) SetConfigWindowsMoveFromTitleBarOnly(v bool) {
	C.ImGuiIO_SetConfigWindowsMoveFromTitleBarOnly(self.handle(), C.bool(v))
}

func (self IO) GetConfigWindowsMoveFromTitleBarOnly() bool {
	return C.ImGuiIO_GetConfigWindowsMoveFromTitleBarOnly(self.handle()) == C.bool(true)
}

func (self IO) SetConfigMemoryCompactTimer(v float32) {
	C.ImGuiIO_SetConfigMemoryCompactTimer(self.handle(), C.float(v))
}

func (self IO) GetConfigMemoryCompactTimer() float32 {
	return float32(C.ImGuiIO_GetConfigMemoryCompactTimer(self.handle()))
}

func (self IO) SetBackendPlatformName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiIO_SetBackendPlatformName(self.handle(), vArg)
}

func (self IO) GetBackendPlatformName() string {
	return C.GoString(C.ImGuiIO_GetBackendPlatformName(self.handle()))
}

func (self IO) SetBackendRendererName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiIO_SetBackendRendererName(self.handle(), vArg)
}

func (self IO) GetBackendRendererName() string {
	return C.GoString(C.ImGuiIO_GetBackendRendererName(self.handle()))
}

func (self IO) SetBackendPlatformUserData(v unsafe.Pointer) {
	C.ImGuiIO_SetBackendPlatformUserData(self.handle(), v)
}

func (self IO) GetBackendPlatformUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_GetBackendPlatformUserData(self.handle()))
}

func (self IO) SetBackendRendererUserData(v unsafe.Pointer) {
	C.ImGuiIO_SetBackendRendererUserData(self.handle(), v)
}

func (self IO) GetBackendRendererUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_GetBackendRendererUserData(self.handle()))
}

func (self IO) SetBackendLanguageUserData(v unsafe.Pointer) {
	C.ImGuiIO_SetBackendLanguageUserData(self.handle(), v)
}

func (self IO) GetBackendLanguageUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_GetBackendLanguageUserData(self.handle()))
}

func (self IO) SetClipboardUserData(v unsafe.Pointer) {
	C.ImGuiIO_SetClipboardUserData(self.handle(), v)
}

func (self IO) GetClipboardUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_GetClipboardUserData(self.handle()))
}

func (self IO) Set_UnusedPadding(v unsafe.Pointer) {
	C.ImGuiIO_Set_UnusedPadding(self.handle(), v)
}

func (self IO) Get_UnusedPadding() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiIO_Get_UnusedPadding(self.handle()))
}

func (self IO) SetWantCaptureMouse(v bool) {
	C.ImGuiIO_SetWantCaptureMouse(self.handle(), C.bool(v))
}

func (self IO) GetWantCaptureMouse() bool {
	return C.ImGuiIO_GetWantCaptureMouse(self.handle()) == C.bool(true)
}

func (self IO) SetWantCaptureKeyboard(v bool) {
	C.ImGuiIO_SetWantCaptureKeyboard(self.handle(), C.bool(v))
}

func (self IO) GetWantCaptureKeyboard() bool {
	return C.ImGuiIO_GetWantCaptureKeyboard(self.handle()) == C.bool(true)
}

func (self IO) SetWantTextInput(v bool) {
	C.ImGuiIO_SetWantTextInput(self.handle(), C.bool(v))
}

func (self IO) GetWantTextInput() bool {
	return C.ImGuiIO_GetWantTextInput(self.handle()) == C.bool(true)
}

func (self IO) SetWantSetMousePos(v bool) {
	C.ImGuiIO_SetWantSetMousePos(self.handle(), C.bool(v))
}

func (self IO) GetWantSetMousePos() bool {
	return C.ImGuiIO_GetWantSetMousePos(self.handle()) == C.bool(true)
}

func (self IO) SetWantSaveIniSettings(v bool) {
	C.ImGuiIO_SetWantSaveIniSettings(self.handle(), C.bool(v))
}

func (self IO) GetWantSaveIniSettings() bool {
	return C.ImGuiIO_GetWantSaveIniSettings(self.handle()) == C.bool(true)
}

func (self IO) SetNavActive(v bool) {
	C.ImGuiIO_SetNavActive(self.handle(), C.bool(v))
}

func (self IO) GetNavActive() bool {
	return C.ImGuiIO_GetNavActive(self.handle()) == C.bool(true)
}

func (self IO) SetNavVisible(v bool) {
	C.ImGuiIO_SetNavVisible(self.handle(), C.bool(v))
}

func (self IO) GetNavVisible() bool {
	return C.ImGuiIO_GetNavVisible(self.handle()) == C.bool(true)
}

func (self IO) SetFramerate(v float32) {
	C.ImGuiIO_SetFramerate(self.handle(), C.float(v))
}

func (self IO) GetFramerate() float32 {
	return float32(C.ImGuiIO_GetFramerate(self.handle()))
}

func (self IO) SetMetricsRenderVertices(v int32) {
	C.ImGuiIO_SetMetricsRenderVertices(self.handle(), C.int(v))
}

func (self IO) GetMetricsRenderVertices() int {
	return int(C.ImGuiIO_GetMetricsRenderVertices(self.handle()))
}

func (self IO) SetMetricsRenderIndices(v int32) {
	C.ImGuiIO_SetMetricsRenderIndices(self.handle(), C.int(v))
}

func (self IO) GetMetricsRenderIndices() int {
	return int(C.ImGuiIO_GetMetricsRenderIndices(self.handle()))
}

func (self IO) SetMetricsRenderWindows(v int32) {
	C.ImGuiIO_SetMetricsRenderWindows(self.handle(), C.int(v))
}

func (self IO) GetMetricsRenderWindows() int {
	return int(C.ImGuiIO_GetMetricsRenderWindows(self.handle()))
}

func (self IO) SetMetricsActiveWindows(v int32) {
	C.ImGuiIO_SetMetricsActiveWindows(self.handle(), C.int(v))
}

func (self IO) GetMetricsActiveWindows() int {
	return int(C.ImGuiIO_GetMetricsActiveWindows(self.handle()))
}

func (self IO) SetMetricsActiveAllocations(v int32) {
	C.ImGuiIO_SetMetricsActiveAllocations(self.handle(), C.int(v))
}

func (self IO) GetMetricsActiveAllocations() int {
	return int(C.ImGuiIO_GetMetricsActiveAllocations(self.handle()))
}

func (self IO) SetMouseDelta(v Vec2) {
	C.ImGuiIO_SetMouseDelta(self.handle(), v.toC())
}

func (self IO) GetMouseDelta() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiIO_GetMouseDelta(self.handle()))
	return *out
}

func (self IO) SetMousePos(v Vec2) {
	C.ImGuiIO_SetMousePos(self.handle(), v.toC())
}

func (self IO) GetMousePos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiIO_GetMousePos(self.handle()))
	return *out
}

func (self IO) SetMouseWheel(v float32) {
	C.ImGuiIO_SetMouseWheel(self.handle(), C.float(v))
}

func (self IO) GetMouseWheel() float32 {
	return float32(C.ImGuiIO_GetMouseWheel(self.handle()))
}

func (self IO) SetMouseWheelH(v float32) {
	C.ImGuiIO_SetMouseWheelH(self.handle(), C.float(v))
}

func (self IO) GetMouseWheelH() float32 {
	return float32(C.ImGuiIO_GetMouseWheelH(self.handle()))
}

func (self IO) SetMouseHoveredViewport(v ImGuiID) {
	C.ImGuiIO_SetMouseHoveredViewport(self.handle(), C.ImGuiID(v))
}

func (self IO) GetMouseHoveredViewport() ImGuiID {
	return ImGuiID(C.ImGuiIO_GetMouseHoveredViewport(self.handle()))
}

func (self IO) SetKeyCtrl(v bool) {
	C.ImGuiIO_SetKeyCtrl(self.handle(), C.bool(v))
}

func (self IO) GetKeyCtrl() bool {
	return C.ImGuiIO_GetKeyCtrl(self.handle()) == C.bool(true)
}

func (self IO) SetKeyShift(v bool) {
	C.ImGuiIO_SetKeyShift(self.handle(), C.bool(v))
}

func (self IO) GetKeyShift() bool {
	return C.ImGuiIO_GetKeyShift(self.handle()) == C.bool(true)
}

func (self IO) SetKeyAlt(v bool) {
	C.ImGuiIO_SetKeyAlt(self.handle(), C.bool(v))
}

func (self IO) GetKeyAlt() bool {
	return C.ImGuiIO_GetKeyAlt(self.handle()) == C.bool(true)
}

func (self IO) SetKeySuper(v bool) {
	C.ImGuiIO_SetKeySuper(self.handle(), C.bool(v))
}

func (self IO) GetKeySuper() bool {
	return C.ImGuiIO_GetKeySuper(self.handle()) == C.bool(true)
}

func (self IO) SetKeyMods(v ModFlags) {
	C.ImGuiIO_SetKeyMods(self.handle(), C.ImGuiModFlags(v))
}

func (self IO) GetKeyMods() ModFlags {
	return ModFlags(C.ImGuiIO_GetKeyMods(self.handle()))
}

func (self IO) SetWantCaptureMouseUnlessPopupClose(v bool) {
	C.ImGuiIO_SetWantCaptureMouseUnlessPopupClose(self.handle(), C.bool(v))
}

func (self IO) GetWantCaptureMouseUnlessPopupClose() bool {
	return C.ImGuiIO_GetWantCaptureMouseUnlessPopupClose(self.handle()) == C.bool(true)
}

func (self IO) SetMousePosPrev(v Vec2) {
	C.ImGuiIO_SetMousePosPrev(self.handle(), v.toC())
}

func (self IO) GetMousePosPrev() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiIO_GetMousePosPrev(self.handle()))
	return *out
}

func (self IO) SetPenPressure(v float32) {
	C.ImGuiIO_SetPenPressure(self.handle(), C.float(v))
}

func (self IO) GetPenPressure() float32 {
	return float32(C.ImGuiIO_GetPenPressure(self.handle()))
}

func (self IO) SetAppFocusLost(v bool) {
	C.ImGuiIO_SetAppFocusLost(self.handle(), C.bool(v))
}

func (self IO) GetAppFocusLost() bool {
	return C.ImGuiIO_GetAppFocusLost(self.handle()) == C.bool(true)
}

func (self IO) SetBackendUsingLegacyKeyArrays(v int) {
	C.ImGuiIO_SetBackendUsingLegacyKeyArrays(self.handle(), C.ImS8(v))
}

func (self IO) GetBackendUsingLegacyKeyArrays() int {
	return int(C.ImGuiIO_GetBackendUsingLegacyKeyArrays(self.handle()))
}

func (self IO) SetBackendUsingLegacyNavInputArray(v bool) {
	C.ImGuiIO_SetBackendUsingLegacyNavInputArray(self.handle(), C.bool(v))
}

func (self IO) GetBackendUsingLegacyNavInputArray() bool {
	return C.ImGuiIO_GetBackendUsingLegacyNavInputArray(self.handle()) == C.bool(true)
}

func (self InputEvent) SetType(v InputEventType) {
	C.ImGuiInputEvent_SetType(self.handle(), C.ImGuiInputEventType(v))
}

func (self InputEvent) GetType() InputEventType {
	return InputEventType(C.ImGuiInputEvent_GetType(self.handle()))
}

func (self InputEvent) SetSource(v InputSource) {
	C.ImGuiInputEvent_SetSource(self.handle(), C.ImGuiInputSource(v))
}

func (self InputEvent) GetSource() InputSource {
	return InputSource(C.ImGuiInputEvent_GetSource(self.handle()))
}

func (self InputEvent) SetIgnoredAsSame(v bool) {
	C.ImGuiInputEvent_SetIgnoredAsSame(self.handle(), C.bool(v))
}

func (self InputEvent) GetIgnoredAsSame() bool {
	return C.ImGuiInputEvent_GetIgnoredAsSame(self.handle()) == C.bool(true)
}

func (self InputEvent) SetAddedByTestEngine(v bool) {
	C.ImGuiInputEvent_SetAddedByTestEngine(self.handle(), C.bool(v))
}

func (self InputEvent) GetAddedByTestEngine() bool {
	return C.ImGuiInputEvent_GetAddedByTestEngine(self.handle()) == C.bool(true)
}

func (self InputEventAppFocused) SetFocused(v bool) {
	C.ImGuiInputEventAppFocused_SetFocused(self.handle(), C.bool(v))
}

func (self InputEventAppFocused) GetFocused() bool {
	return C.ImGuiInputEventAppFocused_GetFocused(self.handle()) == C.bool(true)
}

func (self InputEventKey) SetKey(v Key) {
	C.ImGuiInputEventKey_SetKey(self.handle(), C.ImGuiKey(v))
}

func (self InputEventKey) GetKey() Key {
	return Key(C.ImGuiInputEventKey_GetKey(self.handle()))
}

func (self InputEventKey) SetDown(v bool) {
	C.ImGuiInputEventKey_SetDown(self.handle(), C.bool(v))
}

func (self InputEventKey) GetDown() bool {
	return C.ImGuiInputEventKey_GetDown(self.handle()) == C.bool(true)
}

func (self InputEventKey) SetAnalogValue(v float32) {
	C.ImGuiInputEventKey_SetAnalogValue(self.handle(), C.float(v))
}

func (self InputEventKey) GetAnalogValue() float32 {
	return float32(C.ImGuiInputEventKey_GetAnalogValue(self.handle()))
}

func (self InputEventMouseButton) SetButton(v int32) {
	C.ImGuiInputEventMouseButton_SetButton(self.handle(), C.int(v))
}

func (self InputEventMouseButton) GetButton() int {
	return int(C.ImGuiInputEventMouseButton_GetButton(self.handle()))
}

func (self InputEventMouseButton) SetDown(v bool) {
	C.ImGuiInputEventMouseButton_SetDown(self.handle(), C.bool(v))
}

func (self InputEventMouseButton) GetDown() bool {
	return C.ImGuiInputEventMouseButton_GetDown(self.handle()) == C.bool(true)
}

func (self InputEventMousePos) SetPosX(v float32) {
	C.ImGuiInputEventMousePos_SetPosX(self.handle(), C.float(v))
}

func (self InputEventMousePos) GetPosX() float32 {
	return float32(C.ImGuiInputEventMousePos_GetPosX(self.handle()))
}

func (self InputEventMousePos) SetPosY(v float32) {
	C.ImGuiInputEventMousePos_SetPosY(self.handle(), C.float(v))
}

func (self InputEventMousePos) GetPosY() float32 {
	return float32(C.ImGuiInputEventMousePos_GetPosY(self.handle()))
}

func (self InputEventMouseViewport) SetHoveredViewportID(v ImGuiID) {
	C.ImGuiInputEventMouseViewport_SetHoveredViewportID(self.handle(), C.ImGuiID(v))
}

func (self InputEventMouseViewport) GetHoveredViewportID() ImGuiID {
	return ImGuiID(C.ImGuiInputEventMouseViewport_GetHoveredViewportID(self.handle()))
}

func (self InputEventMouseWheel) SetWheelX(v float32) {
	C.ImGuiInputEventMouseWheel_SetWheelX(self.handle(), C.float(v))
}

func (self InputEventMouseWheel) GetWheelX() float32 {
	return float32(C.ImGuiInputEventMouseWheel_GetWheelX(self.handle()))
}

func (self InputEventMouseWheel) SetWheelY(v float32) {
	C.ImGuiInputEventMouseWheel_SetWheelY(self.handle(), C.float(v))
}

func (self InputEventMouseWheel) GetWheelY() float32 {
	return float32(C.ImGuiInputEventMouseWheel_GetWheelY(self.handle()))
}

func (self InputEventText) SetChar(v uint32) {
	C.ImGuiInputEventText_SetChar(self.handle(), C.uint(v))
}

func (self InputEventText) GetChar() uint32 {
	return uint32(C.ImGuiInputEventText_GetChar(self.handle()))
}

func (self InputTextCallbackData) SetEventFlag(v InputTextFlags) {
	C.ImGuiInputTextCallbackData_SetEventFlag(self.handle(), C.ImGuiInputTextFlags(v))
}

func (self InputTextCallbackData) GetEventFlag() InputTextFlags {
	return InputTextFlags(C.ImGuiInputTextCallbackData_GetEventFlag(self.handle()))
}

func (self InputTextCallbackData) SetFlags(v InputTextFlags) {
	C.ImGuiInputTextCallbackData_SetFlags(self.handle(), C.ImGuiInputTextFlags(v))
}

func (self InputTextCallbackData) GetFlags() InputTextFlags {
	return InputTextFlags(C.ImGuiInputTextCallbackData_GetFlags(self.handle()))
}

func (self InputTextCallbackData) SetUserData(v unsafe.Pointer) {
	C.ImGuiInputTextCallbackData_SetUserData(self.handle(), v)
}

func (self InputTextCallbackData) GetUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiInputTextCallbackData_GetUserData(self.handle()))
}

func (self InputTextCallbackData) SetEventChar(v Wchar) {
	C.ImGuiInputTextCallbackData_SetEventChar(self.handle(), C.ImWchar(v))
}

func (self InputTextCallbackData) GetEventChar() Wchar {
	return (Wchar)(C.ImGuiInputTextCallbackData_GetEventChar(self.handle()))
}

func (self InputTextCallbackData) SetEventKey(v Key) {
	C.ImGuiInputTextCallbackData_SetEventKey(self.handle(), C.ImGuiKey(v))
}

func (self InputTextCallbackData) GetEventKey() Key {
	return Key(C.ImGuiInputTextCallbackData_GetEventKey(self.handle()))
}

func (self InputTextCallbackData) SetBuf(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiInputTextCallbackData_SetBuf(self.handle(), vArg)
}

func (self InputTextCallbackData) GetBuf() string {
	return C.GoString(C.ImGuiInputTextCallbackData_GetBuf(self.handle()))
}

func (self InputTextCallbackData) SetBufTextLen(v int32) {
	C.ImGuiInputTextCallbackData_SetBufTextLen(self.handle(), C.int(v))
}

func (self InputTextCallbackData) GetBufTextLen() int {
	return int(C.ImGuiInputTextCallbackData_GetBufTextLen(self.handle()))
}

func (self InputTextCallbackData) SetBufSize(v int32) {
	C.ImGuiInputTextCallbackData_SetBufSize(self.handle(), C.int(v))
}

func (self InputTextCallbackData) GetBufSize() int {
	return int(C.ImGuiInputTextCallbackData_GetBufSize(self.handle()))
}

func (self InputTextCallbackData) SetBufDirty(v bool) {
	C.ImGuiInputTextCallbackData_SetBufDirty(self.handle(), C.bool(v))
}

func (self InputTextCallbackData) GetBufDirty() bool {
	return C.ImGuiInputTextCallbackData_GetBufDirty(self.handle()) == C.bool(true)
}

func (self InputTextCallbackData) SetCursorPos(v int32) {
	C.ImGuiInputTextCallbackData_SetCursorPos(self.handle(), C.int(v))
}

func (self InputTextCallbackData) GetCursorPos() int {
	return int(C.ImGuiInputTextCallbackData_GetCursorPos(self.handle()))
}

func (self InputTextCallbackData) SetSelectionStart(v int32) {
	C.ImGuiInputTextCallbackData_SetSelectionStart(self.handle(), C.int(v))
}

func (self InputTextCallbackData) GetSelectionStart() int {
	return int(C.ImGuiInputTextCallbackData_GetSelectionStart(self.handle()))
}

func (self InputTextCallbackData) SetSelectionEnd(v int32) {
	C.ImGuiInputTextCallbackData_SetSelectionEnd(self.handle(), C.int(v))
}

func (self InputTextCallbackData) GetSelectionEnd() int {
	return int(C.ImGuiInputTextCallbackData_GetSelectionEnd(self.handle()))
}

func (self InputTextState) SetID(v ImGuiID) {
	C.ImGuiInputTextState_SetID(self.handle(), C.ImGuiID(v))
}

func (self InputTextState) GetID() ImGuiID {
	return ImGuiID(C.ImGuiInputTextState_GetID(self.handle()))
}

func (self InputTextState) SetCurLenW(v int32) {
	C.ImGuiInputTextState_SetCurLenW(self.handle(), C.int(v))
}

func (self InputTextState) GetCurLenW() int {
	return int(C.ImGuiInputTextState_GetCurLenW(self.handle()))
}

func (self InputTextState) SetCurLenA(v int32) {
	C.ImGuiInputTextState_SetCurLenA(self.handle(), C.int(v))
}

func (self InputTextState) GetCurLenA() int {
	return int(C.ImGuiInputTextState_GetCurLenA(self.handle()))
}

func (self InputTextState) SetTextAIsValid(v bool) {
	C.ImGuiInputTextState_SetTextAIsValid(self.handle(), C.bool(v))
}

func (self InputTextState) GetTextAIsValid() bool {
	return C.ImGuiInputTextState_GetTextAIsValid(self.handle()) == C.bool(true)
}

func (self InputTextState) SetBufCapacityA(v int32) {
	C.ImGuiInputTextState_SetBufCapacityA(self.handle(), C.int(v))
}

func (self InputTextState) GetBufCapacityA() int {
	return int(C.ImGuiInputTextState_GetBufCapacityA(self.handle()))
}

func (self InputTextState) SetScrollX(v float32) {
	C.ImGuiInputTextState_SetScrollX(self.handle(), C.float(v))
}

func (self InputTextState) GetScrollX() float32 {
	return float32(C.ImGuiInputTextState_GetScrollX(self.handle()))
}

func (self InputTextState) SetCursorAnim(v float32) {
	C.ImGuiInputTextState_SetCursorAnim(self.handle(), C.float(v))
}

func (self InputTextState) GetCursorAnim() float32 {
	return float32(C.ImGuiInputTextState_GetCursorAnim(self.handle()))
}

func (self InputTextState) SetCursorFollow(v bool) {
	C.ImGuiInputTextState_SetCursorFollow(self.handle(), C.bool(v))
}

func (self InputTextState) GetCursorFollow() bool {
	return C.ImGuiInputTextState_GetCursorFollow(self.handle()) == C.bool(true)
}

func (self InputTextState) SetSelectedAllMouseLock(v bool) {
	C.ImGuiInputTextState_SetSelectedAllMouseLock(self.handle(), C.bool(v))
}

func (self InputTextState) GetSelectedAllMouseLock() bool {
	return C.ImGuiInputTextState_GetSelectedAllMouseLock(self.handle()) == C.bool(true)
}

func (self InputTextState) SetEdited(v bool) {
	C.ImGuiInputTextState_SetEdited(self.handle(), C.bool(v))
}

func (self InputTextState) GetEdited() bool {
	return C.ImGuiInputTextState_GetEdited(self.handle()) == C.bool(true)
}

func (self InputTextState) SetFlags(v InputTextFlags) {
	C.ImGuiInputTextState_SetFlags(self.handle(), C.ImGuiInputTextFlags(v))
}

func (self InputTextState) GetFlags() InputTextFlags {
	return InputTextFlags(C.ImGuiInputTextState_GetFlags(self.handle()))
}

func (self KeyData) SetDown(v bool) {
	C.ImGuiKeyData_SetDown(self.handle(), C.bool(v))
}

func (self KeyData) GetDown() bool {
	return C.ImGuiKeyData_GetDown(self.handle()) == C.bool(true)
}

func (self KeyData) SetDownDuration(v float32) {
	C.ImGuiKeyData_SetDownDuration(self.handle(), C.float(v))
}

func (self KeyData) GetDownDuration() float32 {
	return float32(C.ImGuiKeyData_GetDownDuration(self.handle()))
}

func (self KeyData) SetDownDurationPrev(v float32) {
	C.ImGuiKeyData_SetDownDurationPrev(self.handle(), C.float(v))
}

func (self KeyData) GetDownDurationPrev() float32 {
	return float32(C.ImGuiKeyData_GetDownDurationPrev(self.handle()))
}

func (self KeyData) SetAnalogValue(v float32) {
	C.ImGuiKeyData_SetAnalogValue(self.handle(), C.float(v))
}

func (self KeyData) GetAnalogValue() float32 {
	return float32(C.ImGuiKeyData_GetAnalogValue(self.handle()))
}

func (self LastItemData) SetID(v ImGuiID) {
	C.ImGuiLastItemData_SetID(self.handle(), C.ImGuiID(v))
}

func (self LastItemData) GetID() ImGuiID {
	return ImGuiID(C.ImGuiLastItemData_GetID(self.handle()))
}

func (self LastItemData) SetInFlags(v ItemFlags) {
	C.ImGuiLastItemData_SetInFlags(self.handle(), C.ImGuiItemFlags(v))
}

func (self LastItemData) GetInFlags() ItemFlags {
	return ItemFlags(C.ImGuiLastItemData_GetInFlags(self.handle()))
}

func (self LastItemData) SetStatusFlags(v ItemStatusFlags) {
	C.ImGuiLastItemData_SetStatusFlags(self.handle(), C.ImGuiItemStatusFlags(v))
}

func (self LastItemData) GetStatusFlags() ItemStatusFlags {
	return ItemStatusFlags(C.ImGuiLastItemData_GetStatusFlags(self.handle()))
}

func (self LastItemData) SetRect(v Rect) {
	C.ImGuiLastItemData_SetRect(self.handle(), v.toC())
}

func (self LastItemData) GetRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiLastItemData_GetRect(self.handle()))
	return *out
}

func (self LastItemData) SetNavRect(v Rect) {
	C.ImGuiLastItemData_SetNavRect(self.handle(), v.toC())
}

func (self LastItemData) GetNavRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiLastItemData_GetNavRect(self.handle()))
	return *out
}

func (self LastItemData) SetDisplayRect(v Rect) {
	C.ImGuiLastItemData_SetDisplayRect(self.handle(), v.toC())
}

func (self LastItemData) GetDisplayRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiLastItemData_GetDisplayRect(self.handle()))
	return *out
}

func (self ListClipper) SetDisplayStart(v int32) {
	C.ImGuiListClipper_SetDisplayStart(self.handle(), C.int(v))
}

func (self ListClipper) GetDisplayStart() int {
	return int(C.ImGuiListClipper_GetDisplayStart(self.handle()))
}

func (self ListClipper) SetDisplayEnd(v int32) {
	C.ImGuiListClipper_SetDisplayEnd(self.handle(), C.int(v))
}

func (self ListClipper) GetDisplayEnd() int {
	return int(C.ImGuiListClipper_GetDisplayEnd(self.handle()))
}

func (self ListClipper) SetItemsCount(v int32) {
	C.ImGuiListClipper_SetItemsCount(self.handle(), C.int(v))
}

func (self ListClipper) GetItemsCount() int {
	return int(C.ImGuiListClipper_GetItemsCount(self.handle()))
}

func (self ListClipper) SetItemsHeight(v float32) {
	C.ImGuiListClipper_SetItemsHeight(self.handle(), C.float(v))
}

func (self ListClipper) GetItemsHeight() float32 {
	return float32(C.ImGuiListClipper_GetItemsHeight(self.handle()))
}

func (self ListClipper) SetStartPosY(v float32) {
	C.ImGuiListClipper_SetStartPosY(self.handle(), C.float(v))
}

func (self ListClipper) GetStartPosY() float32 {
	return float32(C.ImGuiListClipper_GetStartPosY(self.handle()))
}

func (self ListClipper) SetTempData(v unsafe.Pointer) {
	C.ImGuiListClipper_SetTempData(self.handle(), v)
}

func (self ListClipper) GetTempData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiListClipper_GetTempData(self.handle()))
}

func (self ListClipperData) SetListClipper(v ListClipper) {
	C.ImGuiListClipperData_SetListClipper(self.handle(), v.handle())
}

func (self ListClipperData) GetListClipper() ListClipper {
	return (ListClipper)(unsafe.Pointer(C.ImGuiListClipperData_GetListClipper(self.handle())))
}

func (self ListClipperData) SetLossynessOffset(v float32) {
	C.ImGuiListClipperData_SetLossynessOffset(self.handle(), C.float(v))
}

func (self ListClipperData) GetLossynessOffset() float32 {
	return float32(C.ImGuiListClipperData_GetLossynessOffset(self.handle()))
}

func (self ListClipperData) SetStepNo(v int32) {
	C.ImGuiListClipperData_SetStepNo(self.handle(), C.int(v))
}

func (self ListClipperData) GetStepNo() int {
	return int(C.ImGuiListClipperData_GetStepNo(self.handle()))
}

func (self ListClipperData) SetItemsFrozen(v int32) {
	C.ImGuiListClipperData_SetItemsFrozen(self.handle(), C.int(v))
}

func (self ListClipperData) GetItemsFrozen() int {
	return int(C.ImGuiListClipperData_GetItemsFrozen(self.handle()))
}

func (self ListClipperRange) SetMin(v int32) {
	C.ImGuiListClipperRange_SetMin(self.handle(), C.int(v))
}

func (self ListClipperRange) GetMin() int {
	return int(C.ImGuiListClipperRange_GetMin(self.handle()))
}

func (self ListClipperRange) SetMax(v int32) {
	C.ImGuiListClipperRange_SetMax(self.handle(), C.int(v))
}

func (self ListClipperRange) GetMax() int {
	return int(C.ImGuiListClipperRange_GetMax(self.handle()))
}

func (self ListClipperRange) SetPosToIndexConvert(v bool) {
	C.ImGuiListClipperRange_SetPosToIndexConvert(self.handle(), C.bool(v))
}

func (self ListClipperRange) GetPosToIndexConvert() bool {
	return C.ImGuiListClipperRange_GetPosToIndexConvert(self.handle()) == C.bool(true)
}

func (self ListClipperRange) SetPosToIndexOffsetMin(v int) {
	C.ImGuiListClipperRange_SetPosToIndexOffsetMin(self.handle(), C.ImS8(v))
}

func (self ListClipperRange) GetPosToIndexOffsetMin() int {
	return int(C.ImGuiListClipperRange_GetPosToIndexOffsetMin(self.handle()))
}

func (self ListClipperRange) SetPosToIndexOffsetMax(v int) {
	C.ImGuiListClipperRange_SetPosToIndexOffsetMax(self.handle(), C.ImS8(v))
}

func (self ListClipperRange) GetPosToIndexOffsetMax() int {
	return int(C.ImGuiListClipperRange_GetPosToIndexOffsetMax(self.handle()))
}

func (self MenuColumns) SetTotalWidth(v uint32) {
	C.ImGuiMenuColumns_SetTotalWidth(self.handle(), C.ImU32(v))
}

func (self MenuColumns) GetTotalWidth() uint32 {
	return uint32(C.ImGuiMenuColumns_GetTotalWidth(self.handle()))
}

func (self MenuColumns) SetNextTotalWidth(v uint32) {
	C.ImGuiMenuColumns_SetNextTotalWidth(self.handle(), C.ImU32(v))
}

func (self MenuColumns) GetNextTotalWidth() uint32 {
	return uint32(C.ImGuiMenuColumns_GetNextTotalWidth(self.handle()))
}

func (self MenuColumns) SetSpacing(v uint) {
	C.ImGuiMenuColumns_SetSpacing(self.handle(), C.ImU16(v))
}

func (self MenuColumns) GetSpacing() uint32 {
	return uint32(C.ImGuiMenuColumns_GetSpacing(self.handle()))
}

func (self MenuColumns) SetOffsetIcon(v uint) {
	C.ImGuiMenuColumns_SetOffsetIcon(self.handle(), C.ImU16(v))
}

func (self MenuColumns) GetOffsetIcon() uint32 {
	return uint32(C.ImGuiMenuColumns_GetOffsetIcon(self.handle()))
}

func (self MenuColumns) SetOffsetLabel(v uint) {
	C.ImGuiMenuColumns_SetOffsetLabel(self.handle(), C.ImU16(v))
}

func (self MenuColumns) GetOffsetLabel() uint32 {
	return uint32(C.ImGuiMenuColumns_GetOffsetLabel(self.handle()))
}

func (self MenuColumns) SetOffsetShortcut(v uint) {
	C.ImGuiMenuColumns_SetOffsetShortcut(self.handle(), C.ImU16(v))
}

func (self MenuColumns) GetOffsetShortcut() uint32 {
	return uint32(C.ImGuiMenuColumns_GetOffsetShortcut(self.handle()))
}

func (self MenuColumns) SetOffsetMark(v uint) {
	C.ImGuiMenuColumns_SetOffsetMark(self.handle(), C.ImU16(v))
}

func (self MenuColumns) GetOffsetMark() uint32 {
	return uint32(C.ImGuiMenuColumns_GetOffsetMark(self.handle()))
}

func (self MetricsConfig) SetShowDebugLog(v bool) {
	C.ImGuiMetricsConfig_SetShowDebugLog(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowDebugLog() bool {
	return C.ImGuiMetricsConfig_GetShowDebugLog(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowStackTool(v bool) {
	C.ImGuiMetricsConfig_SetShowStackTool(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowStackTool() bool {
	return C.ImGuiMetricsConfig_GetShowStackTool(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowWindowsRects(v bool) {
	C.ImGuiMetricsConfig_SetShowWindowsRects(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowWindowsRects() bool {
	return C.ImGuiMetricsConfig_GetShowWindowsRects(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowWindowsBeginOrder(v bool) {
	C.ImGuiMetricsConfig_SetShowWindowsBeginOrder(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowWindowsBeginOrder() bool {
	return C.ImGuiMetricsConfig_GetShowWindowsBeginOrder(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowTablesRects(v bool) {
	C.ImGuiMetricsConfig_SetShowTablesRects(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowTablesRects() bool {
	return C.ImGuiMetricsConfig_GetShowTablesRects(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowDrawCmdMesh(v bool) {
	C.ImGuiMetricsConfig_SetShowDrawCmdMesh(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowDrawCmdMesh() bool {
	return C.ImGuiMetricsConfig_GetShowDrawCmdMesh(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowDrawCmdBoundingBoxes(v bool) {
	C.ImGuiMetricsConfig_SetShowDrawCmdBoundingBoxes(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowDrawCmdBoundingBoxes() bool {
	return C.ImGuiMetricsConfig_GetShowDrawCmdBoundingBoxes(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowDockingNodes(v bool) {
	C.ImGuiMetricsConfig_SetShowDockingNodes(self.handle(), C.bool(v))
}

func (self MetricsConfig) GetShowDockingNodes() bool {
	return C.ImGuiMetricsConfig_GetShowDockingNodes(self.handle()) == C.bool(true)
}

func (self MetricsConfig) SetShowWindowsRectsType(v int32) {
	C.ImGuiMetricsConfig_SetShowWindowsRectsType(self.handle(), C.int(v))
}

func (self MetricsConfig) GetShowWindowsRectsType() int {
	return int(C.ImGuiMetricsConfig_GetShowWindowsRectsType(self.handle()))
}

func (self MetricsConfig) SetShowTablesRectsType(v int32) {
	C.ImGuiMetricsConfig_SetShowTablesRectsType(self.handle(), C.int(v))
}

func (self MetricsConfig) GetShowTablesRectsType() int {
	return int(C.ImGuiMetricsConfig_GetShowTablesRectsType(self.handle()))
}

func (self NavItemData) SetWindow(v Window) {
	C.ImGuiNavItemData_SetWindow(self.handle(), v.handle())
}

func (self NavItemData) GetWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiNavItemData_GetWindow(self.handle())))
}

func (self NavItemData) SetID(v ImGuiID) {
	C.ImGuiNavItemData_SetID(self.handle(), C.ImGuiID(v))
}

func (self NavItemData) GetID() ImGuiID {
	return ImGuiID(C.ImGuiNavItemData_GetID(self.handle()))
}

func (self NavItemData) SetFocusScopeId(v ImGuiID) {
	C.ImGuiNavItemData_SetFocusScopeId(self.handle(), C.ImGuiID(v))
}

func (self NavItemData) GetFocusScopeId() ImGuiID {
	return ImGuiID(C.ImGuiNavItemData_GetFocusScopeId(self.handle()))
}

func (self NavItemData) SetRectRel(v Rect) {
	C.ImGuiNavItemData_SetRectRel(self.handle(), v.toC())
}

func (self NavItemData) GetRectRel() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiNavItemData_GetRectRel(self.handle()))
	return *out
}

func (self NavItemData) SetInFlags(v ItemFlags) {
	C.ImGuiNavItemData_SetInFlags(self.handle(), C.ImGuiItemFlags(v))
}

func (self NavItemData) GetInFlags() ItemFlags {
	return ItemFlags(C.ImGuiNavItemData_GetInFlags(self.handle()))
}

func (self NavItemData) SetDistBox(v float32) {
	C.ImGuiNavItemData_SetDistBox(self.handle(), C.float(v))
}

func (self NavItemData) GetDistBox() float32 {
	return float32(C.ImGuiNavItemData_GetDistBox(self.handle()))
}

func (self NavItemData) SetDistCenter(v float32) {
	C.ImGuiNavItemData_SetDistCenter(self.handle(), C.float(v))
}

func (self NavItemData) GetDistCenter() float32 {
	return float32(C.ImGuiNavItemData_GetDistCenter(self.handle()))
}

func (self NavItemData) SetDistAxial(v float32) {
	C.ImGuiNavItemData_SetDistAxial(self.handle(), C.float(v))
}

func (self NavItemData) GetDistAxial() float32 {
	return float32(C.ImGuiNavItemData_GetDistAxial(self.handle()))
}

func (self NextItemData) SetFlags(v NextItemDataFlags) {
	C.ImGuiNextItemData_SetFlags(self.handle(), C.ImGuiNextItemDataFlags(v))
}

func (self NextItemData) GetFlags() NextItemDataFlags {
	return NextItemDataFlags(C.ImGuiNextItemData_GetFlags(self.handle()))
}

func (self NextItemData) SetWidth(v float32) {
	C.ImGuiNextItemData_SetWidth(self.handle(), C.float(v))
}

func (self NextItemData) GetWidth() float32 {
	return float32(C.ImGuiNextItemData_GetWidth(self.handle()))
}

func (self NextItemData) SetFocusScopeId(v ImGuiID) {
	C.ImGuiNextItemData_SetFocusScopeId(self.handle(), C.ImGuiID(v))
}

func (self NextItemData) GetFocusScopeId() ImGuiID {
	return ImGuiID(C.ImGuiNextItemData_GetFocusScopeId(self.handle()))
}

func (self NextItemData) SetOpenCond(v Cond) {
	C.ImGuiNextItemData_SetOpenCond(self.handle(), C.ImGuiCond(v))
}

func (self NextItemData) GetOpenCond() Cond {
	return Cond(C.ImGuiNextItemData_GetOpenCond(self.handle()))
}

func (self NextItemData) SetOpenVal(v bool) {
	C.ImGuiNextItemData_SetOpenVal(self.handle(), C.bool(v))
}

func (self NextItemData) GetOpenVal() bool {
	return C.ImGuiNextItemData_GetOpenVal(self.handle()) == C.bool(true)
}

func (self NextWindowData) SetFlags(v NextWindowDataFlags) {
	C.ImGuiNextWindowData_SetFlags(self.handle(), C.ImGuiNextWindowDataFlags(v))
}

func (self NextWindowData) GetFlags() NextWindowDataFlags {
	return NextWindowDataFlags(C.ImGuiNextWindowData_GetFlags(self.handle()))
}

func (self NextWindowData) SetPosCond(v Cond) {
	C.ImGuiNextWindowData_SetPosCond(self.handle(), C.ImGuiCond(v))
}

func (self NextWindowData) GetPosCond() Cond {
	return Cond(C.ImGuiNextWindowData_GetPosCond(self.handle()))
}

func (self NextWindowData) SetSizeCond(v Cond) {
	C.ImGuiNextWindowData_SetSizeCond(self.handle(), C.ImGuiCond(v))
}

func (self NextWindowData) GetSizeCond() Cond {
	return Cond(C.ImGuiNextWindowData_GetSizeCond(self.handle()))
}

func (self NextWindowData) SetCollapsedCond(v Cond) {
	C.ImGuiNextWindowData_SetCollapsedCond(self.handle(), C.ImGuiCond(v))
}

func (self NextWindowData) GetCollapsedCond() Cond {
	return Cond(C.ImGuiNextWindowData_GetCollapsedCond(self.handle()))
}

func (self NextWindowData) SetDockCond(v Cond) {
	C.ImGuiNextWindowData_SetDockCond(self.handle(), C.ImGuiCond(v))
}

func (self NextWindowData) GetDockCond() Cond {
	return Cond(C.ImGuiNextWindowData_GetDockCond(self.handle()))
}

func (self NextWindowData) SetPosVal(v Vec2) {
	C.ImGuiNextWindowData_SetPosVal(self.handle(), v.toC())
}

func (self NextWindowData) GetPosVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetPosVal(self.handle()))
	return *out
}

func (self NextWindowData) SetPosPivotVal(v Vec2) {
	C.ImGuiNextWindowData_SetPosPivotVal(self.handle(), v.toC())
}

func (self NextWindowData) GetPosPivotVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetPosPivotVal(self.handle()))
	return *out
}

func (self NextWindowData) SetSizeVal(v Vec2) {
	C.ImGuiNextWindowData_SetSizeVal(self.handle(), v.toC())
}

func (self NextWindowData) GetSizeVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetSizeVal(self.handle()))
	return *out
}

func (self NextWindowData) SetContentSizeVal(v Vec2) {
	C.ImGuiNextWindowData_SetContentSizeVal(self.handle(), v.toC())
}

func (self NextWindowData) GetContentSizeVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetContentSizeVal(self.handle()))
	return *out
}

func (self NextWindowData) SetScrollVal(v Vec2) {
	C.ImGuiNextWindowData_SetScrollVal(self.handle(), v.toC())
}

func (self NextWindowData) GetScrollVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetScrollVal(self.handle()))
	return *out
}

func (self NextWindowData) SetPosUndock(v bool) {
	C.ImGuiNextWindowData_SetPosUndock(self.handle(), C.bool(v))
}

func (self NextWindowData) GetPosUndock() bool {
	return C.ImGuiNextWindowData_GetPosUndock(self.handle()) == C.bool(true)
}

func (self NextWindowData) SetCollapsedVal(v bool) {
	C.ImGuiNextWindowData_SetCollapsedVal(self.handle(), C.bool(v))
}

func (self NextWindowData) GetCollapsedVal() bool {
	return C.ImGuiNextWindowData_GetCollapsedVal(self.handle()) == C.bool(true)
}

func (self NextWindowData) SetSizeConstraintRect(v Rect) {
	C.ImGuiNextWindowData_SetSizeConstraintRect(self.handle(), v.toC())
}

func (self NextWindowData) GetSizeConstraintRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiNextWindowData_GetSizeConstraintRect(self.handle()))
	return *out
}

func (self NextWindowData) SetSizeCallbackUserData(v unsafe.Pointer) {
	C.ImGuiNextWindowData_SetSizeCallbackUserData(self.handle(), v)
}

func (self NextWindowData) GetSizeCallbackUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiNextWindowData_GetSizeCallbackUserData(self.handle()))
}

func (self NextWindowData) SetBgAlphaVal(v float32) {
	C.ImGuiNextWindowData_SetBgAlphaVal(self.handle(), C.float(v))
}

func (self NextWindowData) GetBgAlphaVal() float32 {
	return float32(C.ImGuiNextWindowData_GetBgAlphaVal(self.handle()))
}

func (self NextWindowData) SetViewportId(v ImGuiID) {
	C.ImGuiNextWindowData_SetViewportId(self.handle(), C.ImGuiID(v))
}

func (self NextWindowData) GetViewportId() ImGuiID {
	return ImGuiID(C.ImGuiNextWindowData_GetViewportId(self.handle()))
}

func (self NextWindowData) SetDockId(v ImGuiID) {
	C.ImGuiNextWindowData_SetDockId(self.handle(), C.ImGuiID(v))
}

func (self NextWindowData) GetDockId() ImGuiID {
	return ImGuiID(C.ImGuiNextWindowData_GetDockId(self.handle()))
}

func (self NextWindowData) GetWindowClass() WindowClass {
	return newWindowClassFromC(C.ImGuiNextWindowData_GetWindowClass(self.handle()))
}

func (self NextWindowData) SetMenuBarOffsetMinVal(v Vec2) {
	C.ImGuiNextWindowData_SetMenuBarOffsetMinVal(self.handle(), v.toC())
}

func (self NextWindowData) GetMenuBarOffsetMinVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiNextWindowData_GetMenuBarOffsetMinVal(self.handle()))
	return *out
}

func (self OldColumnData) SetOffsetNorm(v float32) {
	C.ImGuiOldColumnData_SetOffsetNorm(self.handle(), C.float(v))
}

func (self OldColumnData) GetOffsetNorm() float32 {
	return float32(C.ImGuiOldColumnData_GetOffsetNorm(self.handle()))
}

func (self OldColumnData) SetOffsetNormBeforeResize(v float32) {
	C.ImGuiOldColumnData_SetOffsetNormBeforeResize(self.handle(), C.float(v))
}

func (self OldColumnData) GetOffsetNormBeforeResize() float32 {
	return float32(C.ImGuiOldColumnData_GetOffsetNormBeforeResize(self.handle()))
}

func (self OldColumnData) SetFlags(v OldColumnFlags) {
	C.ImGuiOldColumnData_SetFlags(self.handle(), C.ImGuiOldColumnFlags(v))
}

func (self OldColumnData) GetFlags() OldColumnFlags {
	return OldColumnFlags(C.ImGuiOldColumnData_GetFlags(self.handle()))
}

func (self OldColumnData) SetClipRect(v Rect) {
	C.ImGuiOldColumnData_SetClipRect(self.handle(), v.toC())
}

func (self OldColumnData) GetClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiOldColumnData_GetClipRect(self.handle()))
	return *out
}

func (self OldColumns) SetID(v ImGuiID) {
	C.ImGuiOldColumns_SetID(self.handle(), C.ImGuiID(v))
}

func (self OldColumns) GetID() ImGuiID {
	return ImGuiID(C.ImGuiOldColumns_GetID(self.handle()))
}

func (self OldColumns) SetFlags(v OldColumnFlags) {
	C.ImGuiOldColumns_SetFlags(self.handle(), C.ImGuiOldColumnFlags(v))
}

func (self OldColumns) GetFlags() OldColumnFlags {
	return OldColumnFlags(C.ImGuiOldColumns_GetFlags(self.handle()))
}

func (self OldColumns) SetIsFirstFrame(v bool) {
	C.ImGuiOldColumns_SetIsFirstFrame(self.handle(), C.bool(v))
}

func (self OldColumns) GetIsFirstFrame() bool {
	return C.ImGuiOldColumns_GetIsFirstFrame(self.handle()) == C.bool(true)
}

func (self OldColumns) SetIsBeingResized(v bool) {
	C.ImGuiOldColumns_SetIsBeingResized(self.handle(), C.bool(v))
}

func (self OldColumns) GetIsBeingResized() bool {
	return C.ImGuiOldColumns_GetIsBeingResized(self.handle()) == C.bool(true)
}

func (self OldColumns) SetCurrent(v int32) {
	C.ImGuiOldColumns_SetCurrent(self.handle(), C.int(v))
}

func (self OldColumns) GetCurrent() int {
	return int(C.ImGuiOldColumns_GetCurrent(self.handle()))
}

func (self OldColumns) SetCount(v int32) {
	C.ImGuiOldColumns_SetCount(self.handle(), C.int(v))
}

func (self OldColumns) GetCount() int {
	return int(C.ImGuiOldColumns_GetCount(self.handle()))
}

func (self OldColumns) SetOffMinX(v float32) {
	C.ImGuiOldColumns_SetOffMinX(self.handle(), C.float(v))
}

func (self OldColumns) GetOffMinX() float32 {
	return float32(C.ImGuiOldColumns_GetOffMinX(self.handle()))
}

func (self OldColumns) SetOffMaxX(v float32) {
	C.ImGuiOldColumns_SetOffMaxX(self.handle(), C.float(v))
}

func (self OldColumns) GetOffMaxX() float32 {
	return float32(C.ImGuiOldColumns_GetOffMaxX(self.handle()))
}

func (self OldColumns) SetLineMinY(v float32) {
	C.ImGuiOldColumns_SetLineMinY(self.handle(), C.float(v))
}

func (self OldColumns) GetLineMinY() float32 {
	return float32(C.ImGuiOldColumns_GetLineMinY(self.handle()))
}

func (self OldColumns) SetLineMaxY(v float32) {
	C.ImGuiOldColumns_SetLineMaxY(self.handle(), C.float(v))
}

func (self OldColumns) GetLineMaxY() float32 {
	return float32(C.ImGuiOldColumns_GetLineMaxY(self.handle()))
}

func (self OldColumns) SetHostCursorPosY(v float32) {
	C.ImGuiOldColumns_SetHostCursorPosY(self.handle(), C.float(v))
}

func (self OldColumns) GetHostCursorPosY() float32 {
	return float32(C.ImGuiOldColumns_GetHostCursorPosY(self.handle()))
}

func (self OldColumns) SetHostCursorMaxPosX(v float32) {
	C.ImGuiOldColumns_SetHostCursorMaxPosX(self.handle(), C.float(v))
}

func (self OldColumns) GetHostCursorMaxPosX() float32 {
	return float32(C.ImGuiOldColumns_GetHostCursorMaxPosX(self.handle()))
}

func (self OldColumns) SetHostInitialClipRect(v Rect) {
	C.ImGuiOldColumns_SetHostInitialClipRect(self.handle(), v.toC())
}

func (self OldColumns) GetHostInitialClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiOldColumns_GetHostInitialClipRect(self.handle()))
	return *out
}

func (self OldColumns) SetHostBackupClipRect(v Rect) {
	C.ImGuiOldColumns_SetHostBackupClipRect(self.handle(), v.toC())
}

func (self OldColumns) GetHostBackupClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiOldColumns_GetHostBackupClipRect(self.handle()))
	return *out
}

func (self OldColumns) SetHostBackupParentWorkRect(v Rect) {
	C.ImGuiOldColumns_SetHostBackupParentWorkRect(self.handle(), v.toC())
}

func (self OldColumns) GetHostBackupParentWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiOldColumns_GetHostBackupParentWorkRect(self.handle()))
	return *out
}

func (self OldColumns) GetSplitter() DrawListSplitter {
	return newDrawListSplitterFromC(C.ImGuiOldColumns_GetSplitter(self.handle()))
}

func (self OnceUponAFrame) SetRefFrame(v int32) {
	C.ImGuiOnceUponAFrame_SetRefFrame(self.handle(), C.int(v))
}

func (self OnceUponAFrame) GetRefFrame() int {
	return int(C.ImGuiOnceUponAFrame_GetRefFrame(self.handle()))
}

func (self Payload) SetData(v unsafe.Pointer) {
	C.ImGuiPayload_SetData(self.handle(), v)
}

func (self Payload) GetData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiPayload_GetData(self.handle()))
}

func (self Payload) SetDataSize(v int32) {
	C.ImGuiPayload_SetDataSize(self.handle(), C.int(v))
}

func (self Payload) GetDataSize() int {
	return int(C.ImGuiPayload_GetDataSize(self.handle()))
}

func (self Payload) SetSourceId(v ImGuiID) {
	C.ImGuiPayload_SetSourceId(self.handle(), C.ImGuiID(v))
}

func (self Payload) GetSourceId() ImGuiID {
	return ImGuiID(C.ImGuiPayload_GetSourceId(self.handle()))
}

func (self Payload) SetSourceParentId(v ImGuiID) {
	C.ImGuiPayload_SetSourceParentId(self.handle(), C.ImGuiID(v))
}

func (self Payload) GetSourceParentId() ImGuiID {
	return ImGuiID(C.ImGuiPayload_GetSourceParentId(self.handle()))
}

func (self Payload) SetDataFrameCount(v int32) {
	C.ImGuiPayload_SetDataFrameCount(self.handle(), C.int(v))
}

func (self Payload) GetDataFrameCount() int {
	return int(C.ImGuiPayload_GetDataFrameCount(self.handle()))
}

func (self Payload) SetPreview(v bool) {
	C.ImGuiPayload_SetPreview(self.handle(), C.bool(v))
}

func (self Payload) GetPreview() bool {
	return C.ImGuiPayload_GetPreview(self.handle()) == C.bool(true)
}

func (self Payload) SetDelivery(v bool) {
	C.ImGuiPayload_SetDelivery(self.handle(), C.bool(v))
}

func (self Payload) GetDelivery() bool {
	return C.ImGuiPayload_GetDelivery(self.handle()) == C.bool(true)
}

func (self PlatformImeData) SetWantVisible(v bool) {
	C.ImGuiPlatformImeData_SetWantVisible(self.handle(), C.bool(v))
}

func (self PlatformImeData) GetWantVisible() bool {
	return C.ImGuiPlatformImeData_GetWantVisible(self.handle()) == C.bool(true)
}

func (self PlatformImeData) SetInputPos(v Vec2) {
	C.ImGuiPlatformImeData_SetInputPos(self.handle(), v.toC())
}

func (self PlatformImeData) GetInputPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPlatformImeData_GetInputPos(self.handle()))
	return *out
}

func (self PlatformImeData) SetInputLineHeight(v float32) {
	C.ImGuiPlatformImeData_SetInputLineHeight(self.handle(), C.float(v))
}

func (self PlatformImeData) GetInputLineHeight() float32 {
	return float32(C.ImGuiPlatformImeData_GetInputLineHeight(self.handle()))
}

func (self PlatformMonitor) SetMainPos(v Vec2) {
	C.ImGuiPlatformMonitor_SetMainPos(self.handle(), v.toC())
}

func (self PlatformMonitor) GetMainPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPlatformMonitor_GetMainPos(self.handle()))
	return *out
}

func (self PlatformMonitor) SetMainSize(v Vec2) {
	C.ImGuiPlatformMonitor_SetMainSize(self.handle(), v.toC())
}

func (self PlatformMonitor) GetMainSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPlatformMonitor_GetMainSize(self.handle()))
	return *out
}

func (self PlatformMonitor) SetWorkPos(v Vec2) {
	C.ImGuiPlatformMonitor_SetWorkPos(self.handle(), v.toC())
}

func (self PlatformMonitor) GetWorkPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPlatformMonitor_GetWorkPos(self.handle()))
	return *out
}

func (self PlatformMonitor) SetWorkSize(v Vec2) {
	C.ImGuiPlatformMonitor_SetWorkSize(self.handle(), v.toC())
}

func (self PlatformMonitor) GetWorkSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPlatformMonitor_GetWorkSize(self.handle()))
	return *out
}

func (self PlatformMonitor) SetDpiScale(v float32) {
	C.ImGuiPlatformMonitor_SetDpiScale(self.handle(), C.float(v))
}

func (self PlatformMonitor) GetDpiScale() float32 {
	return float32(C.ImGuiPlatformMonitor_GetDpiScale(self.handle()))
}

func (self PopupData) SetPopupId(v ImGuiID) {
	C.ImGuiPopupData_SetPopupId(self.handle(), C.ImGuiID(v))
}

func (self PopupData) GetPopupId() ImGuiID {
	return ImGuiID(C.ImGuiPopupData_GetPopupId(self.handle()))
}

func (self PopupData) SetWindow(v Window) {
	C.ImGuiPopupData_SetWindow(self.handle(), v.handle())
}

func (self PopupData) GetWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiPopupData_GetWindow(self.handle())))
}

func (self PopupData) SetSourceWindow(v Window) {
	C.ImGuiPopupData_SetSourceWindow(self.handle(), v.handle())
}

func (self PopupData) GetSourceWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiPopupData_GetSourceWindow(self.handle())))
}

func (self PopupData) SetParentNavLayer(v int32) {
	C.ImGuiPopupData_SetParentNavLayer(self.handle(), C.int(v))
}

func (self PopupData) GetParentNavLayer() int {
	return int(C.ImGuiPopupData_GetParentNavLayer(self.handle()))
}

func (self PopupData) SetOpenFrameCount(v int32) {
	C.ImGuiPopupData_SetOpenFrameCount(self.handle(), C.int(v))
}

func (self PopupData) GetOpenFrameCount() int {
	return int(C.ImGuiPopupData_GetOpenFrameCount(self.handle()))
}

func (self PopupData) SetOpenParentId(v ImGuiID) {
	C.ImGuiPopupData_SetOpenParentId(self.handle(), C.ImGuiID(v))
}

func (self PopupData) GetOpenParentId() ImGuiID {
	return ImGuiID(C.ImGuiPopupData_GetOpenParentId(self.handle()))
}

func (self PopupData) SetOpenPopupPos(v Vec2) {
	C.ImGuiPopupData_SetOpenPopupPos(self.handle(), v.toC())
}

func (self PopupData) GetOpenPopupPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPopupData_GetOpenPopupPos(self.handle()))
	return *out
}

func (self PopupData) SetOpenMousePos(v Vec2) {
	C.ImGuiPopupData_SetOpenMousePos(self.handle(), v.toC())
}

func (self PopupData) GetOpenMousePos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiPopupData_GetOpenMousePos(self.handle()))
	return *out
}

func (self PtrOrIndex) SetPtr(v unsafe.Pointer) {
	C.ImGuiPtrOrIndex_SetPtr(self.handle(), v)
}

func (self PtrOrIndex) GetPtr() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiPtrOrIndex_GetPtr(self.handle()))
}

func (self PtrOrIndex) SetIndex(v int32) {
	C.ImGuiPtrOrIndex_SetIndex(self.handle(), C.int(v))
}

func (self PtrOrIndex) GetIndex() int {
	return int(C.ImGuiPtrOrIndex_GetIndex(self.handle()))
}

func (self SettingsHandler) SetTypeName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiSettingsHandler_SetTypeName(self.handle(), vArg)
}

func (self SettingsHandler) GetTypeName() string {
	return C.GoString(C.ImGuiSettingsHandler_GetTypeName(self.handle()))
}

func (self SettingsHandler) SetTypeHash(v ImGuiID) {
	C.ImGuiSettingsHandler_SetTypeHash(self.handle(), C.ImGuiID(v))
}

func (self SettingsHandler) GetTypeHash() ImGuiID {
	return ImGuiID(C.ImGuiSettingsHandler_GetTypeHash(self.handle()))
}

func (self SettingsHandler) SetUserData(v unsafe.Pointer) {
	C.ImGuiSettingsHandler_SetUserData(self.handle(), v)
}

func (self SettingsHandler) GetUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiSettingsHandler_GetUserData(self.handle()))
}

func (self ShrinkWidthItem) SetIndex(v int32) {
	C.ImGuiShrinkWidthItem_SetIndex(self.handle(), C.int(v))
}

func (self ShrinkWidthItem) GetIndex() int {
	return int(C.ImGuiShrinkWidthItem_GetIndex(self.handle()))
}

func (self ShrinkWidthItem) SetWidth(v float32) {
	C.ImGuiShrinkWidthItem_SetWidth(self.handle(), C.float(v))
}

func (self ShrinkWidthItem) GetWidth() float32 {
	return float32(C.ImGuiShrinkWidthItem_GetWidth(self.handle()))
}

func (self ShrinkWidthItem) SetInitialWidth(v float32) {
	C.ImGuiShrinkWidthItem_SetInitialWidth(self.handle(), C.float(v))
}

func (self ShrinkWidthItem) GetInitialWidth() float32 {
	return float32(C.ImGuiShrinkWidthItem_GetInitialWidth(self.handle()))
}

func (self SizeCallbackData) SetUserData(v unsafe.Pointer) {
	C.ImGuiSizeCallbackData_SetUserData(self.handle(), v)
}

func (self SizeCallbackData) GetUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiSizeCallbackData_GetUserData(self.handle()))
}

func (self SizeCallbackData) SetPos(v Vec2) {
	C.ImGuiSizeCallbackData_SetPos(self.handle(), v.toC())
}

func (self SizeCallbackData) GetPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiSizeCallbackData_GetPos(self.handle()))
	return *out
}

func (self SizeCallbackData) SetCurrentSize(v Vec2) {
	C.ImGuiSizeCallbackData_SetCurrentSize(self.handle(), v.toC())
}

func (self SizeCallbackData) GetCurrentSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiSizeCallbackData_GetCurrentSize(self.handle()))
	return *out
}

func (self SizeCallbackData) SetDesiredSize(v Vec2) {
	C.ImGuiSizeCallbackData_SetDesiredSize(self.handle(), v.toC())
}

func (self SizeCallbackData) GetDesiredSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiSizeCallbackData_GetDesiredSize(self.handle()))
	return *out
}

func (self StackLevelInfo) SetID(v ImGuiID) {
	C.ImGuiStackLevelInfo_SetID(self.handle(), C.ImGuiID(v))
}

func (self StackLevelInfo) GetID() ImGuiID {
	return ImGuiID(C.ImGuiStackLevelInfo_GetID(self.handle()))
}

func (self StackLevelInfo) SetQueryFrameCount(v int) {
	C.ImGuiStackLevelInfo_SetQueryFrameCount(self.handle(), C.ImS8(v))
}

func (self StackLevelInfo) GetQueryFrameCount() int {
	return int(C.ImGuiStackLevelInfo_GetQueryFrameCount(self.handle()))
}

func (self StackLevelInfo) SetQuerySuccess(v bool) {
	C.ImGuiStackLevelInfo_SetQuerySuccess(self.handle(), C.bool(v))
}

func (self StackLevelInfo) GetQuerySuccess() bool {
	return C.ImGuiStackLevelInfo_GetQuerySuccess(self.handle()) == C.bool(true)
}

func (self StackLevelInfo) SetDataType(v DataType) {
	C.ImGuiStackLevelInfo_SetDataType(self.handle(), C.ImGuiDataType(v))
}

func (self StackLevelInfo) GetDataType() DataType {
	return DataType(C.ImGuiStackLevelInfo_GetDataType(self.handle()))
}

func (self StackSizes) SetSizeOfIDStack(v int) {
	C.ImGuiStackSizes_SetSizeOfIDStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfIDStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfIDStack(self.handle()))
}

func (self StackSizes) SetSizeOfColorStack(v int) {
	C.ImGuiStackSizes_SetSizeOfColorStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfColorStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfColorStack(self.handle()))
}

func (self StackSizes) SetSizeOfStyleVarStack(v int) {
	C.ImGuiStackSizes_SetSizeOfStyleVarStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfStyleVarStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfStyleVarStack(self.handle()))
}

func (self StackSizes) SetSizeOfFontStack(v int) {
	C.ImGuiStackSizes_SetSizeOfFontStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfFontStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfFontStack(self.handle()))
}

func (self StackSizes) SetSizeOfFocusScopeStack(v int) {
	C.ImGuiStackSizes_SetSizeOfFocusScopeStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfFocusScopeStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfFocusScopeStack(self.handle()))
}

func (self StackSizes) SetSizeOfGroupStack(v int) {
	C.ImGuiStackSizes_SetSizeOfGroupStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfGroupStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfGroupStack(self.handle()))
}

func (self StackSizes) SetSizeOfItemFlagsStack(v int) {
	C.ImGuiStackSizes_SetSizeOfItemFlagsStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfItemFlagsStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfItemFlagsStack(self.handle()))
}

func (self StackSizes) SetSizeOfBeginPopupStack(v int) {
	C.ImGuiStackSizes_SetSizeOfBeginPopupStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfBeginPopupStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfBeginPopupStack(self.handle()))
}

func (self StackSizes) SetSizeOfDisabledStack(v int) {
	C.ImGuiStackSizes_SetSizeOfDisabledStack(self.handle(), C.short(v))
}

func (self StackSizes) GetSizeOfDisabledStack() int {
	return int(C.ImGuiStackSizes_GetSizeOfDisabledStack(self.handle()))
}

func (self StackTool) SetLastActiveFrame(v int32) {
	C.ImGuiStackTool_SetLastActiveFrame(self.handle(), C.int(v))
}

func (self StackTool) GetLastActiveFrame() int {
	return int(C.ImGuiStackTool_GetLastActiveFrame(self.handle()))
}

func (self StackTool) SetStackLevel(v int32) {
	C.ImGuiStackTool_SetStackLevel(self.handle(), C.int(v))
}

func (self StackTool) GetStackLevel() int {
	return int(C.ImGuiStackTool_GetStackLevel(self.handle()))
}

func (self StackTool) SetQueryId(v ImGuiID) {
	C.ImGuiStackTool_SetQueryId(self.handle(), C.ImGuiID(v))
}

func (self StackTool) GetQueryId() ImGuiID {
	return ImGuiID(C.ImGuiStackTool_GetQueryId(self.handle()))
}

func (self StackTool) SetCopyToClipboardOnCtrlC(v bool) {
	C.ImGuiStackTool_SetCopyToClipboardOnCtrlC(self.handle(), C.bool(v))
}

func (self StackTool) GetCopyToClipboardOnCtrlC() bool {
	return C.ImGuiStackTool_GetCopyToClipboardOnCtrlC(self.handle()) == C.bool(true)
}

func (self StackTool) SetCopyToClipboardLastTime(v float32) {
	C.ImGuiStackTool_SetCopyToClipboardLastTime(self.handle(), C.float(v))
}

func (self StackTool) GetCopyToClipboardLastTime() float32 {
	return float32(C.ImGuiStackTool_GetCopyToClipboardLastTime(self.handle()))
}

func (self StoragePair) Setkey(v ImGuiID) {
	C.ImGuiStoragePair_Setkey(self.handle(), C.ImGuiID(v))
}

func (self StoragePair) Getkey() ImGuiID {
	return ImGuiID(C.ImGuiStoragePair_Getkey(self.handle()))
}

func (self Style) SetAlpha(v float32) {
	C.ImGuiStyle_SetAlpha(self.handle(), C.float(v))
}

func (self Style) GetAlpha() float32 {
	return float32(C.ImGuiStyle_GetAlpha(self.handle()))
}

func (self Style) SetDisabledAlpha(v float32) {
	C.ImGuiStyle_SetDisabledAlpha(self.handle(), C.float(v))
}

func (self Style) GetDisabledAlpha() float32 {
	return float32(C.ImGuiStyle_GetDisabledAlpha(self.handle()))
}

func (self Style) SetWindowPadding(v Vec2) {
	C.ImGuiStyle_SetWindowPadding(self.handle(), v.toC())
}

func (self Style) GetWindowPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetWindowPadding(self.handle()))
	return *out
}

func (self Style) SetWindowRounding(v float32) {
	C.ImGuiStyle_SetWindowRounding(self.handle(), C.float(v))
}

func (self Style) GetWindowRounding() float32 {
	return float32(C.ImGuiStyle_GetWindowRounding(self.handle()))
}

func (self Style) SetWindowBorderSize(v float32) {
	C.ImGuiStyle_SetWindowBorderSize(self.handle(), C.float(v))
}

func (self Style) GetWindowBorderSize() float32 {
	return float32(C.ImGuiStyle_GetWindowBorderSize(self.handle()))
}

func (self Style) SetWindowMinSize(v Vec2) {
	C.ImGuiStyle_SetWindowMinSize(self.handle(), v.toC())
}

func (self Style) GetWindowMinSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetWindowMinSize(self.handle()))
	return *out
}

func (self Style) SetWindowTitleAlign(v Vec2) {
	C.ImGuiStyle_SetWindowTitleAlign(self.handle(), v.toC())
}

func (self Style) GetWindowTitleAlign() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetWindowTitleAlign(self.handle()))
	return *out
}

func (self Style) SetWindowMenuButtonPosition(v Dir) {
	C.ImGuiStyle_SetWindowMenuButtonPosition(self.handle(), C.ImGuiDir(v))
}

func (self Style) GetWindowMenuButtonPosition() Dir {
	return Dir(C.ImGuiStyle_GetWindowMenuButtonPosition(self.handle()))
}

func (self Style) SetChildRounding(v float32) {
	C.ImGuiStyle_SetChildRounding(self.handle(), C.float(v))
}

func (self Style) GetChildRounding() float32 {
	return float32(C.ImGuiStyle_GetChildRounding(self.handle()))
}

func (self Style) SetChildBorderSize(v float32) {
	C.ImGuiStyle_SetChildBorderSize(self.handle(), C.float(v))
}

func (self Style) GetChildBorderSize() float32 {
	return float32(C.ImGuiStyle_GetChildBorderSize(self.handle()))
}

func (self Style) SetPopupRounding(v float32) {
	C.ImGuiStyle_SetPopupRounding(self.handle(), C.float(v))
}

func (self Style) GetPopupRounding() float32 {
	return float32(C.ImGuiStyle_GetPopupRounding(self.handle()))
}

func (self Style) SetPopupBorderSize(v float32) {
	C.ImGuiStyle_SetPopupBorderSize(self.handle(), C.float(v))
}

func (self Style) GetPopupBorderSize() float32 {
	return float32(C.ImGuiStyle_GetPopupBorderSize(self.handle()))
}

func (self Style) SetFramePadding(v Vec2) {
	C.ImGuiStyle_SetFramePadding(self.handle(), v.toC())
}

func (self Style) GetFramePadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetFramePadding(self.handle()))
	return *out
}

func (self Style) SetFrameRounding(v float32) {
	C.ImGuiStyle_SetFrameRounding(self.handle(), C.float(v))
}

func (self Style) GetFrameRounding() float32 {
	return float32(C.ImGuiStyle_GetFrameRounding(self.handle()))
}

func (self Style) SetFrameBorderSize(v float32) {
	C.ImGuiStyle_SetFrameBorderSize(self.handle(), C.float(v))
}

func (self Style) GetFrameBorderSize() float32 {
	return float32(C.ImGuiStyle_GetFrameBorderSize(self.handle()))
}

func (self Style) SetItemSpacing(v Vec2) {
	C.ImGuiStyle_SetItemSpacing(self.handle(), v.toC())
}

func (self Style) GetItemSpacing() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetItemSpacing(self.handle()))
	return *out
}

func (self Style) SetItemInnerSpacing(v Vec2) {
	C.ImGuiStyle_SetItemInnerSpacing(self.handle(), v.toC())
}

func (self Style) GetItemInnerSpacing() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetItemInnerSpacing(self.handle()))
	return *out
}

func (self Style) SetCellPadding(v Vec2) {
	C.ImGuiStyle_SetCellPadding(self.handle(), v.toC())
}

func (self Style) GetCellPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetCellPadding(self.handle()))
	return *out
}

func (self Style) SetTouchExtraPadding(v Vec2) {
	C.ImGuiStyle_SetTouchExtraPadding(self.handle(), v.toC())
}

func (self Style) GetTouchExtraPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetTouchExtraPadding(self.handle()))
	return *out
}

func (self Style) SetIndentSpacing(v float32) {
	C.ImGuiStyle_SetIndentSpacing(self.handle(), C.float(v))
}

func (self Style) GetIndentSpacing() float32 {
	return float32(C.ImGuiStyle_GetIndentSpacing(self.handle()))
}

func (self Style) SetColumnsMinSpacing(v float32) {
	C.ImGuiStyle_SetColumnsMinSpacing(self.handle(), C.float(v))
}

func (self Style) GetColumnsMinSpacing() float32 {
	return float32(C.ImGuiStyle_GetColumnsMinSpacing(self.handle()))
}

func (self Style) SetScrollbarSize(v float32) {
	C.ImGuiStyle_SetScrollbarSize(self.handle(), C.float(v))
}

func (self Style) GetScrollbarSize() float32 {
	return float32(C.ImGuiStyle_GetScrollbarSize(self.handle()))
}

func (self Style) SetScrollbarRounding(v float32) {
	C.ImGuiStyle_SetScrollbarRounding(self.handle(), C.float(v))
}

func (self Style) GetScrollbarRounding() float32 {
	return float32(C.ImGuiStyle_GetScrollbarRounding(self.handle()))
}

func (self Style) SetGrabMinSize(v float32) {
	C.ImGuiStyle_SetGrabMinSize(self.handle(), C.float(v))
}

func (self Style) GetGrabMinSize() float32 {
	return float32(C.ImGuiStyle_GetGrabMinSize(self.handle()))
}

func (self Style) SetGrabRounding(v float32) {
	C.ImGuiStyle_SetGrabRounding(self.handle(), C.float(v))
}

func (self Style) GetGrabRounding() float32 {
	return float32(C.ImGuiStyle_GetGrabRounding(self.handle()))
}

func (self Style) SetLogSliderDeadzone(v float32) {
	C.ImGuiStyle_SetLogSliderDeadzone(self.handle(), C.float(v))
}

func (self Style) GetLogSliderDeadzone() float32 {
	return float32(C.ImGuiStyle_GetLogSliderDeadzone(self.handle()))
}

func (self Style) SetTabRounding(v float32) {
	C.ImGuiStyle_SetTabRounding(self.handle(), C.float(v))
}

func (self Style) GetTabRounding() float32 {
	return float32(C.ImGuiStyle_GetTabRounding(self.handle()))
}

func (self Style) SetTabBorderSize(v float32) {
	C.ImGuiStyle_SetTabBorderSize(self.handle(), C.float(v))
}

func (self Style) GetTabBorderSize() float32 {
	return float32(C.ImGuiStyle_GetTabBorderSize(self.handle()))
}

func (self Style) SetTabMinWidthForCloseButton(v float32) {
	C.ImGuiStyle_SetTabMinWidthForCloseButton(self.handle(), C.float(v))
}

func (self Style) GetTabMinWidthForCloseButton() float32 {
	return float32(C.ImGuiStyle_GetTabMinWidthForCloseButton(self.handle()))
}

func (self Style) SetColorButtonPosition(v Dir) {
	C.ImGuiStyle_SetColorButtonPosition(self.handle(), C.ImGuiDir(v))
}

func (self Style) GetColorButtonPosition() Dir {
	return Dir(C.ImGuiStyle_GetColorButtonPosition(self.handle()))
}

func (self Style) SetButtonTextAlign(v Vec2) {
	C.ImGuiStyle_SetButtonTextAlign(self.handle(), v.toC())
}

func (self Style) GetButtonTextAlign() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetButtonTextAlign(self.handle()))
	return *out
}

func (self Style) SetSelectableTextAlign(v Vec2) {
	C.ImGuiStyle_SetSelectableTextAlign(self.handle(), v.toC())
}

func (self Style) GetSelectableTextAlign() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetSelectableTextAlign(self.handle()))
	return *out
}

func (self Style) SetDisplayWindowPadding(v Vec2) {
	C.ImGuiStyle_SetDisplayWindowPadding(self.handle(), v.toC())
}

func (self Style) GetDisplayWindowPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetDisplayWindowPadding(self.handle()))
	return *out
}

func (self Style) SetDisplaySafeAreaPadding(v Vec2) {
	C.ImGuiStyle_SetDisplaySafeAreaPadding(self.handle(), v.toC())
}

func (self Style) GetDisplaySafeAreaPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiStyle_GetDisplaySafeAreaPadding(self.handle()))
	return *out
}

func (self Style) SetMouseCursorScale(v float32) {
	C.ImGuiStyle_SetMouseCursorScale(self.handle(), C.float(v))
}

func (self Style) GetMouseCursorScale() float32 {
	return float32(C.ImGuiStyle_GetMouseCursorScale(self.handle()))
}

func (self Style) SetAntiAliasedLines(v bool) {
	C.ImGuiStyle_SetAntiAliasedLines(self.handle(), C.bool(v))
}

func (self Style) GetAntiAliasedLines() bool {
	return C.ImGuiStyle_GetAntiAliasedLines(self.handle()) == C.bool(true)
}

func (self Style) SetAntiAliasedLinesUseTex(v bool) {
	C.ImGuiStyle_SetAntiAliasedLinesUseTex(self.handle(), C.bool(v))
}

func (self Style) GetAntiAliasedLinesUseTex() bool {
	return C.ImGuiStyle_GetAntiAliasedLinesUseTex(self.handle()) == C.bool(true)
}

func (self Style) SetAntiAliasedFill(v bool) {
	C.ImGuiStyle_SetAntiAliasedFill(self.handle(), C.bool(v))
}

func (self Style) GetAntiAliasedFill() bool {
	return C.ImGuiStyle_GetAntiAliasedFill(self.handle()) == C.bool(true)
}

func (self Style) SetCurveTessellationTol(v float32) {
	C.ImGuiStyle_SetCurveTessellationTol(self.handle(), C.float(v))
}

func (self Style) GetCurveTessellationTol() float32 {
	return float32(C.ImGuiStyle_GetCurveTessellationTol(self.handle()))
}

func (self Style) SetCircleTessellationMaxError(v float32) {
	C.ImGuiStyle_SetCircleTessellationMaxError(self.handle(), C.float(v))
}

func (self Style) GetCircleTessellationMaxError() float32 {
	return float32(C.ImGuiStyle_GetCircleTessellationMaxError(self.handle()))
}

func (self StyleMod) SetVarIdx(v StyleVar) {
	C.ImGuiStyleMod_SetVarIdx(self.handle(), C.ImGuiStyleVar(v))
}

func (self StyleMod) GetVarIdx() StyleVar {
	return StyleVar(C.ImGuiStyleMod_GetVarIdx(self.handle()))
}

func (self TabBar) SetFlags(v TabBarFlags) {
	C.ImGuiTabBar_SetFlags(self.handle(), C.ImGuiTabBarFlags(v))
}

func (self TabBar) GetFlags() TabBarFlags {
	return TabBarFlags(C.ImGuiTabBar_GetFlags(self.handle()))
}

func (self TabBar) SetID(v ImGuiID) {
	C.ImGuiTabBar_SetID(self.handle(), C.ImGuiID(v))
}

func (self TabBar) GetID() ImGuiID {
	return ImGuiID(C.ImGuiTabBar_GetID(self.handle()))
}

func (self TabBar) SetSelectedTabId(v ImGuiID) {
	C.ImGuiTabBar_SetSelectedTabId(self.handle(), C.ImGuiID(v))
}

func (self TabBar) GetSelectedTabId() ImGuiID {
	return ImGuiID(C.ImGuiTabBar_GetSelectedTabId(self.handle()))
}

func (self TabBar) SetNextSelectedTabId(v ImGuiID) {
	C.ImGuiTabBar_SetNextSelectedTabId(self.handle(), C.ImGuiID(v))
}

func (self TabBar) GetNextSelectedTabId() ImGuiID {
	return ImGuiID(C.ImGuiTabBar_GetNextSelectedTabId(self.handle()))
}

func (self TabBar) SetVisibleTabId(v ImGuiID) {
	C.ImGuiTabBar_SetVisibleTabId(self.handle(), C.ImGuiID(v))
}

func (self TabBar) GetVisibleTabId() ImGuiID {
	return ImGuiID(C.ImGuiTabBar_GetVisibleTabId(self.handle()))
}

func (self TabBar) SetCurrFrameVisible(v int32) {
	C.ImGuiTabBar_SetCurrFrameVisible(self.handle(), C.int(v))
}

func (self TabBar) GetCurrFrameVisible() int {
	return int(C.ImGuiTabBar_GetCurrFrameVisible(self.handle()))
}

func (self TabBar) SetPrevFrameVisible(v int32) {
	C.ImGuiTabBar_SetPrevFrameVisible(self.handle(), C.int(v))
}

func (self TabBar) GetPrevFrameVisible() int {
	return int(C.ImGuiTabBar_GetPrevFrameVisible(self.handle()))
}

func (self TabBar) SetBarRect(v Rect) {
	C.ImGuiTabBar_SetBarRect(self.handle(), v.toC())
}

func (self TabBar) GetBarRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTabBar_GetBarRect(self.handle()))
	return *out
}

func (self TabBar) SetCurrTabsContentsHeight(v float32) {
	C.ImGuiTabBar_SetCurrTabsContentsHeight(self.handle(), C.float(v))
}

func (self TabBar) GetCurrTabsContentsHeight() float32 {
	return float32(C.ImGuiTabBar_GetCurrTabsContentsHeight(self.handle()))
}

func (self TabBar) SetPrevTabsContentsHeight(v float32) {
	C.ImGuiTabBar_SetPrevTabsContentsHeight(self.handle(), C.float(v))
}

func (self TabBar) GetPrevTabsContentsHeight() float32 {
	return float32(C.ImGuiTabBar_GetPrevTabsContentsHeight(self.handle()))
}

func (self TabBar) SetWidthAllTabs(v float32) {
	C.ImGuiTabBar_SetWidthAllTabs(self.handle(), C.float(v))
}

func (self TabBar) GetWidthAllTabs() float32 {
	return float32(C.ImGuiTabBar_GetWidthAllTabs(self.handle()))
}

func (self TabBar) SetWidthAllTabsIdeal(v float32) {
	C.ImGuiTabBar_SetWidthAllTabsIdeal(self.handle(), C.float(v))
}

func (self TabBar) GetWidthAllTabsIdeal() float32 {
	return float32(C.ImGuiTabBar_GetWidthAllTabsIdeal(self.handle()))
}

func (self TabBar) SetScrollingAnim(v float32) {
	C.ImGuiTabBar_SetScrollingAnim(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingAnim() float32 {
	return float32(C.ImGuiTabBar_GetScrollingAnim(self.handle()))
}

func (self TabBar) SetScrollingTarget(v float32) {
	C.ImGuiTabBar_SetScrollingTarget(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingTarget() float32 {
	return float32(C.ImGuiTabBar_GetScrollingTarget(self.handle()))
}

func (self TabBar) SetScrollingTargetDistToVisibility(v float32) {
	C.ImGuiTabBar_SetScrollingTargetDistToVisibility(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingTargetDistToVisibility() float32 {
	return float32(C.ImGuiTabBar_GetScrollingTargetDistToVisibility(self.handle()))
}

func (self TabBar) SetScrollingSpeed(v float32) {
	C.ImGuiTabBar_SetScrollingSpeed(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingSpeed() float32 {
	return float32(C.ImGuiTabBar_GetScrollingSpeed(self.handle()))
}

func (self TabBar) SetScrollingRectMinX(v float32) {
	C.ImGuiTabBar_SetScrollingRectMinX(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingRectMinX() float32 {
	return float32(C.ImGuiTabBar_GetScrollingRectMinX(self.handle()))
}

func (self TabBar) SetScrollingRectMaxX(v float32) {
	C.ImGuiTabBar_SetScrollingRectMaxX(self.handle(), C.float(v))
}

func (self TabBar) GetScrollingRectMaxX() float32 {
	return float32(C.ImGuiTabBar_GetScrollingRectMaxX(self.handle()))
}

func (self TabBar) SetReorderRequestTabId(v ImGuiID) {
	C.ImGuiTabBar_SetReorderRequestTabId(self.handle(), C.ImGuiID(v))
}

func (self TabBar) GetReorderRequestTabId() ImGuiID {
	return ImGuiID(C.ImGuiTabBar_GetReorderRequestTabId(self.handle()))
}

func (self TabBar) SetReorderRequestOffset(v int) {
	C.ImGuiTabBar_SetReorderRequestOffset(self.handle(), C.ImS16(v))
}

func (self TabBar) GetReorderRequestOffset() int {
	return int(C.ImGuiTabBar_GetReorderRequestOffset(self.handle()))
}

func (self TabBar) SetBeginCount(v int) {
	C.ImGuiTabBar_SetBeginCount(self.handle(), C.ImS8(v))
}

func (self TabBar) GetBeginCount() int {
	return int(C.ImGuiTabBar_GetBeginCount(self.handle()))
}

func (self TabBar) SetWantLayout(v bool) {
	C.ImGuiTabBar_SetWantLayout(self.handle(), C.bool(v))
}

func (self TabBar) GetWantLayout() bool {
	return C.ImGuiTabBar_GetWantLayout(self.handle()) == C.bool(true)
}

func (self TabBar) SetVisibleTabWasSubmitted(v bool) {
	C.ImGuiTabBar_SetVisibleTabWasSubmitted(self.handle(), C.bool(v))
}

func (self TabBar) GetVisibleTabWasSubmitted() bool {
	return C.ImGuiTabBar_GetVisibleTabWasSubmitted(self.handle()) == C.bool(true)
}

func (self TabBar) SetTabsAddedNew(v bool) {
	C.ImGuiTabBar_SetTabsAddedNew(self.handle(), C.bool(v))
}

func (self TabBar) GetTabsAddedNew() bool {
	return C.ImGuiTabBar_GetTabsAddedNew(self.handle()) == C.bool(true)
}

func (self TabBar) SetTabsActiveCount(v int) {
	C.ImGuiTabBar_SetTabsActiveCount(self.handle(), C.ImS16(v))
}

func (self TabBar) GetTabsActiveCount() int {
	return int(C.ImGuiTabBar_GetTabsActiveCount(self.handle()))
}

func (self TabBar) SetLastTabItemIdx(v int) {
	C.ImGuiTabBar_SetLastTabItemIdx(self.handle(), C.ImS16(v))
}

func (self TabBar) GetLastTabItemIdx() int {
	return int(C.ImGuiTabBar_GetLastTabItemIdx(self.handle()))
}

func (self TabBar) SetItemSpacingY(v float32) {
	C.ImGuiTabBar_SetItemSpacingY(self.handle(), C.float(v))
}

func (self TabBar) GetItemSpacingY() float32 {
	return float32(C.ImGuiTabBar_GetItemSpacingY(self.handle()))
}

func (self TabBar) SetFramePadding(v Vec2) {
	C.ImGuiTabBar_SetFramePadding(self.handle(), v.toC())
}

func (self TabBar) GetFramePadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTabBar_GetFramePadding(self.handle()))
	return *out
}

func (self TabBar) SetBackupCursorPos(v Vec2) {
	C.ImGuiTabBar_SetBackupCursorPos(self.handle(), v.toC())
}

func (self TabBar) GetBackupCursorPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTabBar_GetBackupCursorPos(self.handle()))
	return *out
}

func (self TabBar) GetTabsNames() TextBuffer {
	return newTextBufferFromC(C.ImGuiTabBar_GetTabsNames(self.handle()))
}

func (self TabItem) SetID(v ImGuiID) {
	C.ImGuiTabItem_SetID(self.handle(), C.ImGuiID(v))
}

func (self TabItem) GetID() ImGuiID {
	return ImGuiID(C.ImGuiTabItem_GetID(self.handle()))
}

func (self TabItem) SetFlags(v TabItemFlags) {
	C.ImGuiTabItem_SetFlags(self.handle(), C.ImGuiTabItemFlags(v))
}

func (self TabItem) GetFlags() TabItemFlags {
	return TabItemFlags(C.ImGuiTabItem_GetFlags(self.handle()))
}

func (self TabItem) SetWindow(v Window) {
	C.ImGuiTabItem_SetWindow(self.handle(), v.handle())
}

func (self TabItem) GetWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiTabItem_GetWindow(self.handle())))
}

func (self TabItem) SetLastFrameVisible(v int32) {
	C.ImGuiTabItem_SetLastFrameVisible(self.handle(), C.int(v))
}

func (self TabItem) GetLastFrameVisible() int {
	return int(C.ImGuiTabItem_GetLastFrameVisible(self.handle()))
}

func (self TabItem) SetLastFrameSelected(v int32) {
	C.ImGuiTabItem_SetLastFrameSelected(self.handle(), C.int(v))
}

func (self TabItem) GetLastFrameSelected() int {
	return int(C.ImGuiTabItem_GetLastFrameSelected(self.handle()))
}

func (self TabItem) SetOffset(v float32) {
	C.ImGuiTabItem_SetOffset(self.handle(), C.float(v))
}

func (self TabItem) GetOffset() float32 {
	return float32(C.ImGuiTabItem_GetOffset(self.handle()))
}

func (self TabItem) SetWidth(v float32) {
	C.ImGuiTabItem_SetWidth(self.handle(), C.float(v))
}

func (self TabItem) GetWidth() float32 {
	return float32(C.ImGuiTabItem_GetWidth(self.handle()))
}

func (self TabItem) SetContentWidth(v float32) {
	C.ImGuiTabItem_SetContentWidth(self.handle(), C.float(v))
}

func (self TabItem) GetContentWidth() float32 {
	return float32(C.ImGuiTabItem_GetContentWidth(self.handle()))
}

func (self TabItem) SetRequestedWidth(v float32) {
	C.ImGuiTabItem_SetRequestedWidth(self.handle(), C.float(v))
}

func (self TabItem) GetRequestedWidth() float32 {
	return float32(C.ImGuiTabItem_GetRequestedWidth(self.handle()))
}

func (self TabItem) SetNameOffset(v int) {
	C.ImGuiTabItem_SetNameOffset(self.handle(), C.ImS32(v))
}

func (self TabItem) GetNameOffset() int {
	return int(C.ImGuiTabItem_GetNameOffset(self.handle()))
}

func (self TabItem) SetBeginOrder(v int) {
	C.ImGuiTabItem_SetBeginOrder(self.handle(), C.ImS16(v))
}

func (self TabItem) GetBeginOrder() int {
	return int(C.ImGuiTabItem_GetBeginOrder(self.handle()))
}

func (self TabItem) SetIndexDuringLayout(v int) {
	C.ImGuiTabItem_SetIndexDuringLayout(self.handle(), C.ImS16(v))
}

func (self TabItem) GetIndexDuringLayout() int {
	return int(C.ImGuiTabItem_GetIndexDuringLayout(self.handle()))
}

func (self TabItem) SetWantClose(v bool) {
	C.ImGuiTabItem_SetWantClose(self.handle(), C.bool(v))
}

func (self TabItem) GetWantClose() bool {
	return C.ImGuiTabItem_GetWantClose(self.handle()) == C.bool(true)
}

func (self Table) SetID(v ImGuiID) {
	C.ImGuiTable_SetID(self.handle(), C.ImGuiID(v))
}

func (self Table) GetID() ImGuiID {
	return ImGuiID(C.ImGuiTable_GetID(self.handle()))
}

func (self Table) SetFlags(v TableFlags) {
	C.ImGuiTable_SetFlags(self.handle(), C.ImGuiTableFlags(v))
}

func (self Table) GetFlags() TableFlags {
	return TableFlags(C.ImGuiTable_GetFlags(self.handle()))
}

func (self Table) SetRawData(v unsafe.Pointer) {
	C.ImGuiTable_SetRawData(self.handle(), v)
}

func (self Table) GetRawData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiTable_GetRawData(self.handle()))
}

func (self Table) SetTempData(v TableTempData) {
	C.ImGuiTable_SetTempData(self.handle(), v.handle())
}

func (self Table) GetTempData() TableTempData {
	return (TableTempData)(unsafe.Pointer(C.ImGuiTable_GetTempData(self.handle())))
}

func (self Table) SetEnabledMaskByDisplayOrder(v uint64) {
	C.ImGuiTable_SetEnabledMaskByDisplayOrder(self.handle(), C.ImU64(v))
}

func (self Table) GetEnabledMaskByDisplayOrder() uint64 {
	return uint64(C.ImGuiTable_GetEnabledMaskByDisplayOrder(self.handle()))
}

func (self Table) SetEnabledMaskByIndex(v uint64) {
	C.ImGuiTable_SetEnabledMaskByIndex(self.handle(), C.ImU64(v))
}

func (self Table) GetEnabledMaskByIndex() uint64 {
	return uint64(C.ImGuiTable_GetEnabledMaskByIndex(self.handle()))
}

func (self Table) SetVisibleMaskByIndex(v uint64) {
	C.ImGuiTable_SetVisibleMaskByIndex(self.handle(), C.ImU64(v))
}

func (self Table) GetVisibleMaskByIndex() uint64 {
	return uint64(C.ImGuiTable_GetVisibleMaskByIndex(self.handle()))
}

func (self Table) SetRequestOutputMaskByIndex(v uint64) {
	C.ImGuiTable_SetRequestOutputMaskByIndex(self.handle(), C.ImU64(v))
}

func (self Table) GetRequestOutputMaskByIndex() uint64 {
	return uint64(C.ImGuiTable_GetRequestOutputMaskByIndex(self.handle()))
}

func (self Table) SetSettingsLoadedFlags(v TableFlags) {
	C.ImGuiTable_SetSettingsLoadedFlags(self.handle(), C.ImGuiTableFlags(v))
}

func (self Table) GetSettingsLoadedFlags() TableFlags {
	return TableFlags(C.ImGuiTable_GetSettingsLoadedFlags(self.handle()))
}

func (self Table) SetSettingsOffset(v int32) {
	C.ImGuiTable_SetSettingsOffset(self.handle(), C.int(v))
}

func (self Table) GetSettingsOffset() int {
	return int(C.ImGuiTable_GetSettingsOffset(self.handle()))
}

func (self Table) SetLastFrameActive(v int32) {
	C.ImGuiTable_SetLastFrameActive(self.handle(), C.int(v))
}

func (self Table) GetLastFrameActive() int {
	return int(C.ImGuiTable_GetLastFrameActive(self.handle()))
}

func (self Table) SetColumnsCount(v int32) {
	C.ImGuiTable_SetColumnsCount(self.handle(), C.int(v))
}

func (self Table) GetColumnsCount() int {
	return int(C.ImGuiTable_GetColumnsCount(self.handle()))
}

func (self Table) SetCurrentRow(v int32) {
	C.ImGuiTable_SetCurrentRow(self.handle(), C.int(v))
}

func (self Table) GetCurrentRow() int {
	return int(C.ImGuiTable_GetCurrentRow(self.handle()))
}

func (self Table) SetCurrentColumn(v int32) {
	C.ImGuiTable_SetCurrentColumn(self.handle(), C.int(v))
}

func (self Table) GetCurrentColumn() int {
	return int(C.ImGuiTable_GetCurrentColumn(self.handle()))
}

func (self Table) SetInstanceCurrent(v int) {
	C.ImGuiTable_SetInstanceCurrent(self.handle(), C.ImS16(v))
}

func (self Table) GetInstanceCurrent() int {
	return int(C.ImGuiTable_GetInstanceCurrent(self.handle()))
}

func (self Table) SetInstanceInteracted(v int) {
	C.ImGuiTable_SetInstanceInteracted(self.handle(), C.ImS16(v))
}

func (self Table) GetInstanceInteracted() int {
	return int(C.ImGuiTable_GetInstanceInteracted(self.handle()))
}

func (self Table) SetRowPosY1(v float32) {
	C.ImGuiTable_SetRowPosY1(self.handle(), C.float(v))
}

func (self Table) GetRowPosY1() float32 {
	return float32(C.ImGuiTable_GetRowPosY1(self.handle()))
}

func (self Table) SetRowPosY2(v float32) {
	C.ImGuiTable_SetRowPosY2(self.handle(), C.float(v))
}

func (self Table) GetRowPosY2() float32 {
	return float32(C.ImGuiTable_GetRowPosY2(self.handle()))
}

func (self Table) SetRowMinHeight(v float32) {
	C.ImGuiTable_SetRowMinHeight(self.handle(), C.float(v))
}

func (self Table) GetRowMinHeight() float32 {
	return float32(C.ImGuiTable_GetRowMinHeight(self.handle()))
}

func (self Table) SetRowTextBaseline(v float32) {
	C.ImGuiTable_SetRowTextBaseline(self.handle(), C.float(v))
}

func (self Table) GetRowTextBaseline() float32 {
	return float32(C.ImGuiTable_GetRowTextBaseline(self.handle()))
}

func (self Table) SetRowIndentOffsetX(v float32) {
	C.ImGuiTable_SetRowIndentOffsetX(self.handle(), C.float(v))
}

func (self Table) GetRowIndentOffsetX() float32 {
	return float32(C.ImGuiTable_GetRowIndentOffsetX(self.handle()))
}

func (self Table) SetRowFlags(v TableRowFlags) {
	C.ImGuiTable_SetRowFlags(self.handle(), C.ImGuiTableRowFlags(v))
}

func (self Table) GetRowFlags() TableRowFlags {
	return TableRowFlags(C.ImGuiTable_GetRowFlags(self.handle()))
}

func (self Table) SetLastRowFlags(v TableRowFlags) {
	C.ImGuiTable_SetLastRowFlags(self.handle(), C.ImGuiTableRowFlags(v))
}

func (self Table) GetLastRowFlags() TableRowFlags {
	return TableRowFlags(C.ImGuiTable_GetLastRowFlags(self.handle()))
}

func (self Table) SetRowBgColorCounter(v int32) {
	C.ImGuiTable_SetRowBgColorCounter(self.handle(), C.int(v))
}

func (self Table) GetRowBgColorCounter() int {
	return int(C.ImGuiTable_GetRowBgColorCounter(self.handle()))
}

func (self Table) SetBorderColorStrong(v uint32) {
	C.ImGuiTable_SetBorderColorStrong(self.handle(), C.ImU32(v))
}

func (self Table) GetBorderColorStrong() uint32 {
	return uint32(C.ImGuiTable_GetBorderColorStrong(self.handle()))
}

func (self Table) SetBorderColorLight(v uint32) {
	C.ImGuiTable_SetBorderColorLight(self.handle(), C.ImU32(v))
}

func (self Table) GetBorderColorLight() uint32 {
	return uint32(C.ImGuiTable_GetBorderColorLight(self.handle()))
}

func (self Table) SetBorderX1(v float32) {
	C.ImGuiTable_SetBorderX1(self.handle(), C.float(v))
}

func (self Table) GetBorderX1() float32 {
	return float32(C.ImGuiTable_GetBorderX1(self.handle()))
}

func (self Table) SetBorderX2(v float32) {
	C.ImGuiTable_SetBorderX2(self.handle(), C.float(v))
}

func (self Table) GetBorderX2() float32 {
	return float32(C.ImGuiTable_GetBorderX2(self.handle()))
}

func (self Table) SetHostIndentX(v float32) {
	C.ImGuiTable_SetHostIndentX(self.handle(), C.float(v))
}

func (self Table) GetHostIndentX() float32 {
	return float32(C.ImGuiTable_GetHostIndentX(self.handle()))
}

func (self Table) SetMinColumnWidth(v float32) {
	C.ImGuiTable_SetMinColumnWidth(self.handle(), C.float(v))
}

func (self Table) GetMinColumnWidth() float32 {
	return float32(C.ImGuiTable_GetMinColumnWidth(self.handle()))
}

func (self Table) SetOuterPaddingX(v float32) {
	C.ImGuiTable_SetOuterPaddingX(self.handle(), C.float(v))
}

func (self Table) GetOuterPaddingX() float32 {
	return float32(C.ImGuiTable_GetOuterPaddingX(self.handle()))
}

func (self Table) SetCellPaddingX(v float32) {
	C.ImGuiTable_SetCellPaddingX(self.handle(), C.float(v))
}

func (self Table) GetCellPaddingX() float32 {
	return float32(C.ImGuiTable_GetCellPaddingX(self.handle()))
}

func (self Table) SetCellPaddingY(v float32) {
	C.ImGuiTable_SetCellPaddingY(self.handle(), C.float(v))
}

func (self Table) GetCellPaddingY() float32 {
	return float32(C.ImGuiTable_GetCellPaddingY(self.handle()))
}

func (self Table) SetCellSpacingX1(v float32) {
	C.ImGuiTable_SetCellSpacingX1(self.handle(), C.float(v))
}

func (self Table) GetCellSpacingX1() float32 {
	return float32(C.ImGuiTable_GetCellSpacingX1(self.handle()))
}

func (self Table) SetCellSpacingX2(v float32) {
	C.ImGuiTable_SetCellSpacingX2(self.handle(), C.float(v))
}

func (self Table) GetCellSpacingX2() float32 {
	return float32(C.ImGuiTable_GetCellSpacingX2(self.handle()))
}

func (self Table) SetInnerWidth(v float32) {
	C.ImGuiTable_SetInnerWidth(self.handle(), C.float(v))
}

func (self Table) GetInnerWidth() float32 {
	return float32(C.ImGuiTable_GetInnerWidth(self.handle()))
}

func (self Table) SetColumnsGivenWidth(v float32) {
	C.ImGuiTable_SetColumnsGivenWidth(self.handle(), C.float(v))
}

func (self Table) GetColumnsGivenWidth() float32 {
	return float32(C.ImGuiTable_GetColumnsGivenWidth(self.handle()))
}

func (self Table) SetColumnsAutoFitWidth(v float32) {
	C.ImGuiTable_SetColumnsAutoFitWidth(self.handle(), C.float(v))
}

func (self Table) GetColumnsAutoFitWidth() float32 {
	return float32(C.ImGuiTable_GetColumnsAutoFitWidth(self.handle()))
}

func (self Table) SetColumnsStretchSumWeights(v float32) {
	C.ImGuiTable_SetColumnsStretchSumWeights(self.handle(), C.float(v))
}

func (self Table) GetColumnsStretchSumWeights() float32 {
	return float32(C.ImGuiTable_GetColumnsStretchSumWeights(self.handle()))
}

func (self Table) SetResizedColumnNextWidth(v float32) {
	C.ImGuiTable_SetResizedColumnNextWidth(self.handle(), C.float(v))
}

func (self Table) GetResizedColumnNextWidth() float32 {
	return float32(C.ImGuiTable_GetResizedColumnNextWidth(self.handle()))
}

func (self Table) SetResizeLockMinContentsX2(v float32) {
	C.ImGuiTable_SetResizeLockMinContentsX2(self.handle(), C.float(v))
}

func (self Table) GetResizeLockMinContentsX2() float32 {
	return float32(C.ImGuiTable_GetResizeLockMinContentsX2(self.handle()))
}

func (self Table) SetRefScale(v float32) {
	C.ImGuiTable_SetRefScale(self.handle(), C.float(v))
}

func (self Table) GetRefScale() float32 {
	return float32(C.ImGuiTable_GetRefScale(self.handle()))
}

func (self Table) SetOuterRect(v Rect) {
	C.ImGuiTable_SetOuterRect(self.handle(), v.toC())
}

func (self Table) GetOuterRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetOuterRect(self.handle()))
	return *out
}

func (self Table) SetInnerRect(v Rect) {
	C.ImGuiTable_SetInnerRect(self.handle(), v.toC())
}

func (self Table) GetInnerRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetInnerRect(self.handle()))
	return *out
}

func (self Table) SetWorkRect(v Rect) {
	C.ImGuiTable_SetWorkRect(self.handle(), v.toC())
}

func (self Table) GetWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetWorkRect(self.handle()))
	return *out
}

func (self Table) SetInnerClipRect(v Rect) {
	C.ImGuiTable_SetInnerClipRect(self.handle(), v.toC())
}

func (self Table) GetInnerClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetInnerClipRect(self.handle()))
	return *out
}

func (self Table) SetBgClipRect(v Rect) {
	C.ImGuiTable_SetBgClipRect(self.handle(), v.toC())
}

func (self Table) GetBgClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetBgClipRect(self.handle()))
	return *out
}

func (self Table) SetBg0ClipRectForDrawCmd(v Rect) {
	C.ImGuiTable_SetBg0ClipRectForDrawCmd(self.handle(), v.toC())
}

func (self Table) GetBg0ClipRectForDrawCmd() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetBg0ClipRectForDrawCmd(self.handle()))
	return *out
}

func (self Table) SetBg2ClipRectForDrawCmd(v Rect) {
	C.ImGuiTable_SetBg2ClipRectForDrawCmd(self.handle(), v.toC())
}

func (self Table) GetBg2ClipRectForDrawCmd() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetBg2ClipRectForDrawCmd(self.handle()))
	return *out
}

func (self Table) SetHostClipRect(v Rect) {
	C.ImGuiTable_SetHostClipRect(self.handle(), v.toC())
}

func (self Table) GetHostClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetHostClipRect(self.handle()))
	return *out
}

func (self Table) SetHostBackupInnerClipRect(v Rect) {
	C.ImGuiTable_SetHostBackupInnerClipRect(self.handle(), v.toC())
}

func (self Table) GetHostBackupInnerClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTable_GetHostBackupInnerClipRect(self.handle()))
	return *out
}

func (self Table) SetOuterWindow(v Window) {
	C.ImGuiTable_SetOuterWindow(self.handle(), v.handle())
}

func (self Table) GetOuterWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiTable_GetOuterWindow(self.handle())))
}

func (self Table) SetInnerWindow(v Window) {
	C.ImGuiTable_SetInnerWindow(self.handle(), v.handle())
}

func (self Table) GetInnerWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiTable_GetInnerWindow(self.handle())))
}

func (self Table) GetColumnsNames() TextBuffer {
	return newTextBufferFromC(C.ImGuiTable_GetColumnsNames(self.handle()))
}

func (self Table) SetDrawSplitter(v DrawListSplitter) {
	C.ImGuiTable_SetDrawSplitter(self.handle(), v.handle())
}

func (self Table) GetDrawSplitter() DrawListSplitter {
	return (DrawListSplitter)(unsafe.Pointer(C.ImGuiTable_GetDrawSplitter(self.handle())))
}

func (self Table) GetInstanceDataFirst() TableInstanceData {
	return newTableInstanceDataFromC(C.ImGuiTable_GetInstanceDataFirst(self.handle()))
}

func (self Table) GetSortSpecsSingle() TableColumnSortSpecs {
	return newTableColumnSortSpecsFromC(C.ImGuiTable_GetSortSpecsSingle(self.handle()))
}

func (self Table) GetSortSpecs() TableSortSpecs {
	return newTableSortSpecsFromC(C.ImGuiTable_GetSortSpecs(self.handle()))
}

func (self Table) SetSortSpecsCount(v TableColumnIdx) {
	C.ImGuiTable_SetSortSpecsCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetSortSpecsCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetSortSpecsCount(self.handle()))
}

func (self Table) SetColumnsEnabledCount(v TableColumnIdx) {
	C.ImGuiTable_SetColumnsEnabledCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetColumnsEnabledCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetColumnsEnabledCount(self.handle()))
}

func (self Table) SetColumnsEnabledFixedCount(v TableColumnIdx) {
	C.ImGuiTable_SetColumnsEnabledFixedCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetColumnsEnabledFixedCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetColumnsEnabledFixedCount(self.handle()))
}

func (self Table) SetDeclColumnsCount(v TableColumnIdx) {
	C.ImGuiTable_SetDeclColumnsCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetDeclColumnsCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetDeclColumnsCount(self.handle()))
}

func (self Table) SetHoveredColumnBody(v TableColumnIdx) {
	C.ImGuiTable_SetHoveredColumnBody(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetHoveredColumnBody() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetHoveredColumnBody(self.handle()))
}

func (self Table) SetHoveredColumnBorder(v TableColumnIdx) {
	C.ImGuiTable_SetHoveredColumnBorder(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetHoveredColumnBorder() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetHoveredColumnBorder(self.handle()))
}

func (self Table) SetAutoFitSingleColumn(v TableColumnIdx) {
	C.ImGuiTable_SetAutoFitSingleColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetAutoFitSingleColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetAutoFitSingleColumn(self.handle()))
}

func (self Table) SetResizedColumn(v TableColumnIdx) {
	C.ImGuiTable_SetResizedColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetResizedColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetResizedColumn(self.handle()))
}

func (self Table) SetLastResizedColumn(v TableColumnIdx) {
	C.ImGuiTable_SetLastResizedColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetLastResizedColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetLastResizedColumn(self.handle()))
}

func (self Table) SetHeldHeaderColumn(v TableColumnIdx) {
	C.ImGuiTable_SetHeldHeaderColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetHeldHeaderColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetHeldHeaderColumn(self.handle()))
}

func (self Table) SetReorderColumn(v TableColumnIdx) {
	C.ImGuiTable_SetReorderColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetReorderColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetReorderColumn(self.handle()))
}

func (self Table) SetReorderColumnDir(v TableColumnIdx) {
	C.ImGuiTable_SetReorderColumnDir(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetReorderColumnDir() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetReorderColumnDir(self.handle()))
}

func (self Table) SetLeftMostEnabledColumn(v TableColumnIdx) {
	C.ImGuiTable_SetLeftMostEnabledColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetLeftMostEnabledColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetLeftMostEnabledColumn(self.handle()))
}

func (self Table) SetRightMostEnabledColumn(v TableColumnIdx) {
	C.ImGuiTable_SetRightMostEnabledColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetRightMostEnabledColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetRightMostEnabledColumn(self.handle()))
}

func (self Table) SetLeftMostStretchedColumn(v TableColumnIdx) {
	C.ImGuiTable_SetLeftMostStretchedColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetLeftMostStretchedColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetLeftMostStretchedColumn(self.handle()))
}

func (self Table) SetRightMostStretchedColumn(v TableColumnIdx) {
	C.ImGuiTable_SetRightMostStretchedColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetRightMostStretchedColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetRightMostStretchedColumn(self.handle()))
}

func (self Table) SetContextPopupColumn(v TableColumnIdx) {
	C.ImGuiTable_SetContextPopupColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetContextPopupColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetContextPopupColumn(self.handle()))
}

func (self Table) SetFreezeRowsRequest(v TableColumnIdx) {
	C.ImGuiTable_SetFreezeRowsRequest(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetFreezeRowsRequest() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetFreezeRowsRequest(self.handle()))
}

func (self Table) SetFreezeRowsCount(v TableColumnIdx) {
	C.ImGuiTable_SetFreezeRowsCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetFreezeRowsCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetFreezeRowsCount(self.handle()))
}

func (self Table) SetFreezeColumnsRequest(v TableColumnIdx) {
	C.ImGuiTable_SetFreezeColumnsRequest(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetFreezeColumnsRequest() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetFreezeColumnsRequest(self.handle()))
}

func (self Table) SetFreezeColumnsCount(v TableColumnIdx) {
	C.ImGuiTable_SetFreezeColumnsCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetFreezeColumnsCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetFreezeColumnsCount(self.handle()))
}

func (self Table) SetRowCellDataCurrent(v TableColumnIdx) {
	C.ImGuiTable_SetRowCellDataCurrent(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self Table) GetRowCellDataCurrent() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTable_GetRowCellDataCurrent(self.handle()))
}

func (self Table) SetDummyDrawChannel(v TableDrawChannelIdx) {
	C.ImGuiTable_SetDummyDrawChannel(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self Table) GetDummyDrawChannel() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTable_GetDummyDrawChannel(self.handle()))
}

func (self Table) SetBg2DrawChannelCurrent(v TableDrawChannelIdx) {
	C.ImGuiTable_SetBg2DrawChannelCurrent(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self Table) GetBg2DrawChannelCurrent() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTable_GetBg2DrawChannelCurrent(self.handle()))
}

func (self Table) SetBg2DrawChannelUnfrozen(v TableDrawChannelIdx) {
	C.ImGuiTable_SetBg2DrawChannelUnfrozen(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self Table) GetBg2DrawChannelUnfrozen() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTable_GetBg2DrawChannelUnfrozen(self.handle()))
}

func (self Table) SetIsLayoutLocked(v bool) {
	C.ImGuiTable_SetIsLayoutLocked(self.handle(), C.bool(v))
}

func (self Table) GetIsLayoutLocked() bool {
	return C.ImGuiTable_GetIsLayoutLocked(self.handle()) == C.bool(true)
}

func (self Table) SetIsInsideRow(v bool) {
	C.ImGuiTable_SetIsInsideRow(self.handle(), C.bool(v))
}

func (self Table) GetIsInsideRow() bool {
	return C.ImGuiTable_GetIsInsideRow(self.handle()) == C.bool(true)
}

func (self Table) SetIsInitializing(v bool) {
	C.ImGuiTable_SetIsInitializing(self.handle(), C.bool(v))
}

func (self Table) GetIsInitializing() bool {
	return C.ImGuiTable_GetIsInitializing(self.handle()) == C.bool(true)
}

func (self Table) SetIsSortSpecsDirty(v bool) {
	C.ImGuiTable_SetIsSortSpecsDirty(self.handle(), C.bool(v))
}

func (self Table) GetIsSortSpecsDirty() bool {
	return C.ImGuiTable_GetIsSortSpecsDirty(self.handle()) == C.bool(true)
}

func (self Table) SetIsUsingHeaders(v bool) {
	C.ImGuiTable_SetIsUsingHeaders(self.handle(), C.bool(v))
}

func (self Table) GetIsUsingHeaders() bool {
	return C.ImGuiTable_GetIsUsingHeaders(self.handle()) == C.bool(true)
}

func (self Table) SetIsContextPopupOpen(v bool) {
	C.ImGuiTable_SetIsContextPopupOpen(self.handle(), C.bool(v))
}

func (self Table) GetIsContextPopupOpen() bool {
	return C.ImGuiTable_GetIsContextPopupOpen(self.handle()) == C.bool(true)
}

func (self Table) SetIsSettingsRequestLoad(v bool) {
	C.ImGuiTable_SetIsSettingsRequestLoad(self.handle(), C.bool(v))
}

func (self Table) GetIsSettingsRequestLoad() bool {
	return C.ImGuiTable_GetIsSettingsRequestLoad(self.handle()) == C.bool(true)
}

func (self Table) SetIsSettingsDirty(v bool) {
	C.ImGuiTable_SetIsSettingsDirty(self.handle(), C.bool(v))
}

func (self Table) GetIsSettingsDirty() bool {
	return C.ImGuiTable_GetIsSettingsDirty(self.handle()) == C.bool(true)
}

func (self Table) SetIsDefaultDisplayOrder(v bool) {
	C.ImGuiTable_SetIsDefaultDisplayOrder(self.handle(), C.bool(v))
}

func (self Table) GetIsDefaultDisplayOrder() bool {
	return C.ImGuiTable_GetIsDefaultDisplayOrder(self.handle()) == C.bool(true)
}

func (self Table) SetIsResetAllRequest(v bool) {
	C.ImGuiTable_SetIsResetAllRequest(self.handle(), C.bool(v))
}

func (self Table) GetIsResetAllRequest() bool {
	return C.ImGuiTable_GetIsResetAllRequest(self.handle()) == C.bool(true)
}

func (self Table) SetIsResetDisplayOrderRequest(v bool) {
	C.ImGuiTable_SetIsResetDisplayOrderRequest(self.handle(), C.bool(v))
}

func (self Table) GetIsResetDisplayOrderRequest() bool {
	return C.ImGuiTable_GetIsResetDisplayOrderRequest(self.handle()) == C.bool(true)
}

func (self Table) SetIsUnfrozenRows(v bool) {
	C.ImGuiTable_SetIsUnfrozenRows(self.handle(), C.bool(v))
}

func (self Table) GetIsUnfrozenRows() bool {
	return C.ImGuiTable_GetIsUnfrozenRows(self.handle()) == C.bool(true)
}

func (self Table) SetIsDefaultSizingPolicy(v bool) {
	C.ImGuiTable_SetIsDefaultSizingPolicy(self.handle(), C.bool(v))
}

func (self Table) GetIsDefaultSizingPolicy() bool {
	return C.ImGuiTable_GetIsDefaultSizingPolicy(self.handle()) == C.bool(true)
}

func (self Table) SetMemoryCompacted(v bool) {
	C.ImGuiTable_SetMemoryCompacted(self.handle(), C.bool(v))
}

func (self Table) GetMemoryCompacted() bool {
	return C.ImGuiTable_GetMemoryCompacted(self.handle()) == C.bool(true)
}

func (self Table) SetHostSkipItems(v bool) {
	C.ImGuiTable_SetHostSkipItems(self.handle(), C.bool(v))
}

func (self Table) GetHostSkipItems() bool {
	return C.ImGuiTable_GetHostSkipItems(self.handle()) == C.bool(true)
}

func (self TableCellData) SetBgColor(v uint32) {
	C.ImGuiTableCellData_SetBgColor(self.handle(), C.ImU32(v))
}

func (self TableCellData) GetBgColor() uint32 {
	return uint32(C.ImGuiTableCellData_GetBgColor(self.handle()))
}

func (self TableCellData) SetColumn(v TableColumnIdx) {
	C.ImGuiTableCellData_SetColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableCellData) GetColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableCellData_GetColumn(self.handle()))
}

func (self TableColumn) SetFlags(v TableColumnFlags) {
	C.ImGuiTableColumn_SetFlags(self.handle(), C.ImGuiTableColumnFlags(v))
}

func (self TableColumn) GetFlags() TableColumnFlags {
	return TableColumnFlags(C.ImGuiTableColumn_GetFlags(self.handle()))
}

func (self TableColumn) SetWidthGiven(v float32) {
	C.ImGuiTableColumn_SetWidthGiven(self.handle(), C.float(v))
}

func (self TableColumn) GetWidthGiven() float32 {
	return float32(C.ImGuiTableColumn_GetWidthGiven(self.handle()))
}

func (self TableColumn) SetMinX(v float32) {
	C.ImGuiTableColumn_SetMinX(self.handle(), C.float(v))
}

func (self TableColumn) GetMinX() float32 {
	return float32(C.ImGuiTableColumn_GetMinX(self.handle()))
}

func (self TableColumn) SetMaxX(v float32) {
	C.ImGuiTableColumn_SetMaxX(self.handle(), C.float(v))
}

func (self TableColumn) GetMaxX() float32 {
	return float32(C.ImGuiTableColumn_GetMaxX(self.handle()))
}

func (self TableColumn) SetWidthRequest(v float32) {
	C.ImGuiTableColumn_SetWidthRequest(self.handle(), C.float(v))
}

func (self TableColumn) GetWidthRequest() float32 {
	return float32(C.ImGuiTableColumn_GetWidthRequest(self.handle()))
}

func (self TableColumn) SetWidthAuto(v float32) {
	C.ImGuiTableColumn_SetWidthAuto(self.handle(), C.float(v))
}

func (self TableColumn) GetWidthAuto() float32 {
	return float32(C.ImGuiTableColumn_GetWidthAuto(self.handle()))
}

func (self TableColumn) SetStretchWeight(v float32) {
	C.ImGuiTableColumn_SetStretchWeight(self.handle(), C.float(v))
}

func (self TableColumn) GetStretchWeight() float32 {
	return float32(C.ImGuiTableColumn_GetStretchWeight(self.handle()))
}

func (self TableColumn) SetInitStretchWeightOrWidth(v float32) {
	C.ImGuiTableColumn_SetInitStretchWeightOrWidth(self.handle(), C.float(v))
}

func (self TableColumn) GetInitStretchWeightOrWidth() float32 {
	return float32(C.ImGuiTableColumn_GetInitStretchWeightOrWidth(self.handle()))
}

func (self TableColumn) SetClipRect(v Rect) {
	C.ImGuiTableColumn_SetClipRect(self.handle(), v.toC())
}

func (self TableColumn) GetClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTableColumn_GetClipRect(self.handle()))
	return *out
}

func (self TableColumn) SetUserID(v ImGuiID) {
	C.ImGuiTableColumn_SetUserID(self.handle(), C.ImGuiID(v))
}

func (self TableColumn) GetUserID() ImGuiID {
	return ImGuiID(C.ImGuiTableColumn_GetUserID(self.handle()))
}

func (self TableColumn) SetWorkMinX(v float32) {
	C.ImGuiTableColumn_SetWorkMinX(self.handle(), C.float(v))
}

func (self TableColumn) GetWorkMinX() float32 {
	return float32(C.ImGuiTableColumn_GetWorkMinX(self.handle()))
}

func (self TableColumn) SetWorkMaxX(v float32) {
	C.ImGuiTableColumn_SetWorkMaxX(self.handle(), C.float(v))
}

func (self TableColumn) GetWorkMaxX() float32 {
	return float32(C.ImGuiTableColumn_GetWorkMaxX(self.handle()))
}

func (self TableColumn) SetItemWidth(v float32) {
	C.ImGuiTableColumn_SetItemWidth(self.handle(), C.float(v))
}

func (self TableColumn) GetItemWidth() float32 {
	return float32(C.ImGuiTableColumn_GetItemWidth(self.handle()))
}

func (self TableColumn) SetContentMaxXFrozen(v float32) {
	C.ImGuiTableColumn_SetContentMaxXFrozen(self.handle(), C.float(v))
}

func (self TableColumn) GetContentMaxXFrozen() float32 {
	return float32(C.ImGuiTableColumn_GetContentMaxXFrozen(self.handle()))
}

func (self TableColumn) SetContentMaxXUnfrozen(v float32) {
	C.ImGuiTableColumn_SetContentMaxXUnfrozen(self.handle(), C.float(v))
}

func (self TableColumn) GetContentMaxXUnfrozen() float32 {
	return float32(C.ImGuiTableColumn_GetContentMaxXUnfrozen(self.handle()))
}

func (self TableColumn) SetContentMaxXHeadersUsed(v float32) {
	C.ImGuiTableColumn_SetContentMaxXHeadersUsed(self.handle(), C.float(v))
}

func (self TableColumn) GetContentMaxXHeadersUsed() float32 {
	return float32(C.ImGuiTableColumn_GetContentMaxXHeadersUsed(self.handle()))
}

func (self TableColumn) SetContentMaxXHeadersIdeal(v float32) {
	C.ImGuiTableColumn_SetContentMaxXHeadersIdeal(self.handle(), C.float(v))
}

func (self TableColumn) GetContentMaxXHeadersIdeal() float32 {
	return float32(C.ImGuiTableColumn_GetContentMaxXHeadersIdeal(self.handle()))
}

func (self TableColumn) SetNameOffset(v int) {
	C.ImGuiTableColumn_SetNameOffset(self.handle(), C.ImS16(v))
}

func (self TableColumn) GetNameOffset() int {
	return int(C.ImGuiTableColumn_GetNameOffset(self.handle()))
}

func (self TableColumn) SetDisplayOrder(v TableColumnIdx) {
	C.ImGuiTableColumn_SetDisplayOrder(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumn) GetDisplayOrder() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumn_GetDisplayOrder(self.handle()))
}

func (self TableColumn) SetIndexWithinEnabledSet(v TableColumnIdx) {
	C.ImGuiTableColumn_SetIndexWithinEnabledSet(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumn) GetIndexWithinEnabledSet() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumn_GetIndexWithinEnabledSet(self.handle()))
}

func (self TableColumn) SetPrevEnabledColumn(v TableColumnIdx) {
	C.ImGuiTableColumn_SetPrevEnabledColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumn) GetPrevEnabledColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumn_GetPrevEnabledColumn(self.handle()))
}

func (self TableColumn) SetNextEnabledColumn(v TableColumnIdx) {
	C.ImGuiTableColumn_SetNextEnabledColumn(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumn) GetNextEnabledColumn() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumn_GetNextEnabledColumn(self.handle()))
}

func (self TableColumn) SetSortOrder(v TableColumnIdx) {
	C.ImGuiTableColumn_SetSortOrder(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumn) GetSortOrder() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumn_GetSortOrder(self.handle()))
}

func (self TableColumn) SetDrawChannelCurrent(v TableDrawChannelIdx) {
	C.ImGuiTableColumn_SetDrawChannelCurrent(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self TableColumn) GetDrawChannelCurrent() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTableColumn_GetDrawChannelCurrent(self.handle()))
}

func (self TableColumn) SetDrawChannelFrozen(v TableDrawChannelIdx) {
	C.ImGuiTableColumn_SetDrawChannelFrozen(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self TableColumn) GetDrawChannelFrozen() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTableColumn_GetDrawChannelFrozen(self.handle()))
}

func (self TableColumn) SetDrawChannelUnfrozen(v TableDrawChannelIdx) {
	C.ImGuiTableColumn_SetDrawChannelUnfrozen(self.handle(), C.ImGuiTableDrawChannelIdx(v))
}

func (self TableColumn) GetDrawChannelUnfrozen() TableDrawChannelIdx {
	return TableDrawChannelIdx(C.ImGuiTableColumn_GetDrawChannelUnfrozen(self.handle()))
}

func (self TableColumn) SetIsEnabled(v bool) {
	C.ImGuiTableColumn_SetIsEnabled(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsEnabled() bool {
	return C.ImGuiTableColumn_GetIsEnabled(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsUserEnabled(v bool) {
	C.ImGuiTableColumn_SetIsUserEnabled(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsUserEnabled() bool {
	return C.ImGuiTableColumn_GetIsUserEnabled(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsUserEnabledNextFrame(v bool) {
	C.ImGuiTableColumn_SetIsUserEnabledNextFrame(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsUserEnabledNextFrame() bool {
	return C.ImGuiTableColumn_GetIsUserEnabledNextFrame(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsVisibleX(v bool) {
	C.ImGuiTableColumn_SetIsVisibleX(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsVisibleX() bool {
	return C.ImGuiTableColumn_GetIsVisibleX(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsVisibleY(v bool) {
	C.ImGuiTableColumn_SetIsVisibleY(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsVisibleY() bool {
	return C.ImGuiTableColumn_GetIsVisibleY(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsRequestOutput(v bool) {
	C.ImGuiTableColumn_SetIsRequestOutput(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsRequestOutput() bool {
	return C.ImGuiTableColumn_GetIsRequestOutput(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsSkipItems(v bool) {
	C.ImGuiTableColumn_SetIsSkipItems(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsSkipItems() bool {
	return C.ImGuiTableColumn_GetIsSkipItems(self.handle()) == C.bool(true)
}

func (self TableColumn) SetIsPreserveWidthAuto(v bool) {
	C.ImGuiTableColumn_SetIsPreserveWidthAuto(self.handle(), C.bool(v))
}

func (self TableColumn) GetIsPreserveWidthAuto() bool {
	return C.ImGuiTableColumn_GetIsPreserveWidthAuto(self.handle()) == C.bool(true)
}

func (self TableColumn) SetNavLayerCurrent(v int) {
	C.ImGuiTableColumn_SetNavLayerCurrent(self.handle(), C.ImS8(v))
}

func (self TableColumn) GetNavLayerCurrent() int {
	return int(C.ImGuiTableColumn_GetNavLayerCurrent(self.handle()))
}

func (self TableColumn) SetAutoFitQueue(v uint) {
	C.ImGuiTableColumn_SetAutoFitQueue(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetAutoFitQueue() uint32 {
	return uint32(C.ImGuiTableColumn_GetAutoFitQueue(self.handle()))
}

func (self TableColumn) SetCannotSkipItemsQueue(v uint) {
	C.ImGuiTableColumn_SetCannotSkipItemsQueue(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetCannotSkipItemsQueue() uint32 {
	return uint32(C.ImGuiTableColumn_GetCannotSkipItemsQueue(self.handle()))
}

func (self TableColumn) SetSortDirection(v uint) {
	C.ImGuiTableColumn_SetSortDirection(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetSortDirection() uint32 {
	return uint32(C.ImGuiTableColumn_GetSortDirection(self.handle()))
}

func (self TableColumn) SetSortDirectionsAvailCount(v uint) {
	C.ImGuiTableColumn_SetSortDirectionsAvailCount(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetSortDirectionsAvailCount() uint32 {
	return uint32(C.ImGuiTableColumn_GetSortDirectionsAvailCount(self.handle()))
}

func (self TableColumn) SetSortDirectionsAvailMask(v uint) {
	C.ImGuiTableColumn_SetSortDirectionsAvailMask(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetSortDirectionsAvailMask() uint32 {
	return uint32(C.ImGuiTableColumn_GetSortDirectionsAvailMask(self.handle()))
}

func (self TableColumn) SetSortDirectionsAvailList(v uint) {
	C.ImGuiTableColumn_SetSortDirectionsAvailList(self.handle(), C.ImU8(v))
}

func (self TableColumn) GetSortDirectionsAvailList() uint32 {
	return uint32(C.ImGuiTableColumn_GetSortDirectionsAvailList(self.handle()))
}

func (self TableColumnSettings) SetWidthOrWeight(v float32) {
	C.ImGuiTableColumnSettings_SetWidthOrWeight(self.handle(), C.float(v))
}

func (self TableColumnSettings) GetWidthOrWeight() float32 {
	return float32(C.ImGuiTableColumnSettings_GetWidthOrWeight(self.handle()))
}

func (self TableColumnSettings) SetUserID(v ImGuiID) {
	C.ImGuiTableColumnSettings_SetUserID(self.handle(), C.ImGuiID(v))
}

func (self TableColumnSettings) GetUserID() ImGuiID {
	return ImGuiID(C.ImGuiTableColumnSettings_GetUserID(self.handle()))
}

func (self TableColumnSettings) SetIndex(v TableColumnIdx) {
	C.ImGuiTableColumnSettings_SetIndex(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumnSettings) GetIndex() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumnSettings_GetIndex(self.handle()))
}

func (self TableColumnSettings) SetDisplayOrder(v TableColumnIdx) {
	C.ImGuiTableColumnSettings_SetDisplayOrder(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumnSettings) GetDisplayOrder() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumnSettings_GetDisplayOrder(self.handle()))
}

func (self TableColumnSettings) SetSortOrder(v TableColumnIdx) {
	C.ImGuiTableColumnSettings_SetSortOrder(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableColumnSettings) GetSortOrder() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableColumnSettings_GetSortOrder(self.handle()))
}

func (self TableColumnSettings) SetSortDirection(v uint) {
	C.ImGuiTableColumnSettings_SetSortDirection(self.handle(), C.ImU8(v))
}

func (self TableColumnSettings) GetSortDirection() uint32 {
	return uint32(C.ImGuiTableColumnSettings_GetSortDirection(self.handle()))
}

func (self TableColumnSettings) SetIsEnabled(v uint) {
	C.ImGuiTableColumnSettings_SetIsEnabled(self.handle(), C.ImU8(v))
}

func (self TableColumnSettings) GetIsEnabled() uint32 {
	return uint32(C.ImGuiTableColumnSettings_GetIsEnabled(self.handle()))
}

func (self TableColumnSettings) SetIsStretch(v uint) {
	C.ImGuiTableColumnSettings_SetIsStretch(self.handle(), C.ImU8(v))
}

func (self TableColumnSettings) GetIsStretch() uint32 {
	return uint32(C.ImGuiTableColumnSettings_GetIsStretch(self.handle()))
}

func (self TableColumnSortSpecs) SetColumnUserID(v ImGuiID) {
	C.ImGuiTableColumnSortSpecs_SetColumnUserID(self.handle(), C.ImGuiID(v))
}

func (self TableColumnSortSpecs) GetColumnUserID() ImGuiID {
	return ImGuiID(C.ImGuiTableColumnSortSpecs_GetColumnUserID(self.handle()))
}

func (self TableColumnSortSpecs) SetColumnIndex(v int) {
	C.ImGuiTableColumnSortSpecs_SetColumnIndex(self.handle(), C.ImS16(v))
}

func (self TableColumnSortSpecs) GetColumnIndex() int {
	return int(C.ImGuiTableColumnSortSpecs_GetColumnIndex(self.handle()))
}

func (self TableColumnSortSpecs) SetSortOrder(v int) {
	C.ImGuiTableColumnSortSpecs_SetSortOrder(self.handle(), C.ImS16(v))
}

func (self TableColumnSortSpecs) GetSortOrder() int {
	return int(C.ImGuiTableColumnSortSpecs_GetSortOrder(self.handle()))
}

func (self TableColumnSortSpecs) SetSortDirection(v SortDirection) {
	C.ImGuiTableColumnSortSpecs_SetSortDirection(self.handle(), C.ImGuiSortDirection(v))
}

func (self TableColumnSortSpecs) GetSortDirection() SortDirection {
	return SortDirection(C.ImGuiTableColumnSortSpecs_GetSortDirection(self.handle()))
}

func (self TableInstanceData) SetLastOuterHeight(v float32) {
	C.ImGuiTableInstanceData_SetLastOuterHeight(self.handle(), C.float(v))
}

func (self TableInstanceData) GetLastOuterHeight() float32 {
	return float32(C.ImGuiTableInstanceData_GetLastOuterHeight(self.handle()))
}

func (self TableInstanceData) SetLastFirstRowHeight(v float32) {
	C.ImGuiTableInstanceData_SetLastFirstRowHeight(self.handle(), C.float(v))
}

func (self TableInstanceData) GetLastFirstRowHeight() float32 {
	return float32(C.ImGuiTableInstanceData_GetLastFirstRowHeight(self.handle()))
}

func (self TableSettings) SetID(v ImGuiID) {
	C.ImGuiTableSettings_SetID(self.handle(), C.ImGuiID(v))
}

func (self TableSettings) GetID() ImGuiID {
	return ImGuiID(C.ImGuiTableSettings_GetID(self.handle()))
}

func (self TableSettings) SetSaveFlags(v TableFlags) {
	C.ImGuiTableSettings_SetSaveFlags(self.handle(), C.ImGuiTableFlags(v))
}

func (self TableSettings) GetSaveFlags() TableFlags {
	return TableFlags(C.ImGuiTableSettings_GetSaveFlags(self.handle()))
}

func (self TableSettings) SetRefScale(v float32) {
	C.ImGuiTableSettings_SetRefScale(self.handle(), C.float(v))
}

func (self TableSettings) GetRefScale() float32 {
	return float32(C.ImGuiTableSettings_GetRefScale(self.handle()))
}

func (self TableSettings) SetColumnsCount(v TableColumnIdx) {
	C.ImGuiTableSettings_SetColumnsCount(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableSettings) GetColumnsCount() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableSettings_GetColumnsCount(self.handle()))
}

func (self TableSettings) SetColumnsCountMax(v TableColumnIdx) {
	C.ImGuiTableSettings_SetColumnsCountMax(self.handle(), C.ImGuiTableColumnIdx(v))
}

func (self TableSettings) GetColumnsCountMax() TableColumnIdx {
	return TableColumnIdx(C.ImGuiTableSettings_GetColumnsCountMax(self.handle()))
}

func (self TableSettings) SetWantApply(v bool) {
	C.ImGuiTableSettings_SetWantApply(self.handle(), C.bool(v))
}

func (self TableSettings) GetWantApply() bool {
	return C.ImGuiTableSettings_GetWantApply(self.handle()) == C.bool(true)
}

func (self TableSortSpecs) SetSpecs(v TableColumnSortSpecs) {
	C.ImGuiTableSortSpecs_SetSpecs(self.handle(), v.handle())
}

func (self TableSortSpecs) GetSpecs() TableColumnSortSpecs {
	return (TableColumnSortSpecs)(unsafe.Pointer(C.ImGuiTableSortSpecs_GetSpecs(self.handle())))
}

func (self TableSortSpecs) SetSpecsCount(v int32) {
	C.ImGuiTableSortSpecs_SetSpecsCount(self.handle(), C.int(v))
}

func (self TableSortSpecs) GetSpecsCount() int {
	return int(C.ImGuiTableSortSpecs_GetSpecsCount(self.handle()))
}

func (self TableSortSpecs) SetSpecsDirty(v bool) {
	C.ImGuiTableSortSpecs_SetSpecsDirty(self.handle(), C.bool(v))
}

func (self TableSortSpecs) GetSpecsDirty() bool {
	return C.ImGuiTableSortSpecs_GetSpecsDirty(self.handle()) == C.bool(true)
}

func (self TableTempData) SetTableIndex(v int32) {
	C.ImGuiTableTempData_SetTableIndex(self.handle(), C.int(v))
}

func (self TableTempData) GetTableIndex() int {
	return int(C.ImGuiTableTempData_GetTableIndex(self.handle()))
}

func (self TableTempData) SetLastTimeActive(v float32) {
	C.ImGuiTableTempData_SetLastTimeActive(self.handle(), C.float(v))
}

func (self TableTempData) GetLastTimeActive() float32 {
	return float32(C.ImGuiTableTempData_GetLastTimeActive(self.handle()))
}

func (self TableTempData) SetUserOuterSize(v Vec2) {
	C.ImGuiTableTempData_SetUserOuterSize(self.handle(), v.toC())
}

func (self TableTempData) GetUserOuterSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTableTempData_GetUserOuterSize(self.handle()))
	return *out
}

func (self TableTempData) GetDrawSplitter() DrawListSplitter {
	return newDrawListSplitterFromC(C.ImGuiTableTempData_GetDrawSplitter(self.handle()))
}

func (self TableTempData) SetHostBackupWorkRect(v Rect) {
	C.ImGuiTableTempData_SetHostBackupWorkRect(self.handle(), v.toC())
}

func (self TableTempData) GetHostBackupWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTableTempData_GetHostBackupWorkRect(self.handle()))
	return *out
}

func (self TableTempData) SetHostBackupParentWorkRect(v Rect) {
	C.ImGuiTableTempData_SetHostBackupParentWorkRect(self.handle(), v.toC())
}

func (self TableTempData) GetHostBackupParentWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiTableTempData_GetHostBackupParentWorkRect(self.handle()))
	return *out
}

func (self TableTempData) SetHostBackupPrevLineSize(v Vec2) {
	C.ImGuiTableTempData_SetHostBackupPrevLineSize(self.handle(), v.toC())
}

func (self TableTempData) GetHostBackupPrevLineSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTableTempData_GetHostBackupPrevLineSize(self.handle()))
	return *out
}

func (self TableTempData) SetHostBackupCurrLineSize(v Vec2) {
	C.ImGuiTableTempData_SetHostBackupCurrLineSize(self.handle(), v.toC())
}

func (self TableTempData) GetHostBackupCurrLineSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTableTempData_GetHostBackupCurrLineSize(self.handle()))
	return *out
}

func (self TableTempData) SetHostBackupCursorMaxPos(v Vec2) {
	C.ImGuiTableTempData_SetHostBackupCursorMaxPos(self.handle(), v.toC())
}

func (self TableTempData) GetHostBackupCursorMaxPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiTableTempData_GetHostBackupCursorMaxPos(self.handle()))
	return *out
}

func (self TableTempData) SetHostBackupItemWidth(v float32) {
	C.ImGuiTableTempData_SetHostBackupItemWidth(self.handle(), C.float(v))
}

func (self TableTempData) GetHostBackupItemWidth() float32 {
	return float32(C.ImGuiTableTempData_GetHostBackupItemWidth(self.handle()))
}

func (self TableTempData) SetHostBackupItemWidthStackSize(v int32) {
	C.ImGuiTableTempData_SetHostBackupItemWidthStackSize(self.handle(), C.int(v))
}

func (self TableTempData) GetHostBackupItemWidthStackSize() int {
	return int(C.ImGuiTableTempData_GetHostBackupItemWidthStackSize(self.handle()))
}

func (self TextFilter) SetCountGrep(v int32) {
	C.ImGuiTextFilter_SetCountGrep(self.handle(), C.int(v))
}

func (self TextFilter) GetCountGrep() int {
	return int(C.ImGuiTextFilter_GetCountGrep(self.handle()))
}

func (self TextRange) Setb(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiTextRange_Setb(self.handle(), vArg)
}

func (self TextRange) Getb() string {
	return C.GoString(C.ImGuiTextRange_Getb(self.handle()))
}

func (self TextRange) Sete(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiTextRange_Sete(self.handle(), vArg)
}

func (self TextRange) Gete() string {
	return C.GoString(C.ImGuiTextRange_Gete(self.handle()))
}

func (self Viewport) SetID(v ImGuiID) {
	C.ImGuiViewport_SetID(self.handle(), C.ImGuiID(v))
}

func (self Viewport) GetID() ImGuiID {
	return ImGuiID(C.ImGuiViewport_GetID(self.handle()))
}

func (self Viewport) SetFlags(v ViewportFlags) {
	C.ImGuiViewport_SetFlags(self.handle(), C.ImGuiViewportFlags(v))
}

func (self Viewport) GetFlags() ViewportFlags {
	return ViewportFlags(C.ImGuiViewport_GetFlags(self.handle()))
}

func (self Viewport) SetPos(v Vec2) {
	C.ImGuiViewport_SetPos(self.handle(), v.toC())
}

func (self Viewport) GetPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewport_GetPos(self.handle()))
	return *out
}

func (self Viewport) SetSize(v Vec2) {
	C.ImGuiViewport_SetSize(self.handle(), v.toC())
}

func (self Viewport) GetSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewport_GetSize(self.handle()))
	return *out
}

func (self Viewport) SetWorkPos(v Vec2) {
	C.ImGuiViewport_SetWorkPos(self.handle(), v.toC())
}

func (self Viewport) GetWorkPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewport_GetWorkPos(self.handle()))
	return *out
}

func (self Viewport) SetWorkSize(v Vec2) {
	C.ImGuiViewport_SetWorkSize(self.handle(), v.toC())
}

func (self Viewport) GetWorkSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewport_GetWorkSize(self.handle()))
	return *out
}

func (self Viewport) SetDpiScale(v float32) {
	C.ImGuiViewport_SetDpiScale(self.handle(), C.float(v))
}

func (self Viewport) GetDpiScale() float32 {
	return float32(C.ImGuiViewport_GetDpiScale(self.handle()))
}

func (self Viewport) SetParentViewportId(v ImGuiID) {
	C.ImGuiViewport_SetParentViewportId(self.handle(), C.ImGuiID(v))
}

func (self Viewport) GetParentViewportId() ImGuiID {
	return ImGuiID(C.ImGuiViewport_GetParentViewportId(self.handle()))
}

func (self Viewport) SetDrawData(v DrawData) {
	C.ImGuiViewport_SetDrawData(self.handle(), v.handle())
}

func (self Viewport) GetDrawData() DrawData {
	return (DrawData)(unsafe.Pointer(C.ImGuiViewport_GetDrawData(self.handle())))
}

func (self Viewport) SetRendererUserData(v unsafe.Pointer) {
	C.ImGuiViewport_SetRendererUserData(self.handle(), v)
}

func (self Viewport) GetRendererUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiViewport_GetRendererUserData(self.handle()))
}

func (self Viewport) SetPlatformUserData(v unsafe.Pointer) {
	C.ImGuiViewport_SetPlatformUserData(self.handle(), v)
}

func (self Viewport) GetPlatformUserData() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiViewport_GetPlatformUserData(self.handle()))
}

func (self Viewport) SetPlatformHandle(v unsafe.Pointer) {
	C.ImGuiViewport_SetPlatformHandle(self.handle(), v)
}

func (self Viewport) GetPlatformHandle() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiViewport_GetPlatformHandle(self.handle()))
}

func (self Viewport) SetPlatformHandleRaw(v unsafe.Pointer) {
	C.ImGuiViewport_SetPlatformHandleRaw(self.handle(), v)
}

func (self Viewport) GetPlatformHandleRaw() unsafe.Pointer {
	return unsafe.Pointer(C.ImGuiViewport_GetPlatformHandleRaw(self.handle()))
}

func (self Viewport) SetPlatformRequestMove(v bool) {
	C.ImGuiViewport_SetPlatformRequestMove(self.handle(), C.bool(v))
}

func (self Viewport) GetPlatformRequestMove() bool {
	return C.ImGuiViewport_GetPlatformRequestMove(self.handle()) == C.bool(true)
}

func (self Viewport) SetPlatformRequestResize(v bool) {
	C.ImGuiViewport_SetPlatformRequestResize(self.handle(), C.bool(v))
}

func (self Viewport) GetPlatformRequestResize() bool {
	return C.ImGuiViewport_GetPlatformRequestResize(self.handle()) == C.bool(true)
}

func (self Viewport) SetPlatformRequestClose(v bool) {
	C.ImGuiViewport_SetPlatformRequestClose(self.handle(), C.bool(v))
}

func (self Viewport) GetPlatformRequestClose() bool {
	return C.ImGuiViewport_GetPlatformRequestClose(self.handle()) == C.bool(true)
}

func (self ViewportP) Get_ImGuiViewport() Viewport {
	return newViewportFromC(C.ImGuiViewportP_Get_ImGuiViewport(self.handle()))
}

func (self ViewportP) SetIdx(v int32) {
	C.ImGuiViewportP_SetIdx(self.handle(), C.int(v))
}

func (self ViewportP) GetIdx() int {
	return int(C.ImGuiViewportP_GetIdx(self.handle()))
}

func (self ViewportP) SetLastFrameActive(v int32) {
	C.ImGuiViewportP_SetLastFrameActive(self.handle(), C.int(v))
}

func (self ViewportP) GetLastFrameActive() int {
	return int(C.ImGuiViewportP_GetLastFrameActive(self.handle()))
}

func (self ViewportP) SetLastFrontMostStampCount(v int32) {
	C.ImGuiViewportP_SetLastFrontMostStampCount(self.handle(), C.int(v))
}

func (self ViewportP) GetLastFrontMostStampCount() int {
	return int(C.ImGuiViewportP_GetLastFrontMostStampCount(self.handle()))
}

func (self ViewportP) SetLastNameHash(v ImGuiID) {
	C.ImGuiViewportP_SetLastNameHash(self.handle(), C.ImGuiID(v))
}

func (self ViewportP) GetLastNameHash() ImGuiID {
	return ImGuiID(C.ImGuiViewportP_GetLastNameHash(self.handle()))
}

func (self ViewportP) SetLastPos(v Vec2) {
	C.ImGuiViewportP_SetLastPos(self.handle(), v.toC())
}

func (self ViewportP) GetLastPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetLastPos(self.handle()))
	return *out
}

func (self ViewportP) SetAlpha(v float32) {
	C.ImGuiViewportP_SetAlpha(self.handle(), C.float(v))
}

func (self ViewportP) GetAlpha() float32 {
	return float32(C.ImGuiViewportP_GetAlpha(self.handle()))
}

func (self ViewportP) SetLastAlpha(v float32) {
	C.ImGuiViewportP_SetLastAlpha(self.handle(), C.float(v))
}

func (self ViewportP) GetLastAlpha() float32 {
	return float32(C.ImGuiViewportP_GetLastAlpha(self.handle()))
}

func (self ViewportP) SetPlatformMonitor(v int) {
	C.ImGuiViewportP_SetPlatformMonitor(self.handle(), C.short(v))
}

func (self ViewportP) GetPlatformMonitor() int {
	return int(C.ImGuiViewportP_GetPlatformMonitor(self.handle()))
}

func (self ViewportP) SetPlatformWindowCreated(v bool) {
	C.ImGuiViewportP_SetPlatformWindowCreated(self.handle(), C.bool(v))
}

func (self ViewportP) GetPlatformWindowCreated() bool {
	return C.ImGuiViewportP_GetPlatformWindowCreated(self.handle()) == C.bool(true)
}

func (self ViewportP) SetWindow(v Window) {
	C.ImGuiViewportP_SetWindow(self.handle(), v.handle())
}

func (self ViewportP) GetWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiViewportP_GetWindow(self.handle())))
}

func (self ViewportP) GetDrawDataP() DrawData {
	return newDrawDataFromC(C.ImGuiViewportP_GetDrawDataP(self.handle()))
}

func (self ViewportP) GetDrawDataBuilder() DrawDataBuilder {
	return newDrawDataBuilderFromC(C.ImGuiViewportP_GetDrawDataBuilder(self.handle()))
}

func (self ViewportP) SetLastPlatformPos(v Vec2) {
	C.ImGuiViewportP_SetLastPlatformPos(self.handle(), v.toC())
}

func (self ViewportP) GetLastPlatformPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetLastPlatformPos(self.handle()))
	return *out
}

func (self ViewportP) SetLastPlatformSize(v Vec2) {
	C.ImGuiViewportP_SetLastPlatformSize(self.handle(), v.toC())
}

func (self ViewportP) GetLastPlatformSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetLastPlatformSize(self.handle()))
	return *out
}

func (self ViewportP) SetLastRendererSize(v Vec2) {
	C.ImGuiViewportP_SetLastRendererSize(self.handle(), v.toC())
}

func (self ViewportP) GetLastRendererSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetLastRendererSize(self.handle()))
	return *out
}

func (self ViewportP) SetWorkOffsetMin(v Vec2) {
	C.ImGuiViewportP_SetWorkOffsetMin(self.handle(), v.toC())
}

func (self ViewportP) GetWorkOffsetMin() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetWorkOffsetMin(self.handle()))
	return *out
}

func (self ViewportP) SetWorkOffsetMax(v Vec2) {
	C.ImGuiViewportP_SetWorkOffsetMax(self.handle(), v.toC())
}

func (self ViewportP) GetWorkOffsetMax() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetWorkOffsetMax(self.handle()))
	return *out
}

func (self ViewportP) SetBuildWorkOffsetMin(v Vec2) {
	C.ImGuiViewportP_SetBuildWorkOffsetMin(self.handle(), v.toC())
}

func (self ViewportP) GetBuildWorkOffsetMin() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetBuildWorkOffsetMin(self.handle()))
	return *out
}

func (self ViewportP) SetBuildWorkOffsetMax(v Vec2) {
	C.ImGuiViewportP_SetBuildWorkOffsetMax(self.handle(), v.toC())
}

func (self ViewportP) GetBuildWorkOffsetMax() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiViewportP_GetBuildWorkOffsetMax(self.handle()))
	return *out
}

func (self Window) SetName(v string) {
	vArg, vFin := wrapString(v)
	defer vFin()

	C.ImGuiWindow_SetName(self.handle(), vArg)
}

func (self Window) GetName() string {
	return C.GoString(C.ImGuiWindow_GetName(self.handle()))
}

func (self Window) SetID(v ImGuiID) {
	C.ImGuiWindow_SetID(self.handle(), C.ImGuiID(v))
}

func (self Window) GetID() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetID(self.handle()))
}

func (self Window) SetFlags(v WindowFlags) {
	C.ImGuiWindow_SetFlags(self.handle(), C.ImGuiWindowFlags(v))
}

func (self Window) GetFlags() WindowFlags {
	return WindowFlags(C.ImGuiWindow_GetFlags(self.handle()))
}

func (self Window) SetFlagsPreviousFrame(v WindowFlags) {
	C.ImGuiWindow_SetFlagsPreviousFrame(self.handle(), C.ImGuiWindowFlags(v))
}

func (self Window) GetFlagsPreviousFrame() WindowFlags {
	return WindowFlags(C.ImGuiWindow_GetFlagsPreviousFrame(self.handle()))
}

func (self Window) GetWindowClass() WindowClass {
	return newWindowClassFromC(C.ImGuiWindow_GetWindowClass(self.handle()))
}

func (self Window) SetViewport(v ViewportP) {
	C.ImGuiWindow_SetViewport(self.handle(), v.handle())
}

func (self Window) GetViewport() ViewportP {
	return (ViewportP)(unsafe.Pointer(C.ImGuiWindow_GetViewport(self.handle())))
}

func (self Window) SetViewportId(v ImGuiID) {
	C.ImGuiWindow_SetViewportId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetViewportId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetViewportId(self.handle()))
}

func (self Window) SetViewportPos(v Vec2) {
	C.ImGuiWindow_SetViewportPos(self.handle(), v.toC())
}

func (self Window) GetViewportPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetViewportPos(self.handle()))
	return *out
}

func (self Window) SetViewportAllowPlatformMonitorExtend(v int32) {
	C.ImGuiWindow_SetViewportAllowPlatformMonitorExtend(self.handle(), C.int(v))
}

func (self Window) GetViewportAllowPlatformMonitorExtend() int {
	return int(C.ImGuiWindow_GetViewportAllowPlatformMonitorExtend(self.handle()))
}

func (self Window) SetPos(v Vec2) {
	C.ImGuiWindow_SetPos(self.handle(), v.toC())
}

func (self Window) GetPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetPos(self.handle()))
	return *out
}

func (self Window) SetSize(v Vec2) {
	C.ImGuiWindow_SetSize(self.handle(), v.toC())
}

func (self Window) GetSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetSize(self.handle()))
	return *out
}

func (self Window) SetSizeFull(v Vec2) {
	C.ImGuiWindow_SetSizeFull(self.handle(), v.toC())
}

func (self Window) GetSizeFull() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetSizeFull(self.handle()))
	return *out
}

func (self Window) SetContentSize(v Vec2) {
	C.ImGuiWindow_SetContentSize(self.handle(), v.toC())
}

func (self Window) GetContentSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetContentSize(self.handle()))
	return *out
}

func (self Window) SetContentSizeIdeal(v Vec2) {
	C.ImGuiWindow_SetContentSizeIdeal(self.handle(), v.toC())
}

func (self Window) GetContentSizeIdeal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetContentSizeIdeal(self.handle()))
	return *out
}

func (self Window) SetContentSizeExplicit(v Vec2) {
	C.ImGuiWindow_SetContentSizeExplicit(self.handle(), v.toC())
}

func (self Window) GetContentSizeExplicit() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetContentSizeExplicit(self.handle()))
	return *out
}

func (self Window) SetWindowPadding(v Vec2) {
	C.ImGuiWindow_SetWindowPadding(self.handle(), v.toC())
}

func (self Window) GetWindowPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetWindowPadding(self.handle()))
	return *out
}

func (self Window) SetWindowRounding(v float32) {
	C.ImGuiWindow_SetWindowRounding(self.handle(), C.float(v))
}

func (self Window) GetWindowRounding() float32 {
	return float32(C.ImGuiWindow_GetWindowRounding(self.handle()))
}

func (self Window) SetWindowBorderSize(v float32) {
	C.ImGuiWindow_SetWindowBorderSize(self.handle(), C.float(v))
}

func (self Window) GetWindowBorderSize() float32 {
	return float32(C.ImGuiWindow_GetWindowBorderSize(self.handle()))
}

func (self Window) SetNameBufLen(v int32) {
	C.ImGuiWindow_SetNameBufLen(self.handle(), C.int(v))
}

func (self Window) GetNameBufLen() int {
	return int(C.ImGuiWindow_GetNameBufLen(self.handle()))
}

func (self Window) SetMoveId(v ImGuiID) {
	C.ImGuiWindow_SetMoveId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetMoveId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetMoveId(self.handle()))
}

func (self Window) SetTabId(v ImGuiID) {
	C.ImGuiWindow_SetTabId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetTabId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetTabId(self.handle()))
}

func (self Window) SetChildId(v ImGuiID) {
	C.ImGuiWindow_SetChildId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetChildId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetChildId(self.handle()))
}

func (self Window) SetScroll(v Vec2) {
	C.ImGuiWindow_SetScroll(self.handle(), v.toC())
}

func (self Window) GetScroll() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScroll(self.handle()))
	return *out
}

func (self Window) SetScrollMax(v Vec2) {
	C.ImGuiWindow_SetScrollMax(self.handle(), v.toC())
}

func (self Window) GetScrollMax() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScrollMax(self.handle()))
	return *out
}

func (self Window) SetScrollTarget(v Vec2) {
	C.ImGuiWindow_SetScrollTarget(self.handle(), v.toC())
}

func (self Window) GetScrollTarget() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScrollTarget(self.handle()))
	return *out
}

func (self Window) SetScrollTargetCenterRatio(v Vec2) {
	C.ImGuiWindow_SetScrollTargetCenterRatio(self.handle(), v.toC())
}

func (self Window) GetScrollTargetCenterRatio() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScrollTargetCenterRatio(self.handle()))
	return *out
}

func (self Window) SetScrollTargetEdgeSnapDist(v Vec2) {
	C.ImGuiWindow_SetScrollTargetEdgeSnapDist(self.handle(), v.toC())
}

func (self Window) GetScrollTargetEdgeSnapDist() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScrollTargetEdgeSnapDist(self.handle()))
	return *out
}

func (self Window) SetScrollbarSizes(v Vec2) {
	C.ImGuiWindow_SetScrollbarSizes(self.handle(), v.toC())
}

func (self Window) GetScrollbarSizes() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetScrollbarSizes(self.handle()))
	return *out
}

func (self Window) SetScrollbarX(v bool) {
	C.ImGuiWindow_SetScrollbarX(self.handle(), C.bool(v))
}

func (self Window) GetScrollbarX() bool {
	return C.ImGuiWindow_GetScrollbarX(self.handle()) == C.bool(true)
}

func (self Window) SetScrollbarY(v bool) {
	C.ImGuiWindow_SetScrollbarY(self.handle(), C.bool(v))
}

func (self Window) GetScrollbarY() bool {
	return C.ImGuiWindow_GetScrollbarY(self.handle()) == C.bool(true)
}

func (self Window) SetViewportOwned(v bool) {
	C.ImGuiWindow_SetViewportOwned(self.handle(), C.bool(v))
}

func (self Window) GetViewportOwned() bool {
	return C.ImGuiWindow_GetViewportOwned(self.handle()) == C.bool(true)
}

func (self Window) SetActive(v bool) {
	C.ImGuiWindow_SetActive(self.handle(), C.bool(v))
}

func (self Window) GetActive() bool {
	return C.ImGuiWindow_GetActive(self.handle()) == C.bool(true)
}

func (self Window) SetWasActive(v bool) {
	C.ImGuiWindow_SetWasActive(self.handle(), C.bool(v))
}

func (self Window) GetWasActive() bool {
	return C.ImGuiWindow_GetWasActive(self.handle()) == C.bool(true)
}

func (self Window) SetWriteAccessed(v bool) {
	C.ImGuiWindow_SetWriteAccessed(self.handle(), C.bool(v))
}

func (self Window) GetWriteAccessed() bool {
	return C.ImGuiWindow_GetWriteAccessed(self.handle()) == C.bool(true)
}

func (self Window) SetCollapsed(v bool) {
	C.ImGuiWindow_SetCollapsed(self.handle(), C.bool(v))
}

func (self Window) GetCollapsed() bool {
	return C.ImGuiWindow_GetCollapsed(self.handle()) == C.bool(true)
}

func (self Window) SetWantCollapseToggle(v bool) {
	C.ImGuiWindow_SetWantCollapseToggle(self.handle(), C.bool(v))
}

func (self Window) GetWantCollapseToggle() bool {
	return C.ImGuiWindow_GetWantCollapseToggle(self.handle()) == C.bool(true)
}

func (self Window) SetSkipItems(v bool) {
	C.ImGuiWindow_SetSkipItems(self.handle(), C.bool(v))
}

func (self Window) GetSkipItems() bool {
	return C.ImGuiWindow_GetSkipItems(self.handle()) == C.bool(true)
}

func (self Window) SetAppearing(v bool) {
	C.ImGuiWindow_SetAppearing(self.handle(), C.bool(v))
}

func (self Window) GetAppearing() bool {
	return C.ImGuiWindow_GetAppearing(self.handle()) == C.bool(true)
}

func (self Window) SetHidden(v bool) {
	C.ImGuiWindow_SetHidden(self.handle(), C.bool(v))
}

func (self Window) GetHidden() bool {
	return C.ImGuiWindow_GetHidden(self.handle()) == C.bool(true)
}

func (self Window) SetIsFallbackWindow(v bool) {
	C.ImGuiWindow_SetIsFallbackWindow(self.handle(), C.bool(v))
}

func (self Window) GetIsFallbackWindow() bool {
	return C.ImGuiWindow_GetIsFallbackWindow(self.handle()) == C.bool(true)
}

func (self Window) SetIsExplicitChild(v bool) {
	C.ImGuiWindow_SetIsExplicitChild(self.handle(), C.bool(v))
}

func (self Window) GetIsExplicitChild() bool {
	return C.ImGuiWindow_GetIsExplicitChild(self.handle()) == C.bool(true)
}

func (self Window) SetHasCloseButton(v bool) {
	C.ImGuiWindow_SetHasCloseButton(self.handle(), C.bool(v))
}

func (self Window) GetHasCloseButton() bool {
	return C.ImGuiWindow_GetHasCloseButton(self.handle()) == C.bool(true)
}

func (self Window) SetBeginCount(v int) {
	C.ImGuiWindow_SetBeginCount(self.handle(), C.short(v))
}

func (self Window) GetBeginCount() int {
	return int(C.ImGuiWindow_GetBeginCount(self.handle()))
}

func (self Window) SetBeginOrderWithinParent(v int) {
	C.ImGuiWindow_SetBeginOrderWithinParent(self.handle(), C.short(v))
}

func (self Window) GetBeginOrderWithinParent() int {
	return int(C.ImGuiWindow_GetBeginOrderWithinParent(self.handle()))
}

func (self Window) SetBeginOrderWithinContext(v int) {
	C.ImGuiWindow_SetBeginOrderWithinContext(self.handle(), C.short(v))
}

func (self Window) GetBeginOrderWithinContext() int {
	return int(C.ImGuiWindow_GetBeginOrderWithinContext(self.handle()))
}

func (self Window) SetFocusOrder(v int) {
	C.ImGuiWindow_SetFocusOrder(self.handle(), C.short(v))
}

func (self Window) GetFocusOrder() int {
	return int(C.ImGuiWindow_GetFocusOrder(self.handle()))
}

func (self Window) SetPopupId(v ImGuiID) {
	C.ImGuiWindow_SetPopupId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetPopupId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetPopupId(self.handle()))
}

func (self Window) SetAutoFitFramesX(v int) {
	C.ImGuiWindow_SetAutoFitFramesX(self.handle(), C.ImS8(v))
}

func (self Window) GetAutoFitFramesX() int {
	return int(C.ImGuiWindow_GetAutoFitFramesX(self.handle()))
}

func (self Window) SetAutoFitFramesY(v int) {
	C.ImGuiWindow_SetAutoFitFramesY(self.handle(), C.ImS8(v))
}

func (self Window) GetAutoFitFramesY() int {
	return int(C.ImGuiWindow_GetAutoFitFramesY(self.handle()))
}

func (self Window) SetAutoFitChildAxises(v int) {
	C.ImGuiWindow_SetAutoFitChildAxises(self.handle(), C.ImS8(v))
}

func (self Window) GetAutoFitChildAxises() int {
	return int(C.ImGuiWindow_GetAutoFitChildAxises(self.handle()))
}

func (self Window) SetAutoFitOnlyGrows(v bool) {
	C.ImGuiWindow_SetAutoFitOnlyGrows(self.handle(), C.bool(v))
}

func (self Window) GetAutoFitOnlyGrows() bool {
	return C.ImGuiWindow_GetAutoFitOnlyGrows(self.handle()) == C.bool(true)
}

func (self Window) SetAutoPosLastDirection(v Dir) {
	C.ImGuiWindow_SetAutoPosLastDirection(self.handle(), C.ImGuiDir(v))
}

func (self Window) GetAutoPosLastDirection() Dir {
	return Dir(C.ImGuiWindow_GetAutoPosLastDirection(self.handle()))
}

func (self Window) SetHiddenFramesCanSkipItems(v int) {
	C.ImGuiWindow_SetHiddenFramesCanSkipItems(self.handle(), C.ImS8(v))
}

func (self Window) GetHiddenFramesCanSkipItems() int {
	return int(C.ImGuiWindow_GetHiddenFramesCanSkipItems(self.handle()))
}

func (self Window) SetHiddenFramesCannotSkipItems(v int) {
	C.ImGuiWindow_SetHiddenFramesCannotSkipItems(self.handle(), C.ImS8(v))
}

func (self Window) GetHiddenFramesCannotSkipItems() int {
	return int(C.ImGuiWindow_GetHiddenFramesCannotSkipItems(self.handle()))
}

func (self Window) SetHiddenFramesForRenderOnly(v int) {
	C.ImGuiWindow_SetHiddenFramesForRenderOnly(self.handle(), C.ImS8(v))
}

func (self Window) GetHiddenFramesForRenderOnly() int {
	return int(C.ImGuiWindow_GetHiddenFramesForRenderOnly(self.handle()))
}

func (self Window) SetDisableInputsFrames(v int) {
	C.ImGuiWindow_SetDisableInputsFrames(self.handle(), C.ImS8(v))
}

func (self Window) GetDisableInputsFrames() int {
	return int(C.ImGuiWindow_GetDisableInputsFrames(self.handle()))
}

func (self Window) SetSetWindowPosAllowFlags(v Cond) {
	C.ImGuiWindow_SetSetWindowPosAllowFlags(self.handle(), C.ImGuiCond(v))
}

func (self Window) GetSetWindowPosAllowFlags() Cond {
	return Cond(C.ImGuiWindow_GetSetWindowPosAllowFlags(self.handle()))
}

func (self Window) SetSetWindowSizeAllowFlags(v Cond) {
	C.ImGuiWindow_SetSetWindowSizeAllowFlags(self.handle(), C.ImGuiCond(v))
}

func (self Window) GetSetWindowSizeAllowFlags() Cond {
	return Cond(C.ImGuiWindow_GetSetWindowSizeAllowFlags(self.handle()))
}

func (self Window) SetSetWindowCollapsedAllowFlags(v Cond) {
	C.ImGuiWindow_SetSetWindowCollapsedAllowFlags(self.handle(), C.ImGuiCond(v))
}

func (self Window) GetSetWindowCollapsedAllowFlags() Cond {
	return Cond(C.ImGuiWindow_GetSetWindowCollapsedAllowFlags(self.handle()))
}

func (self Window) SetSetWindowDockAllowFlags(v Cond) {
	C.ImGuiWindow_SetSetWindowDockAllowFlags(self.handle(), C.ImGuiCond(v))
}

func (self Window) GetSetWindowDockAllowFlags() Cond {
	return Cond(C.ImGuiWindow_GetSetWindowDockAllowFlags(self.handle()))
}

func (self Window) SetSetWindowPosVal(v Vec2) {
	C.ImGuiWindow_SetSetWindowPosVal(self.handle(), v.toC())
}

func (self Window) GetSetWindowPosVal() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetSetWindowPosVal(self.handle()))
	return *out
}

func (self Window) SetSetWindowPosPivot(v Vec2) {
	C.ImGuiWindow_SetSetWindowPosPivot(self.handle(), v.toC())
}

func (self Window) GetSetWindowPosPivot() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindow_GetSetWindowPosPivot(self.handle()))
	return *out
}

func (self Window) GetDC() WindowTempData {
	return newWindowTempDataFromC(C.ImGuiWindow_GetDC(self.handle()))
}

func (self Window) SetOuterRectClipped(v Rect) {
	C.ImGuiWindow_SetOuterRectClipped(self.handle(), v.toC())
}

func (self Window) GetOuterRectClipped() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetOuterRectClipped(self.handle()))
	return *out
}

func (self Window) SetInnerRect(v Rect) {
	C.ImGuiWindow_SetInnerRect(self.handle(), v.toC())
}

func (self Window) GetInnerRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetInnerRect(self.handle()))
	return *out
}

func (self Window) SetInnerClipRect(v Rect) {
	C.ImGuiWindow_SetInnerClipRect(self.handle(), v.toC())
}

func (self Window) GetInnerClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetInnerClipRect(self.handle()))
	return *out
}

func (self Window) SetWorkRect(v Rect) {
	C.ImGuiWindow_SetWorkRect(self.handle(), v.toC())
}

func (self Window) GetWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetWorkRect(self.handle()))
	return *out
}

func (self Window) SetParentWorkRect(v Rect) {
	C.ImGuiWindow_SetParentWorkRect(self.handle(), v.toC())
}

func (self Window) GetParentWorkRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetParentWorkRect(self.handle()))
	return *out
}

func (self Window) SetClipRect(v Rect) {
	C.ImGuiWindow_SetClipRect(self.handle(), v.toC())
}

func (self Window) GetClipRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetClipRect(self.handle()))
	return *out
}

func (self Window) SetContentRegionRect(v Rect) {
	C.ImGuiWindow_SetContentRegionRect(self.handle(), v.toC())
}

func (self Window) GetContentRegionRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetContentRegionRect(self.handle()))
	return *out
}

func (self Window) SetLastFrameActive(v int32) {
	C.ImGuiWindow_SetLastFrameActive(self.handle(), C.int(v))
}

func (self Window) GetLastFrameActive() int {
	return int(C.ImGuiWindow_GetLastFrameActive(self.handle()))
}

func (self Window) SetLastFrameJustFocused(v int32) {
	C.ImGuiWindow_SetLastFrameJustFocused(self.handle(), C.int(v))
}

func (self Window) GetLastFrameJustFocused() int {
	return int(C.ImGuiWindow_GetLastFrameJustFocused(self.handle()))
}

func (self Window) SetLastTimeActive(v float32) {
	C.ImGuiWindow_SetLastTimeActive(self.handle(), C.float(v))
}

func (self Window) GetLastTimeActive() float32 {
	return float32(C.ImGuiWindow_GetLastTimeActive(self.handle()))
}

func (self Window) SetItemWidthDefault(v float32) {
	C.ImGuiWindow_SetItemWidthDefault(self.handle(), C.float(v))
}

func (self Window) GetItemWidthDefault() float32 {
	return float32(C.ImGuiWindow_GetItemWidthDefault(self.handle()))
}

func (self Window) GetStateStorage() Storage {
	return newStorageFromC(C.ImGuiWindow_GetStateStorage(self.handle()))
}

func (self Window) SetFontWindowScale(v float32) {
	C.ImGuiWindow_SetFontWindowScale(self.handle(), C.float(v))
}

func (self Window) GetFontWindowScale() float32 {
	return float32(C.ImGuiWindow_GetFontWindowScale(self.handle()))
}

func (self Window) SetFontDpiScale(v float32) {
	C.ImGuiWindow_SetFontDpiScale(self.handle(), C.float(v))
}

func (self Window) GetFontDpiScale() float32 {
	return float32(C.ImGuiWindow_GetFontDpiScale(self.handle()))
}

func (self Window) SetSettingsOffset(v int32) {
	C.ImGuiWindow_SetSettingsOffset(self.handle(), C.int(v))
}

func (self Window) GetSettingsOffset() int {
	return int(C.ImGuiWindow_GetSettingsOffset(self.handle()))
}

func (self Window) SetDrawList(v DrawList) {
	C.ImGuiWindow_SetDrawList(self.handle(), v.handle())
}

func (self Window) GetDrawList() DrawList {
	return (DrawList)(unsafe.Pointer(C.ImGuiWindow_GetDrawList(self.handle())))
}

func (self Window) GetDrawListInst() DrawList {
	return newDrawListFromC(C.ImGuiWindow_GetDrawListInst(self.handle()))
}

func (self Window) SetParentWindow(v Window) {
	C.ImGuiWindow_SetParentWindow(self.handle(), v.handle())
}

func (self Window) GetParentWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetParentWindow(self.handle())))
}

func (self Window) SetParentWindowInBeginStack(v Window) {
	C.ImGuiWindow_SetParentWindowInBeginStack(self.handle(), v.handle())
}

func (self Window) GetParentWindowInBeginStack() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetParentWindowInBeginStack(self.handle())))
}

func (self Window) SetRootWindow(v Window) {
	C.ImGuiWindow_SetRootWindow(self.handle(), v.handle())
}

func (self Window) GetRootWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetRootWindow(self.handle())))
}

func (self Window) SetRootWindowPopupTree(v Window) {
	C.ImGuiWindow_SetRootWindowPopupTree(self.handle(), v.handle())
}

func (self Window) GetRootWindowPopupTree() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetRootWindowPopupTree(self.handle())))
}

func (self Window) SetRootWindowDockTree(v Window) {
	C.ImGuiWindow_SetRootWindowDockTree(self.handle(), v.handle())
}

func (self Window) GetRootWindowDockTree() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetRootWindowDockTree(self.handle())))
}

func (self Window) SetRootWindowForTitleBarHighlight(v Window) {
	C.ImGuiWindow_SetRootWindowForTitleBarHighlight(self.handle(), v.handle())
}

func (self Window) GetRootWindowForTitleBarHighlight() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetRootWindowForTitleBarHighlight(self.handle())))
}

func (self Window) SetRootWindowForNav(v Window) {
	C.ImGuiWindow_SetRootWindowForNav(self.handle(), v.handle())
}

func (self Window) GetRootWindowForNav() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetRootWindowForNav(self.handle())))
}

func (self Window) SetNavLastChildNavWindow(v Window) {
	C.ImGuiWindow_SetNavLastChildNavWindow(self.handle(), v.handle())
}

func (self Window) GetNavLastChildNavWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindow_GetNavLastChildNavWindow(self.handle())))
}

func (self Window) SetMemoryDrawListIdxCapacity(v int32) {
	C.ImGuiWindow_SetMemoryDrawListIdxCapacity(self.handle(), C.int(v))
}

func (self Window) GetMemoryDrawListIdxCapacity() int {
	return int(C.ImGuiWindow_GetMemoryDrawListIdxCapacity(self.handle()))
}

func (self Window) SetMemoryDrawListVtxCapacity(v int32) {
	C.ImGuiWindow_SetMemoryDrawListVtxCapacity(self.handle(), C.int(v))
}

func (self Window) GetMemoryDrawListVtxCapacity() int {
	return int(C.ImGuiWindow_GetMemoryDrawListVtxCapacity(self.handle()))
}

func (self Window) SetMemoryCompacted(v bool) {
	C.ImGuiWindow_SetMemoryCompacted(self.handle(), C.bool(v))
}

func (self Window) GetMemoryCompacted() bool {
	return C.ImGuiWindow_GetMemoryCompacted(self.handle()) == C.bool(true)
}

func (self Window) SetDockIsActive(v bool) {
	C.ImGuiWindow_SetDockIsActive(self.handle(), C.bool(v))
}

func (self Window) GetDockIsActive() bool {
	return C.ImGuiWindow_GetDockIsActive(self.handle()) == C.bool(true)
}

func (self Window) SetDockNodeIsVisible(v bool) {
	C.ImGuiWindow_SetDockNodeIsVisible(self.handle(), C.bool(v))
}

func (self Window) GetDockNodeIsVisible() bool {
	return C.ImGuiWindow_GetDockNodeIsVisible(self.handle()) == C.bool(true)
}

func (self Window) SetDockTabIsVisible(v bool) {
	C.ImGuiWindow_SetDockTabIsVisible(self.handle(), C.bool(v))
}

func (self Window) GetDockTabIsVisible() bool {
	return C.ImGuiWindow_GetDockTabIsVisible(self.handle()) == C.bool(true)
}

func (self Window) SetDockTabWantClose(v bool) {
	C.ImGuiWindow_SetDockTabWantClose(self.handle(), C.bool(v))
}

func (self Window) GetDockTabWantClose() bool {
	return C.ImGuiWindow_GetDockTabWantClose(self.handle()) == C.bool(true)
}

func (self Window) SetDockOrder(v int) {
	C.ImGuiWindow_SetDockOrder(self.handle(), C.short(v))
}

func (self Window) GetDockOrder() int {
	return int(C.ImGuiWindow_GetDockOrder(self.handle()))
}

func (self Window) GetDockStyle() WindowDockStyle {
	return newWindowDockStyleFromC(C.ImGuiWindow_GetDockStyle(self.handle()))
}

func (self Window) SetDockNode(v DockNode) {
	C.ImGuiWindow_SetDockNode(self.handle(), v.handle())
}

func (self Window) GetDockNode() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiWindow_GetDockNode(self.handle())))
}

func (self Window) SetDockNodeAsHost(v DockNode) {
	C.ImGuiWindow_SetDockNodeAsHost(self.handle(), v.handle())
}

func (self Window) GetDockNodeAsHost() DockNode {
	return (DockNode)(unsafe.Pointer(C.ImGuiWindow_GetDockNodeAsHost(self.handle())))
}

func (self Window) SetDockId(v ImGuiID) {
	C.ImGuiWindow_SetDockId(self.handle(), C.ImGuiID(v))
}

func (self Window) GetDockId() ImGuiID {
	return ImGuiID(C.ImGuiWindow_GetDockId(self.handle()))
}

func (self Window) SetDockTabItemStatusFlags(v ItemStatusFlags) {
	C.ImGuiWindow_SetDockTabItemStatusFlags(self.handle(), C.ImGuiItemStatusFlags(v))
}

func (self Window) GetDockTabItemStatusFlags() ItemStatusFlags {
	return ItemStatusFlags(C.ImGuiWindow_GetDockTabItemStatusFlags(self.handle()))
}

func (self Window) SetDockTabItemRect(v Rect) {
	C.ImGuiWindow_SetDockTabItemRect(self.handle(), v.toC())
}

func (self Window) GetDockTabItemRect() Rect {
	out := &Rect{}
	out.fromC(C.ImGuiWindow_GetDockTabItemRect(self.handle()))
	return *out
}

func (self WindowClass) SetClassId(v ImGuiID) {
	C.ImGuiWindowClass_SetClassId(self.handle(), C.ImGuiID(v))
}

func (self WindowClass) GetClassId() ImGuiID {
	return ImGuiID(C.ImGuiWindowClass_GetClassId(self.handle()))
}

func (self WindowClass) SetParentViewportId(v ImGuiID) {
	C.ImGuiWindowClass_SetParentViewportId(self.handle(), C.ImGuiID(v))
}

func (self WindowClass) GetParentViewportId() ImGuiID {
	return ImGuiID(C.ImGuiWindowClass_GetParentViewportId(self.handle()))
}

func (self WindowClass) SetViewportFlagsOverrideSet(v ViewportFlags) {
	C.ImGuiWindowClass_SetViewportFlagsOverrideSet(self.handle(), C.ImGuiViewportFlags(v))
}

func (self WindowClass) GetViewportFlagsOverrideSet() ViewportFlags {
	return ViewportFlags(C.ImGuiWindowClass_GetViewportFlagsOverrideSet(self.handle()))
}

func (self WindowClass) SetViewportFlagsOverrideClear(v ViewportFlags) {
	C.ImGuiWindowClass_SetViewportFlagsOverrideClear(self.handle(), C.ImGuiViewportFlags(v))
}

func (self WindowClass) GetViewportFlagsOverrideClear() ViewportFlags {
	return ViewportFlags(C.ImGuiWindowClass_GetViewportFlagsOverrideClear(self.handle()))
}

func (self WindowClass) SetTabItemFlagsOverrideSet(v TabItemFlags) {
	C.ImGuiWindowClass_SetTabItemFlagsOverrideSet(self.handle(), C.ImGuiTabItemFlags(v))
}

func (self WindowClass) GetTabItemFlagsOverrideSet() TabItemFlags {
	return TabItemFlags(C.ImGuiWindowClass_GetTabItemFlagsOverrideSet(self.handle()))
}

func (self WindowClass) SetDockNodeFlagsOverrideSet(v DockNodeFlags) {
	C.ImGuiWindowClass_SetDockNodeFlagsOverrideSet(self.handle(), C.ImGuiDockNodeFlags(v))
}

func (self WindowClass) GetDockNodeFlagsOverrideSet() DockNodeFlags {
	return DockNodeFlags(C.ImGuiWindowClass_GetDockNodeFlagsOverrideSet(self.handle()))
}

func (self WindowClass) SetDockingAlwaysTabBar(v bool) {
	C.ImGuiWindowClass_SetDockingAlwaysTabBar(self.handle(), C.bool(v))
}

func (self WindowClass) GetDockingAlwaysTabBar() bool {
	return C.ImGuiWindowClass_GetDockingAlwaysTabBar(self.handle()) == C.bool(true)
}

func (self WindowClass) SetDockingAllowUnclassed(v bool) {
	C.ImGuiWindowClass_SetDockingAllowUnclassed(self.handle(), C.bool(v))
}

func (self WindowClass) GetDockingAllowUnclassed() bool {
	return C.ImGuiWindowClass_GetDockingAllowUnclassed(self.handle()) == C.bool(true)
}

func (self WindowSettings) SetID(v ImGuiID) {
	C.ImGuiWindowSettings_SetID(self.handle(), C.ImGuiID(v))
}

func (self WindowSettings) GetID() ImGuiID {
	return ImGuiID(C.ImGuiWindowSettings_GetID(self.handle()))
}

func (self WindowSettings) SetViewportId(v ImGuiID) {
	C.ImGuiWindowSettings_SetViewportId(self.handle(), C.ImGuiID(v))
}

func (self WindowSettings) GetViewportId() ImGuiID {
	return ImGuiID(C.ImGuiWindowSettings_GetViewportId(self.handle()))
}

func (self WindowSettings) SetDockId(v ImGuiID) {
	C.ImGuiWindowSettings_SetDockId(self.handle(), C.ImGuiID(v))
}

func (self WindowSettings) GetDockId() ImGuiID {
	return ImGuiID(C.ImGuiWindowSettings_GetDockId(self.handle()))
}

func (self WindowSettings) SetClassId(v ImGuiID) {
	C.ImGuiWindowSettings_SetClassId(self.handle(), C.ImGuiID(v))
}

func (self WindowSettings) GetClassId() ImGuiID {
	return ImGuiID(C.ImGuiWindowSettings_GetClassId(self.handle()))
}

func (self WindowSettings) SetDockOrder(v int) {
	C.ImGuiWindowSettings_SetDockOrder(self.handle(), C.short(v))
}

func (self WindowSettings) GetDockOrder() int {
	return int(C.ImGuiWindowSettings_GetDockOrder(self.handle()))
}

func (self WindowSettings) SetCollapsed(v bool) {
	C.ImGuiWindowSettings_SetCollapsed(self.handle(), C.bool(v))
}

func (self WindowSettings) GetCollapsed() bool {
	return C.ImGuiWindowSettings_GetCollapsed(self.handle()) == C.bool(true)
}

func (self WindowSettings) SetWantApply(v bool) {
	C.ImGuiWindowSettings_SetWantApply(self.handle(), C.bool(v))
}

func (self WindowSettings) GetWantApply() bool {
	return C.ImGuiWindowSettings_GetWantApply(self.handle()) == C.bool(true)
}

func (self WindowStackData) SetWindow(v Window) {
	C.ImGuiWindowStackData_SetWindow(self.handle(), v.handle())
}

func (self WindowStackData) GetWindow() Window {
	return (Window)(unsafe.Pointer(C.ImGuiWindowStackData_GetWindow(self.handle())))
}

func (self WindowStackData) GetParentLastItemDataBackup() LastItemData {
	return newLastItemDataFromC(C.ImGuiWindowStackData_GetParentLastItemDataBackup(self.handle()))
}

func (self WindowStackData) GetStackSizesOnBegin() StackSizes {
	return newStackSizesFromC(C.ImGuiWindowStackData_GetStackSizesOnBegin(self.handle()))
}

func (self WindowTempData) SetCursorPos(v Vec2) {
	C.ImGuiWindowTempData_SetCursorPos(self.handle(), v.toC())
}

func (self WindowTempData) GetCursorPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCursorPos(self.handle()))
	return *out
}

func (self WindowTempData) SetCursorPosPrevLine(v Vec2) {
	C.ImGuiWindowTempData_SetCursorPosPrevLine(self.handle(), v.toC())
}

func (self WindowTempData) GetCursorPosPrevLine() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCursorPosPrevLine(self.handle()))
	return *out
}

func (self WindowTempData) SetCursorStartPos(v Vec2) {
	C.ImGuiWindowTempData_SetCursorStartPos(self.handle(), v.toC())
}

func (self WindowTempData) GetCursorStartPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCursorStartPos(self.handle()))
	return *out
}

func (self WindowTempData) SetCursorMaxPos(v Vec2) {
	C.ImGuiWindowTempData_SetCursorMaxPos(self.handle(), v.toC())
}

func (self WindowTempData) GetCursorMaxPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCursorMaxPos(self.handle()))
	return *out
}

func (self WindowTempData) SetIdealMaxPos(v Vec2) {
	C.ImGuiWindowTempData_SetIdealMaxPos(self.handle(), v.toC())
}

func (self WindowTempData) GetIdealMaxPos() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetIdealMaxPos(self.handle()))
	return *out
}

func (self WindowTempData) SetCurrLineSize(v Vec2) {
	C.ImGuiWindowTempData_SetCurrLineSize(self.handle(), v.toC())
}

func (self WindowTempData) GetCurrLineSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCurrLineSize(self.handle()))
	return *out
}

func (self WindowTempData) SetPrevLineSize(v Vec2) {
	C.ImGuiWindowTempData_SetPrevLineSize(self.handle(), v.toC())
}

func (self WindowTempData) GetPrevLineSize() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetPrevLineSize(self.handle()))
	return *out
}

func (self WindowTempData) SetCurrLineTextBaseOffset(v float32) {
	C.ImGuiWindowTempData_SetCurrLineTextBaseOffset(self.handle(), C.float(v))
}

func (self WindowTempData) GetCurrLineTextBaseOffset() float32 {
	return float32(C.ImGuiWindowTempData_GetCurrLineTextBaseOffset(self.handle()))
}

func (self WindowTempData) SetPrevLineTextBaseOffset(v float32) {
	C.ImGuiWindowTempData_SetPrevLineTextBaseOffset(self.handle(), C.float(v))
}

func (self WindowTempData) GetPrevLineTextBaseOffset() float32 {
	return float32(C.ImGuiWindowTempData_GetPrevLineTextBaseOffset(self.handle()))
}

func (self WindowTempData) SetIsSameLine(v bool) {
	C.ImGuiWindowTempData_SetIsSameLine(self.handle(), C.bool(v))
}

func (self WindowTempData) GetIsSameLine() bool {
	return C.ImGuiWindowTempData_GetIsSameLine(self.handle()) == C.bool(true)
}

func (self WindowTempData) SetCursorStartPosLossyness(v Vec2) {
	C.ImGuiWindowTempData_SetCursorStartPosLossyness(self.handle(), v.toC())
}

func (self WindowTempData) GetCursorStartPosLossyness() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetCursorStartPosLossyness(self.handle()))
	return *out
}

func (self WindowTempData) SetNavLayerCurrent(v NavLayer) {
	C.ImGuiWindowTempData_SetNavLayerCurrent(self.handle(), C.ImGuiNavLayer(v))
}

func (self WindowTempData) GetNavLayerCurrent() NavLayer {
	return NavLayer(C.ImGuiWindowTempData_GetNavLayerCurrent(self.handle()))
}

func (self WindowTempData) SetNavLayersActiveMask(v int) {
	C.ImGuiWindowTempData_SetNavLayersActiveMask(self.handle(), C.short(v))
}

func (self WindowTempData) GetNavLayersActiveMask() int {
	return int(C.ImGuiWindowTempData_GetNavLayersActiveMask(self.handle()))
}

func (self WindowTempData) SetNavLayersActiveMaskNext(v int) {
	C.ImGuiWindowTempData_SetNavLayersActiveMaskNext(self.handle(), C.short(v))
}

func (self WindowTempData) GetNavLayersActiveMaskNext() int {
	return int(C.ImGuiWindowTempData_GetNavLayersActiveMaskNext(self.handle()))
}

func (self WindowTempData) SetNavFocusScopeIdCurrent(v ImGuiID) {
	C.ImGuiWindowTempData_SetNavFocusScopeIdCurrent(self.handle(), C.ImGuiID(v))
}

func (self WindowTempData) GetNavFocusScopeIdCurrent() ImGuiID {
	return ImGuiID(C.ImGuiWindowTempData_GetNavFocusScopeIdCurrent(self.handle()))
}

func (self WindowTempData) SetNavHideHighlightOneFrame(v bool) {
	C.ImGuiWindowTempData_SetNavHideHighlightOneFrame(self.handle(), C.bool(v))
}

func (self WindowTempData) GetNavHideHighlightOneFrame() bool {
	return C.ImGuiWindowTempData_GetNavHideHighlightOneFrame(self.handle()) == C.bool(true)
}

func (self WindowTempData) SetNavHasScroll(v bool) {
	C.ImGuiWindowTempData_SetNavHasScroll(self.handle(), C.bool(v))
}

func (self WindowTempData) GetNavHasScroll() bool {
	return C.ImGuiWindowTempData_GetNavHasScroll(self.handle()) == C.bool(true)
}

func (self WindowTempData) SetMenuBarAppending(v bool) {
	C.ImGuiWindowTempData_SetMenuBarAppending(self.handle(), C.bool(v))
}

func (self WindowTempData) GetMenuBarAppending() bool {
	return C.ImGuiWindowTempData_GetMenuBarAppending(self.handle()) == C.bool(true)
}

func (self WindowTempData) SetMenuBarOffset(v Vec2) {
	C.ImGuiWindowTempData_SetMenuBarOffset(self.handle(), v.toC())
}

func (self WindowTempData) GetMenuBarOffset() Vec2 {
	out := &Vec2{}
	out.fromC(C.ImGuiWindowTempData_GetMenuBarOffset(self.handle()))
	return *out
}

func (self WindowTempData) GetMenuColumns() MenuColumns {
	return newMenuColumnsFromC(C.ImGuiWindowTempData_GetMenuColumns(self.handle()))
}

func (self WindowTempData) SetTreeDepth(v int32) {
	C.ImGuiWindowTempData_SetTreeDepth(self.handle(), C.int(v))
}

func (self WindowTempData) GetTreeDepth() int {
	return int(C.ImGuiWindowTempData_GetTreeDepth(self.handle()))
}

func (self WindowTempData) SetTreeJumpToParentOnPopMask(v uint32) {
	C.ImGuiWindowTempData_SetTreeJumpToParentOnPopMask(self.handle(), C.ImU32(v))
}

func (self WindowTempData) GetTreeJumpToParentOnPopMask() uint32 {
	return uint32(C.ImGuiWindowTempData_GetTreeJumpToParentOnPopMask(self.handle()))
}

func (self WindowTempData) SetStateStorage(v Storage) {
	C.ImGuiWindowTempData_SetStateStorage(self.handle(), v.handle())
}

func (self WindowTempData) GetStateStorage() Storage {
	return (Storage)(unsafe.Pointer(C.ImGuiWindowTempData_GetStateStorage(self.handle())))
}

func (self WindowTempData) SetCurrentColumns(v OldColumns) {
	C.ImGuiWindowTempData_SetCurrentColumns(self.handle(), v.handle())
}

func (self WindowTempData) GetCurrentColumns() OldColumns {
	return (OldColumns)(unsafe.Pointer(C.ImGuiWindowTempData_GetCurrentColumns(self.handle())))
}

func (self WindowTempData) SetCurrentTableIdx(v int32) {
	C.ImGuiWindowTempData_SetCurrentTableIdx(self.handle(), C.int(v))
}

func (self WindowTempData) GetCurrentTableIdx() int {
	return int(C.ImGuiWindowTempData_GetCurrentTableIdx(self.handle()))
}

func (self WindowTempData) SetLayoutType(v LayoutType) {
	C.ImGuiWindowTempData_SetLayoutType(self.handle(), C.ImGuiLayoutType(v))
}

func (self WindowTempData) GetLayoutType() LayoutType {
	return LayoutType(C.ImGuiWindowTempData_GetLayoutType(self.handle()))
}

func (self WindowTempData) SetParentLayoutType(v LayoutType) {
	C.ImGuiWindowTempData_SetParentLayoutType(self.handle(), C.ImGuiLayoutType(v))
}

func (self WindowTempData) GetParentLayoutType() LayoutType {
	return LayoutType(C.ImGuiWindowTempData_GetParentLayoutType(self.handle()))
}

func (self WindowTempData) SetItemWidth(v float32) {
	C.ImGuiWindowTempData_SetItemWidth(self.handle(), C.float(v))
}

func (self WindowTempData) GetItemWidth() float32 {
	return float32(C.ImGuiWindowTempData_GetItemWidth(self.handle()))
}

func (self WindowTempData) SetTextWrapPos(v float32) {
	C.ImGuiWindowTempData_SetTextWrapPos(self.handle(), C.float(v))
}

func (self WindowTempData) GetTextWrapPos() float32 {
	return float32(C.ImGuiWindowTempData_GetTextWrapPos(self.handle()))
}
