// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

#pragma once

#include "cimmarkdown_wrapper.h"

#ifdef __cplusplus
extern "C" {
#endif

extern void wrap_Emphasis_SetState(Emphasis *EmphasisPtr, EmphasisState v);
extern EmphasisState wrap_Emphasis_GetState(Emphasis *self);
extern void wrap_Emphasis_SetText(Emphasis *EmphasisPtr, TextBlock v);
extern TextBlock wrap_Emphasis_GetText(Emphasis *self);
extern void wrap_Emphasis_SetSym(Emphasis *EmphasisPtr, char v);
extern char wrap_Emphasis_GetSym(Emphasis *self);
extern void wrap_Line_SetIsHeading(Line *LinePtr, bool v);
extern bool wrap_Line_GetIsHeading(Line *self);
extern void wrap_Line_SetIsEmphasis(Line *LinePtr, bool v);
extern bool wrap_Line_GetIsEmphasis(Line *self);
extern void wrap_Line_SetIsUnorderedListStart(Line *LinePtr, bool v);
extern bool wrap_Line_GetIsUnorderedListStart(Line *self);
extern void wrap_Line_SetIsLeadingSpace(Line *LinePtr, bool v);
extern bool wrap_Line_GetIsLeadingSpace(Line *self);
extern void wrap_Line_SetLeadSpaceCount(Line *LinePtr, int v);
extern int wrap_Line_GetLeadSpaceCount(Line *self);
extern void wrap_Line_SetHeadingCount(Line *LinePtr, int v);
extern int wrap_Line_GetHeadingCount(Line *self);
extern void wrap_Line_SetEmphasisCount(Line *LinePtr, int v);
extern int wrap_Line_GetEmphasisCount(Line *self);
extern void wrap_Line_SetLineStart(Line *LinePtr, int v);
extern int wrap_Line_GetLineStart(Line *self);
extern void wrap_Line_SetLineEnd(Line *LinePtr, int v);
extern int wrap_Line_GetLineEnd(Line *self);
extern void wrap_Line_SetLastRenderPosition(Line *LinePtr, int v);
extern int wrap_Line_GetLastRenderPosition(Line *self);
extern void wrap_Link_SetState(Link *LinkPtr, LinkState v);
extern LinkState wrap_Link_GetState(Link *self);
extern void wrap_Link_SetText(Link *LinkPtr, TextBlock v);
extern TextBlock wrap_Link_GetText(Link *self);
extern void wrap_Link_SetUrl(Link *LinkPtr, TextBlock v);
extern TextBlock wrap_Link_GetUrl(Link *self);
extern void wrap_Link_SetIsImage(Link *LinkPtr, bool v);
extern bool wrap_Link_GetIsImage(Link *self);
extern void wrap_Link_SetNum_brackets_open(Link *LinkPtr, int v);
extern int wrap_Link_GetNum_brackets_open(Link *self);
extern void wrap_MarkdownConfig_SetLinkCallback(MarkdownConfig *MarkdownConfigPtr, MarkdownLinkCallback* v);
extern MarkdownLinkCallback* wrap_MarkdownConfig_GetLinkCallback(MarkdownConfig *self);
extern void wrap_MarkdownConfig_SetTooltipCallback(MarkdownConfig *MarkdownConfigPtr, MarkdownTooltipCallback* v);
extern MarkdownTooltipCallback* wrap_MarkdownConfig_GetTooltipCallback(MarkdownConfig *self);
extern void wrap_MarkdownConfig_SetImageCallback(MarkdownConfig *MarkdownConfigPtr, MarkdownImageCallback* v);
extern MarkdownImageCallback* wrap_MarkdownConfig_GetImageCallback(MarkdownConfig *self);
extern void wrap_MarkdownConfig_SetLinkIcon(MarkdownConfig *MarkdownConfigPtr, const char* v);
extern const char* wrap_MarkdownConfig_GetLinkIcon(MarkdownConfig *self);
extern void wrap_MarkdownConfig_SetHeadingFormats(MarkdownConfig *MarkdownConfigPtr, MarkdownHeadingFormat* v);
extern MarkdownHeadingFormat* wrap_MarkdownConfig_GetHeadingFormats(MarkdownConfig *self);
extern MarkdownHeadingFormat cimmarkdown_MarkdownHeadingFormat_GetAtIdx(MarkdownHeadingFormat *self, int index);
extern void wrap_MarkdownConfig_SetUserData(MarkdownConfig *MarkdownConfigPtr, uintptr_t v);
extern uintptr_t wrap_MarkdownConfig_GetUserData(MarkdownConfig *self);
extern void wrap_MarkdownConfig_SetFormatCallback(MarkdownConfig *MarkdownConfigPtr, MarkdownFormalCallback* v);
extern MarkdownFormalCallback* wrap_MarkdownConfig_GetFormatCallback(MarkdownConfig *self);
extern void wrap_MarkdownFormatInfo_SetType(MarkdownFormatInfo *MarkdownFormatInfoPtr, MarkdownFormatType v);
extern MarkdownFormatType wrap_MarkdownFormatInfo_GetType(MarkdownFormatInfo *self);
extern void wrap_MarkdownFormatInfo_SetLevel(MarkdownFormatInfo *MarkdownFormatInfoPtr, int32_t v);
extern int32_t wrap_MarkdownFormatInfo_GetLevel(MarkdownFormatInfo *self);
extern void wrap_MarkdownFormatInfo_SetItemHovered(MarkdownFormatInfo *MarkdownFormatInfoPtr, bool v);
extern bool wrap_MarkdownFormatInfo_GetItemHovered(MarkdownFormatInfo *self);
extern void wrap_MarkdownFormatInfo_SetConfig(MarkdownFormatInfo *MarkdownFormatInfoPtr, const MarkdownConfig* v);
extern const MarkdownConfig* wrap_MarkdownFormatInfo_GetConfig(MarkdownFormatInfo *self);
extern void wrap_MarkdownHeadingFormat_SetFont(MarkdownHeadingFormat *MarkdownHeadingFormatPtr, ImFont* v);
extern ImFont* wrap_MarkdownHeadingFormat_GetFont(MarkdownHeadingFormat *self);
extern void wrap_MarkdownHeadingFormat_SetSeparator(MarkdownHeadingFormat *MarkdownHeadingFormatPtr, bool v);
extern bool wrap_MarkdownHeadingFormat_GetSeparator(MarkdownHeadingFormat *self);
extern void wrap_MarkdownImageData_SetIsValid(MarkdownImageData *MarkdownImageDataPtr, bool v);
extern bool wrap_MarkdownImageData_GetIsValid(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetUseLinkCallback(MarkdownImageData *MarkdownImageDataPtr, bool v);
extern bool wrap_MarkdownImageData_GetUseLinkCallback(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetUser_texture_id(MarkdownImageData *MarkdownImageDataPtr, ImTextureID v);
extern ImTextureID wrap_MarkdownImageData_GetUser_texture_id(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetSize(MarkdownImageData *MarkdownImageDataPtr, ImVec2 v);
extern ImVec2 wrap_MarkdownImageData_GetSize(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetUv0(MarkdownImageData *MarkdownImageDataPtr, ImVec2 v);
extern ImVec2 wrap_MarkdownImageData_GetUv0(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetUv1(MarkdownImageData *MarkdownImageDataPtr, ImVec2 v);
extern ImVec2 wrap_MarkdownImageData_GetUv1(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetTint_col(MarkdownImageData *MarkdownImageDataPtr, ImVec4 v);
extern ImVec4 wrap_MarkdownImageData_GetTint_col(MarkdownImageData *self);
extern void wrap_MarkdownImageData_SetBorder_col(MarkdownImageData *MarkdownImageDataPtr, ImVec4 v);
extern ImVec4 wrap_MarkdownImageData_GetBorder_col(MarkdownImageData *self);
extern void wrap_MarkdownLinkCallbackData_SetText(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, const char* v);
extern const char* wrap_MarkdownLinkCallbackData_GetText(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownLinkCallbackData_SetTextLength(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, int v);
extern int wrap_MarkdownLinkCallbackData_GetTextLength(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownLinkCallbackData_SetLink(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, const char* v);
extern const char* wrap_MarkdownLinkCallbackData_GetLink(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownLinkCallbackData_SetLinkLength(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, int v);
extern int wrap_MarkdownLinkCallbackData_GetLinkLength(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownLinkCallbackData_SetUserData(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, uintptr_t v);
extern uintptr_t wrap_MarkdownLinkCallbackData_GetUserData(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownLinkCallbackData_SetIsImage(MarkdownLinkCallbackData *MarkdownLinkCallbackDataPtr, bool v);
extern bool wrap_MarkdownLinkCallbackData_GetIsImage(MarkdownLinkCallbackData *self);
extern void wrap_MarkdownTooltipCallbackData_SetLinkData(MarkdownTooltipCallbackData *MarkdownTooltipCallbackDataPtr, MarkdownLinkCallbackData v);
extern MarkdownLinkCallbackData wrap_MarkdownTooltipCallbackData_GetLinkData(MarkdownTooltipCallbackData *self);
extern void wrap_MarkdownTooltipCallbackData_SetLinkIcon(MarkdownTooltipCallbackData *MarkdownTooltipCallbackDataPtr, const char* v);
extern const char* wrap_MarkdownTooltipCallbackData_GetLinkIcon(MarkdownTooltipCallbackData *self);
extern void wrap_TextBlock_SetStart(TextBlock *TextBlockPtr, int v);
extern int wrap_TextBlock_GetStart(TextBlock *self);
extern void wrap_TextBlock_SetStop(TextBlock *TextBlockPtr, int v);
extern int wrap_TextBlock_GetStop(TextBlock *self);

#ifdef __cplusplus
}
#endif
