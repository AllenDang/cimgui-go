// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include <stdlib.h>
// #include <memory.h>
// #include "extra_types.h"
// #include "cimgui_wrapper.h"
import "C"
import "unsafe"

type DrawIdx uint16

func (self DrawIdx) handle() (result *C.ImDrawIdx, fin func()) {
	return (*C.ImDrawIdx)(C.ushort(self)), func() {}
}

func (self DrawIdx) c() (C.ImDrawIdx, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newDrawIdxFromC(cvalue *C.ImDrawIdx) *DrawIdx {
	return uint16(cvalue)
}

type DockNodeSettings C.ImGuiDockNodeSettings

func (self DockNodeSettings) handle() (result *C.ImGuiDockNodeSettings, fin func()) {
	result = (*C.ImGuiDockNodeSettings)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self DockNodeSettings) c() (C.ImGuiDockNodeSettings, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newDockNodeSettingsFromC(cvalue *C.ImGuiDockNodeSettings) *DockNodeSettings {
	return (*DockNodeSettings)(cvalue)
}

type DockRequest C.ImGuiDockRequest

func (self DockRequest) handle() (result *C.ImGuiDockRequest, fin func()) {
	result = (*C.ImGuiDockRequest)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self DockRequest) c() (C.ImGuiDockRequest, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newDockRequestFromC(cvalue *C.ImGuiDockRequest) *DockRequest {
	return (*DockRequest)(cvalue)
}

type ID uint32

func (self ID) handle() (result *C.ImGuiID, fin func()) {
	return (*C.ImGuiID)(C.uint(self)), func() {}
}

func (self ID) c() (C.ImGuiID, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newIDFromC(cvalue *C.ImGuiID) *ID {
	return uint32(cvalue)
}

type InputTextDeactivateData C.ImGuiInputTextDeactivateData

func (self InputTextDeactivateData) handle() (result *C.ImGuiInputTextDeactivateData, fin func()) {
	result = (*C.ImGuiInputTextDeactivateData)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self InputTextDeactivateData) c() (C.ImGuiInputTextDeactivateData, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newInputTextDeactivateDataFromC(cvalue *C.ImGuiInputTextDeactivateData) *InputTextDeactivateData {
	return (*InputTextDeactivateData)(cvalue)
}

type KeyChord int32

func (self KeyChord) handle() (result *C.ImGuiKeyChord, fin func()) {
	return (*C.ImGuiKeyChord)(C.int(self)), func() {}
}

func (self KeyChord) c() (C.ImGuiKeyChord, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newKeyChordFromC(cvalue *C.ImGuiKeyChord) *KeyChord {
	return int32(cvalue)
}

type KeyRoutingIndex int

func (self KeyRoutingIndex) handle() (result *C.ImGuiKeyRoutingIndex, fin func()) {
	return (*C.ImGuiKeyRoutingIndex)(C.ImS16(self)), func() {}
}

func (self KeyRoutingIndex) c() (C.ImGuiKeyRoutingIndex, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newKeyRoutingIndexFromC(cvalue *C.ImGuiKeyRoutingIndex) *KeyRoutingIndex {
	return int(cvalue)
}

type SelectionUserData int64

func (self SelectionUserData) handle() (result *C.ImGuiSelectionUserData, fin func()) {
	return (*C.ImGuiSelectionUserData)(C.ImS64(self)), func() {}
}

func (self SelectionUserData) c() (C.ImGuiSelectionUserData, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newSelectionUserDataFromC(cvalue *C.ImGuiSelectionUserData) *SelectionUserData {
	return int64(cvalue)
}

type TableColumnIdx int

func (self TableColumnIdx) handle() (result *C.ImGuiTableColumnIdx, fin func()) {
	return (*C.ImGuiTableColumnIdx)(C.ImS16(self)), func() {}
}

func (self TableColumnIdx) c() (C.ImGuiTableColumnIdx, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTableColumnIdxFromC(cvalue *C.ImGuiTableColumnIdx) *TableColumnIdx {
	return int(cvalue)
}

type TableColumnsSettings C.ImGuiTableColumnsSettings

func (self TableColumnsSettings) handle() (result *C.ImGuiTableColumnsSettings, fin func()) {
	result = (*C.ImGuiTableColumnsSettings)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self TableColumnsSettings) c() (C.ImGuiTableColumnsSettings, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTableColumnsSettingsFromC(cvalue *C.ImGuiTableColumnsSettings) *TableColumnsSettings {
	return (*TableColumnsSettings)(cvalue)
}

type TableDrawChannelIdx uint16

func (self TableDrawChannelIdx) handle() (result *C.ImGuiTableDrawChannelIdx, fin func()) {
	return (*C.ImGuiTableDrawChannelIdx)(C.ImU16(self)), func() {}
}

func (self TableDrawChannelIdx) c() (C.ImGuiTableDrawChannelIdx, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTableDrawChannelIdxFromC(cvalue *C.ImGuiTableDrawChannelIdx) *TableDrawChannelIdx {
	return uint16(cvalue)
}

type PoolIdx int32

func (self PoolIdx) handle() (result *C.ImPoolIdx, fin func()) {
	return (*C.ImPoolIdx)(C.int(self)), func() {}
}

func (self PoolIdx) c() (C.ImPoolIdx, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newPoolIdxFromC(cvalue *C.ImPoolIdx) *PoolIdx {
	return int32(cvalue)
}

type TextureID unsafe.Pointer

func (self TextureID) handle() (result *C.ImTextureID, fin func()) {
	selfArg, selfFin := WrapVoidPtr(self)
	return (*C.ImTextureID)(selfArg), func() { selfFin() }
}

func (self TextureID) c() (C.ImTextureID, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTextureIDFromC(cvalue *C.ImTextureID) *TextureID {
	return unsafe.Pointer(cvalue)
}

type Wchar16 uint16

func (self Wchar16) handle() (result *C.ImWchar16, fin func()) {
	return (*C.ImWchar16)(C.ushort(self)), func() {}
}

func (self Wchar16) c() (C.ImWchar16, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newWchar16FromC(cvalue *C.ImWchar16) *Wchar16 {
	return uint16(cvalue)
}

type Wchar32 uint32

func (self Wchar32) handle() (result *C.ImWchar32, fin func()) {
	return (*C.ImWchar32)(C.uint(self)), func() {}
}

func (self Wchar32) c() (C.ImWchar32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newWchar32FromC(cvalue *C.ImWchar32) *Wchar32 {
	return uint32(cvalue)
}
