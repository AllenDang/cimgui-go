// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include <stdlib.h>
// #include <memory.h>
// #include "extra_types.h"
// #include "cimgui_wrapper.h"
import "C"
import "unsafe"

type BitArrayPtr *uint32

func (self BitArrayPtr) handle() (result **uint32, fin func()) {
	selfArg, selfFin := WrapNumberPtr[C.ImU32, uint32](self)
	return selfArg, func() { selfFin() }
}

func (self BitArrayPtr) c() (*uint32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newBitArrayPtrFromC(cvalue *C.ImU32) {
	return (*uint32)(cvalue)
}

type DrawIdx uint16

func (self DrawIdx) handle() (result *uint16, fin func()) {
	return C.ushort(self), func() {}
}

func (self DrawIdx) c() (uint16, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newDrawIdxFromC(cvalue C.ushort) {
	return uint16(cvalue)
}

type DockNodeSettings C.ImGuiDockNodeSettings

func (self DockNodeSettings) handle() (result *C.ImGuiDockNodeSettings, fin func()) {
	result = (*C.ImGuiDockNodeSettings)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self DockNodeSettings) c() (C.ImGuiDockNodeSettings, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newImGuiDockNodeSettingsFromC(cvalue *C.ImGuiDockNodeSettings) *DockNodeSettings {
	return (*DockNodeSettings)(cvalue)
}

type DockRequest C.ImGuiDockRequest

func (self DockRequest) handle() (result *C.ImGuiDockRequest, fin func()) {
	result = (*C.ImGuiDockRequest)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self DockRequest) c() (C.ImGuiDockRequest, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newImGuiDockRequestFromC(cvalue *C.ImGuiDockRequest) *DockRequest {
	return (*DockRequest)(cvalue)
}

type ID uint32

func (self ID) handle() (result *uint32, fin func()) {
	return C.uint(self), func() {}
}

func (self ID) c() (uint32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newIDFromC(cvalue C.uint) {
	return uint32(cvalue)
}

type InputTextDeactivateData C.ImGuiInputTextDeactivateData

func (self InputTextDeactivateData) handle() (result *C.ImGuiInputTextDeactivateData, fin func()) {
	result = (*C.ImGuiInputTextDeactivateData)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self InputTextDeactivateData) c() (C.ImGuiInputTextDeactivateData, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newImGuiInputTextDeactivateDataFromC(cvalue *C.ImGuiInputTextDeactivateData) *InputTextDeactivateData {
	return (*InputTextDeactivateData)(cvalue)
}

type KeyChord int32

func (self KeyChord) handle() (result *int32, fin func()) {
	return C.int(self), func() {}
}

func (self KeyChord) c() (int32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newKeyChordFromC(cvalue C.int) {
	return int32(cvalue)
}

type KeyRoutingIndex int

func (self KeyRoutingIndex) handle() (result *int, fin func()) {
	return C.ImS16(self), func() {}
}

func (self KeyRoutingIndex) c() (int, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newKeyRoutingIndexFromC(cvalue C.ImS16) {
	return int(cvalue)
}

type SelectionUserData int64

func (self SelectionUserData) handle() (result *int64, fin func()) {
	return C.ImS64(self), func() {}
}

func (self SelectionUserData) c() (int64, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newSelectionUserDataFromC(cvalue C.ImS64) {
	return int64(cvalue)
}

type TableColumnIdx int

func (self TableColumnIdx) handle() (result *int, fin func()) {
	return C.ImS16(self), func() {}
}

func (self TableColumnIdx) c() (int, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTableColumnIdxFromC(cvalue C.ImS16) {
	return int(cvalue)
}

type TableColumnsSettings C.ImGuiTableColumnsSettings

func (self TableColumnsSettings) handle() (result *C.ImGuiTableColumnsSettings, fin func()) {
	result = (*C.ImGuiTableColumnsSettings)(unsafe.Pointer(&self))
	return result, func() {}
}

func (self TableColumnsSettings) c() (C.ImGuiTableColumnsSettings, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newImGuiTableColumnsSettingsFromC(cvalue *C.ImGuiTableColumnsSettings) *TableColumnsSettings {
	return (*TableColumnsSettings)(cvalue)
}

type TableDrawChannelIdx uint16

func (self TableDrawChannelIdx) handle() (result *uint16, fin func()) {
	return C.ImU16(self), func() {}
}

func (self TableDrawChannelIdx) c() (uint16, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTableDrawChannelIdxFromC(cvalue C.ImU16) {
	return uint16(cvalue)
}

type PoolIdx int32

func (self PoolIdx) handle() (result *int32, fin func()) {
	return C.int(self), func() {}
}

func (self PoolIdx) c() (int32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newPoolIdxFromC(cvalue C.int) {
	return int32(cvalue)
}

type TextureID unsafe.Pointer

func (self TextureID) handle() (result *unsafe.Pointer, fin func()) {
	selfArg, selfFin := WrapVoidPtr(self)
	return selfArg, func() { selfFin() }
}

func (self TextureID) c() (unsafe.Pointer, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newTextureIDFromC(cvalue unsafe.Pointer) {
	return unsafe.Pointer(cvalue)
}

type U16 uint16

func (self U16) handle() (result *uint16, fin func()) {
	return C.ushort(self), func() {}
}

func (self U16) c() (uint16, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newU16FromC(cvalue C.ushort) {
	return uint16(cvalue)
}

type U32 uint32

func (self U32) handle() (result *uint32, fin func()) {
	return C.uint(self), func() {}
}

func (self U32) c() (uint32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newU32FromC(cvalue C.uint) {
	return uint32(cvalue)
}

type U8 uint

func (self U8) handle() (result *uint, fin func()) {
	return C.uchar(self), func() {}
}

func (self U8) c() (uint, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newU8FromC(cvalue C.uchar) {
	return uint(cvalue)
}

type Wchar16 uint16

func (self Wchar16) handle() (result *uint16, fin func()) {
	return C.ushort(self), func() {}
}

func (self Wchar16) c() (uint16, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newWchar16FromC(cvalue C.ushort) {
	return uint16(cvalue)
}

type Wchar32 uint32

func (self Wchar32) handle() (result *uint32, fin func()) {
	return C.uint(self), func() {}
}

func (self Wchar32) c() (uint32, func()) {
	result, fin := self.handle()
	return *result, fin
}

func newWchar32FromC(cvalue C.uint) {
	return uint32(cvalue)
}
