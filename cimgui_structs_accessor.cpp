// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.


#include <string.h>
#include "cimgui_wrapper.h"
#include "cimgui_structs_accessor.h"

void wrap_ImBitVector_SetStorage(ImBitVector *ImBitVectorPtr, ImVector_ImU32 v) { ImBitVectorPtr->Storage = v; }
ImVector_ImU32 wrap_ImBitVector_GetStorage(ImBitVector *self) { return self->Storage; }
void wrap_ImColor_SetValue(ImColor *ImColorPtr, ImVec4 v) { ImColorPtr->Value = v; }
ImVec4 wrap_ImColor_GetValue(ImColor *self) { return self->Value; }
void wrap_ImDrawChannel_Set_CmdBuffer(ImDrawChannel *ImDrawChannelPtr, ImVector_ImDrawCmd v) { ImDrawChannelPtr->_CmdBuffer = v; }
ImVector_ImDrawCmd wrap_ImDrawChannel_Get_CmdBuffer(ImDrawChannel *self) { return self->_CmdBuffer; }
void wrap_ImDrawChannel_Set_IdxBuffer(ImDrawChannel *ImDrawChannelPtr, ImVector_ImDrawIdx v) { ImDrawChannelPtr->_IdxBuffer = v; }
ImVector_ImDrawIdx wrap_ImDrawChannel_Get_IdxBuffer(ImDrawChannel *self) { return self->_IdxBuffer; }
void wrap_ImDrawCmd_SetClipRect(ImDrawCmd *ImDrawCmdPtr, ImVec4 v) { ImDrawCmdPtr->ClipRect = v; }
ImVec4 wrap_ImDrawCmd_GetClipRect(ImDrawCmd *self) { return self->ClipRect; }
void wrap_ImDrawCmd_SetTextureId(ImDrawCmd *ImDrawCmdPtr, ImTextureID v) { ImDrawCmdPtr->TextureId = v; }
ImTextureID wrap_ImDrawCmd_GetTextureId(ImDrawCmd *self) { return self->TextureId; }
void wrap_ImDrawCmd_SetVtxOffset(ImDrawCmd *ImDrawCmdPtr, unsigned int v) { ImDrawCmdPtr->VtxOffset = v; }
unsigned int wrap_ImDrawCmd_GetVtxOffset(ImDrawCmd *self) { return self->VtxOffset; }
void wrap_ImDrawCmd_SetIdxOffset(ImDrawCmd *ImDrawCmdPtr, unsigned int v) { ImDrawCmdPtr->IdxOffset = v; }
unsigned int wrap_ImDrawCmd_GetIdxOffset(ImDrawCmd *self) { return self->IdxOffset; }
void wrap_ImDrawCmd_SetElemCount(ImDrawCmd *ImDrawCmdPtr, unsigned int v) { ImDrawCmdPtr->ElemCount = v; }
unsigned int wrap_ImDrawCmd_GetElemCount(ImDrawCmd *self) { return self->ElemCount; }
void wrap_ImDrawCmd_SetUserCallback(ImDrawCmd *ImDrawCmdPtr, ImDrawCallback v) { ImDrawCmdPtr->UserCallback = v; }
ImDrawCallback wrap_ImDrawCmd_GetUserCallback(ImDrawCmd *self) { return self->UserCallback; }
void wrap_ImDrawCmd_SetUserCallbackData(ImDrawCmd *ImDrawCmdPtr, uintptr_t v) { ImDrawCmdPtr->UserCallbackData = (void*)v; }
uintptr_t wrap_ImDrawCmd_GetUserCallbackData(ImDrawCmd *self) { return (uintptr_t)self->UserCallbackData; }
void wrap_ImDrawCmdHeader_SetClipRect(ImDrawCmdHeader *ImDrawCmdHeaderPtr, ImVec4 v) { ImDrawCmdHeaderPtr->ClipRect = v; }
ImVec4 wrap_ImDrawCmdHeader_GetClipRect(ImDrawCmdHeader *self) { return self->ClipRect; }
void wrap_ImDrawCmdHeader_SetTextureId(ImDrawCmdHeader *ImDrawCmdHeaderPtr, ImTextureID v) { ImDrawCmdHeaderPtr->TextureId = v; }
ImTextureID wrap_ImDrawCmdHeader_GetTextureId(ImDrawCmdHeader *self) { return self->TextureId; }
void wrap_ImDrawCmdHeader_SetVtxOffset(ImDrawCmdHeader *ImDrawCmdHeaderPtr, unsigned int v) { ImDrawCmdHeaderPtr->VtxOffset = v; }
unsigned int wrap_ImDrawCmdHeader_GetVtxOffset(ImDrawCmdHeader *self) { return self->VtxOffset; }
void wrap_ImDrawData_SetValid(ImDrawData *ImDrawDataPtr, bool v) { ImDrawDataPtr->Valid = v; }
bool wrap_ImDrawData_GetValid(ImDrawData *self) { return self->Valid; }
void wrap_ImDrawData_SetCmdListsCount(ImDrawData *ImDrawDataPtr, int v) { ImDrawDataPtr->CmdListsCount = v; }
int wrap_ImDrawData_GetCmdListsCount(ImDrawData *self) { return self->CmdListsCount; }
void wrap_ImDrawData_SetTotalIdxCount(ImDrawData *ImDrawDataPtr, int v) { ImDrawDataPtr->TotalIdxCount = v; }
int wrap_ImDrawData_GetTotalIdxCount(ImDrawData *self) { return self->TotalIdxCount; }
void wrap_ImDrawData_SetTotalVtxCount(ImDrawData *ImDrawDataPtr, int v) { ImDrawDataPtr->TotalVtxCount = v; }
int wrap_ImDrawData_GetTotalVtxCount(ImDrawData *self) { return self->TotalVtxCount; }
void wrap_ImDrawData_SetCmdLists(ImDrawData *ImDrawDataPtr, ImVector_ImDrawListPtr v) { ImDrawDataPtr->CmdLists = v; }
ImVector_ImDrawListPtr wrap_ImDrawData_GetCmdLists(ImDrawData *self) { return self->CmdLists; }
void wrap_ImDrawData_SetDisplayPos(ImDrawData *ImDrawDataPtr, ImVec2 v) { ImDrawDataPtr->DisplayPos = v; }
ImVec2 wrap_ImDrawData_GetDisplayPos(ImDrawData *self) { return self->DisplayPos; }
void wrap_ImDrawData_SetDisplaySize(ImDrawData *ImDrawDataPtr, ImVec2 v) { ImDrawDataPtr->DisplaySize = v; }
ImVec2 wrap_ImDrawData_GetDisplaySize(ImDrawData *self) { return self->DisplaySize; }
void wrap_ImDrawData_SetFramebufferScale(ImDrawData *ImDrawDataPtr, ImVec2 v) { ImDrawDataPtr->FramebufferScale = v; }
ImVec2 wrap_ImDrawData_GetFramebufferScale(ImDrawData *self) { return self->FramebufferScale; }
void wrap_ImDrawData_SetOwnerViewport(ImDrawData *ImDrawDataPtr, ImGuiViewport* v) { ImDrawDataPtr->OwnerViewport = v; }
ImGuiViewport* wrap_ImDrawData_GetOwnerViewport(ImDrawData *self) { return self->OwnerViewport; }
void wrap_ImDrawDataBuilder_SetLayers(ImDrawDataBuilder *ImDrawDataBuilderPtr, ImVector_ImDrawListPtr** v) { memcpy(ImDrawDataBuilderPtr->Layers, v, sizeof(ImVector_ImDrawListPtr*)*2); }
ImVector_ImDrawListPtr** wrap_ImDrawDataBuilder_GetLayers(ImDrawDataBuilder *self) { return self->Layers; }
ImVector_ImDrawListPtr* cimgui_ImVector_ImDrawListPtrPtr_GetAtIdx(ImVector_ImDrawListPtr* *self, int index) { return self[index]; }
void wrap_ImDrawDataBuilder_SetLayerData1(ImDrawDataBuilder *ImDrawDataBuilderPtr, ImVector_ImDrawListPtr v) { ImDrawDataBuilderPtr->LayerData1 = v; }
ImVector_ImDrawListPtr wrap_ImDrawDataBuilder_GetLayerData1(ImDrawDataBuilder *self) { return self->LayerData1; }
void wrap_ImDrawList_SetCmdBuffer(ImDrawList *ImDrawListPtr, ImVector_ImDrawCmd v) { ImDrawListPtr->CmdBuffer = v; }
ImVector_ImDrawCmd wrap_ImDrawList_GetCmdBuffer(ImDrawList *self) { return self->CmdBuffer; }
void wrap_ImDrawList_SetIdxBuffer(ImDrawList *ImDrawListPtr, ImVector_ImDrawIdx v) { ImDrawListPtr->IdxBuffer = v; }
ImVector_ImDrawIdx wrap_ImDrawList_GetIdxBuffer(ImDrawList *self) { return self->IdxBuffer; }
void wrap_ImDrawList_SetVtxBuffer(ImDrawList *ImDrawListPtr, ImVector_ImDrawVert v) { ImDrawListPtr->VtxBuffer = v; }
ImVector_ImDrawVert wrap_ImDrawList_GetVtxBuffer(ImDrawList *self) { return self->VtxBuffer; }
void wrap_ImDrawList_SetFlags(ImDrawList *ImDrawListPtr, ImDrawListFlags v) { ImDrawListPtr->Flags = v; }
ImDrawListFlags wrap_ImDrawList_GetFlags(ImDrawList *self) { return self->Flags; }
void wrap_ImDrawList_Set_VtxCurrentIdx(ImDrawList *ImDrawListPtr, unsigned int v) { ImDrawListPtr->_VtxCurrentIdx = v; }
unsigned int wrap_ImDrawList_Get_VtxCurrentIdx(ImDrawList *self) { return self->_VtxCurrentIdx; }
void wrap_ImDrawList_Set_Data(ImDrawList *ImDrawListPtr, ImDrawListSharedData* v) { ImDrawListPtr->_Data = v; }
ImDrawListSharedData* wrap_ImDrawList_Get_Data(ImDrawList *self) { return self->_Data; }
void wrap_ImDrawList_Set_OwnerName(ImDrawList *ImDrawListPtr, const char* v) { ImDrawListPtr->_OwnerName = v; }
const char* wrap_ImDrawList_Get_OwnerName(ImDrawList *self) { return self->_OwnerName; }
void wrap_ImDrawList_Set_VtxWritePtr(ImDrawList *ImDrawListPtr, ImDrawVert* v) { ImDrawListPtr->_VtxWritePtr = v; }
ImDrawVert* wrap_ImDrawList_Get_VtxWritePtr(ImDrawList *self) { return self->_VtxWritePtr; }
void wrap_ImDrawList_Set_IdxWritePtr(ImDrawList *ImDrawListPtr, ImDrawIdx* v) { ImDrawListPtr->_IdxWritePtr = v; }
ImDrawIdx* wrap_ImDrawList_Get_IdxWritePtr(ImDrawList *self) { return self->_IdxWritePtr; }
void wrap_ImDrawList_Set_ClipRectStack(ImDrawList *ImDrawListPtr, ImVector_ImVec4 v) { ImDrawListPtr->_ClipRectStack = v; }
ImVector_ImVec4 wrap_ImDrawList_Get_ClipRectStack(ImDrawList *self) { return self->_ClipRectStack; }
void wrap_ImDrawList_Set_TextureIdStack(ImDrawList *ImDrawListPtr, ImVector_ImTextureID v) { ImDrawListPtr->_TextureIdStack = v; }
ImVector_ImTextureID wrap_ImDrawList_Get_TextureIdStack(ImDrawList *self) { return self->_TextureIdStack; }
void wrap_ImDrawList_Set_Path(ImDrawList *ImDrawListPtr, ImVector_ImVec2 v) { ImDrawListPtr->_Path = v; }
ImVector_ImVec2 wrap_ImDrawList_Get_Path(ImDrawList *self) { return self->_Path; }
void wrap_ImDrawList_Set_CmdHeader(ImDrawList *ImDrawListPtr, ImDrawCmdHeader v) { ImDrawListPtr->_CmdHeader = v; }
ImDrawCmdHeader wrap_ImDrawList_Get_CmdHeader(ImDrawList *self) { return self->_CmdHeader; }
void wrap_ImDrawList_Set_Splitter(ImDrawList *ImDrawListPtr, ImDrawListSplitter v) { ImDrawListPtr->_Splitter = v; }
ImDrawListSplitter wrap_ImDrawList_Get_Splitter(ImDrawList *self) { return self->_Splitter; }
void wrap_ImDrawList_Set_FringeScale(ImDrawList *ImDrawListPtr, float v) { ImDrawListPtr->_FringeScale = v; }
float wrap_ImDrawList_Get_FringeScale(ImDrawList *self) { return self->_FringeScale; }
void wrap_ImDrawListSharedData_SetTexUvWhitePixel(ImDrawListSharedData *ImDrawListSharedDataPtr, ImVec2 v) { ImDrawListSharedDataPtr->TexUvWhitePixel = v; }
ImVec2 wrap_ImDrawListSharedData_GetTexUvWhitePixel(ImDrawListSharedData *self) { return self->TexUvWhitePixel; }
void wrap_ImDrawListSharedData_SetFont(ImDrawListSharedData *ImDrawListSharedDataPtr, ImFont* v) { ImDrawListSharedDataPtr->Font = v; }
ImFont* wrap_ImDrawListSharedData_GetFont(ImDrawListSharedData *self) { return self->Font; }
void wrap_ImDrawListSharedData_SetFontSize(ImDrawListSharedData *ImDrawListSharedDataPtr, float v) { ImDrawListSharedDataPtr->FontSize = v; }
float wrap_ImDrawListSharedData_GetFontSize(ImDrawListSharedData *self) { return self->FontSize; }
void wrap_ImDrawListSharedData_SetCurveTessellationTol(ImDrawListSharedData *ImDrawListSharedDataPtr, float v) { ImDrawListSharedDataPtr->CurveTessellationTol = v; }
float wrap_ImDrawListSharedData_GetCurveTessellationTol(ImDrawListSharedData *self) { return self->CurveTessellationTol; }
void wrap_ImDrawListSharedData_SetCircleSegmentMaxError(ImDrawListSharedData *ImDrawListSharedDataPtr, float v) { ImDrawListSharedDataPtr->CircleSegmentMaxError = v; }
float wrap_ImDrawListSharedData_GetCircleSegmentMaxError(ImDrawListSharedData *self) { return self->CircleSegmentMaxError; }
void wrap_ImDrawListSharedData_SetClipRectFullscreen(ImDrawListSharedData *ImDrawListSharedDataPtr, ImVec4 v) { ImDrawListSharedDataPtr->ClipRectFullscreen = v; }
ImVec4 wrap_ImDrawListSharedData_GetClipRectFullscreen(ImDrawListSharedData *self) { return self->ClipRectFullscreen; }
void wrap_ImDrawListSharedData_SetInitialFlags(ImDrawListSharedData *ImDrawListSharedDataPtr, ImDrawListFlags v) { ImDrawListSharedDataPtr->InitialFlags = v; }
ImDrawListFlags wrap_ImDrawListSharedData_GetInitialFlags(ImDrawListSharedData *self) { return self->InitialFlags; }
void wrap_ImDrawListSharedData_SetTempBuffer(ImDrawListSharedData *ImDrawListSharedDataPtr, ImVector_ImVec2 v) { ImDrawListSharedDataPtr->TempBuffer = v; }
ImVector_ImVec2 wrap_ImDrawListSharedData_GetTempBuffer(ImDrawListSharedData *self) { return self->TempBuffer; }
void wrap_ImDrawListSharedData_SetArcFastVtx(ImDrawListSharedData *ImDrawListSharedDataPtr, ImVec2* v) { memcpy(ImDrawListSharedDataPtr->ArcFastVtx, v, sizeof(ImVec2)*48); }
ImVec2* wrap_ImDrawListSharedData_GetArcFastVtx(ImDrawListSharedData *self) { return self->ArcFastVtx; }
ImVec2 cimgui_ImVec2_GetAtIdx(ImVec2 *self, int index) { return self[index]; }
void wrap_ImDrawListSharedData_SetArcFastRadiusCutoff(ImDrawListSharedData *ImDrawListSharedDataPtr, float v) { ImDrawListSharedDataPtr->ArcFastRadiusCutoff = v; }
float wrap_ImDrawListSharedData_GetArcFastRadiusCutoff(ImDrawListSharedData *self) { return self->ArcFastRadiusCutoff; }
void wrap_ImDrawListSharedData_SetCircleSegmentCounts(ImDrawListSharedData *ImDrawListSharedDataPtr, ImU8* v) { memcpy(ImDrawListSharedDataPtr->CircleSegmentCounts, v, sizeof(ImU8)*64); }
ImU8* wrap_ImDrawListSharedData_GetCircleSegmentCounts(ImDrawListSharedData *self) { return self->CircleSegmentCounts; }
ImU8 cimgui_ImU8_GetAtIdx(ImU8 *self, int index) { return self[index]; }
void wrap_ImDrawListSharedData_SetTexUvLines(ImDrawListSharedData *ImDrawListSharedDataPtr, const ImVec4* v) { ImDrawListSharedDataPtr->TexUvLines = v; }
const ImVec4* wrap_ImDrawListSharedData_GetTexUvLines(ImDrawListSharedData *self) { return self->TexUvLines; }
void wrap_ImDrawListSplitter_Set_Current(ImDrawListSplitter *ImDrawListSplitterPtr, int v) { ImDrawListSplitterPtr->_Current = v; }
int wrap_ImDrawListSplitter_Get_Current(ImDrawListSplitter *self) { return self->_Current; }
void wrap_ImDrawListSplitter_Set_Count(ImDrawListSplitter *ImDrawListSplitterPtr, int v) { ImDrawListSplitterPtr->_Count = v; }
int wrap_ImDrawListSplitter_Get_Count(ImDrawListSplitter *self) { return self->_Count; }
void wrap_ImDrawListSplitter_Set_Channels(ImDrawListSplitter *ImDrawListSplitterPtr, ImVector_ImDrawChannel v) { ImDrawListSplitterPtr->_Channels = v; }
ImVector_ImDrawChannel wrap_ImDrawListSplitter_Get_Channels(ImDrawListSplitter *self) { return self->_Channels; }
void wrap_ImDrawVert_SetPos(ImDrawVert *ImDrawVertPtr, ImVec2 v) { ImDrawVertPtr->pos = v; }
ImVec2 wrap_ImDrawVert_GetPos(ImDrawVert *self) { return self->pos; }
void wrap_ImDrawVert_SetUv(ImDrawVert *ImDrawVertPtr, ImVec2 v) { ImDrawVertPtr->uv = v; }
ImVec2 wrap_ImDrawVert_GetUv(ImDrawVert *self) { return self->uv; }
void wrap_ImDrawVert_SetCol(ImDrawVert *ImDrawVertPtr, ImU32 v) { ImDrawVertPtr->col = v; }
ImU32 wrap_ImDrawVert_GetCol(ImDrawVert *self) { return self->col; }
void wrap_ImFont_SetIndexAdvanceX(ImFont *ImFontPtr, ImVector_float v) { ImFontPtr->IndexAdvanceX = v; }
ImVector_float wrap_ImFont_GetIndexAdvanceX(ImFont *self) { return self->IndexAdvanceX; }
void wrap_ImFont_SetFallbackAdvanceX(ImFont *ImFontPtr, float v) { ImFontPtr->FallbackAdvanceX = v; }
float wrap_ImFont_GetFallbackAdvanceX(ImFont *self) { return self->FallbackAdvanceX; }
void wrap_ImFont_SetFontSize(ImFont *ImFontPtr, float v) { ImFontPtr->FontSize = v; }
float wrap_ImFont_GetFontSize(ImFont *self) { return self->FontSize; }
void wrap_ImFont_SetIndexLookup(ImFont *ImFontPtr, ImVector_ImWchar v) { ImFontPtr->IndexLookup = v; }
ImVector_ImWchar wrap_ImFont_GetIndexLookup(ImFont *self) { return self->IndexLookup; }
void wrap_ImFont_SetGlyphs(ImFont *ImFontPtr, ImVector_ImFontGlyph v) { ImFontPtr->Glyphs = v; }
ImVector_ImFontGlyph wrap_ImFont_GetGlyphs(ImFont *self) { return self->Glyphs; }
void wrap_ImFont_SetFallbackGlyph(ImFont *ImFontPtr, const ImFontGlyph* v) { ImFontPtr->FallbackGlyph = v; }
const ImFontGlyph* wrap_ImFont_GetFallbackGlyph(ImFont *self) { return self->FallbackGlyph; }
void wrap_ImFont_SetContainerAtlas(ImFont *ImFontPtr, ImFontAtlas* v) { ImFontPtr->ContainerAtlas = v; }
ImFontAtlas* wrap_ImFont_GetContainerAtlas(ImFont *self) { return self->ContainerAtlas; }
void wrap_ImFont_SetConfigData(ImFont *ImFontPtr, const ImFontConfig* v) { ImFontPtr->ConfigData = v; }
const ImFontConfig* wrap_ImFont_GetConfigData(ImFont *self) { return self->ConfigData; }
void wrap_ImFont_SetConfigDataCount(ImFont *ImFontPtr, short v) { ImFontPtr->ConfigDataCount = v; }
short wrap_ImFont_GetConfigDataCount(ImFont *self) { return self->ConfigDataCount; }
void wrap_ImFont_SetFallbackChar(ImFont *ImFontPtr, ImWchar v) { ImFontPtr->FallbackChar = v; }
ImWchar wrap_ImFont_GetFallbackChar(ImFont *self) { return self->FallbackChar; }
void wrap_ImFont_SetEllipsisChar(ImFont *ImFontPtr, ImWchar v) { ImFontPtr->EllipsisChar = v; }
ImWchar wrap_ImFont_GetEllipsisChar(ImFont *self) { return self->EllipsisChar; }
void wrap_ImFont_SetEllipsisCharCount(ImFont *ImFontPtr, short v) { ImFontPtr->EllipsisCharCount = v; }
short wrap_ImFont_GetEllipsisCharCount(ImFont *self) { return self->EllipsisCharCount; }
void wrap_ImFont_SetEllipsisWidth(ImFont *ImFontPtr, float v) { ImFontPtr->EllipsisWidth = v; }
float wrap_ImFont_GetEllipsisWidth(ImFont *self) { return self->EllipsisWidth; }
void wrap_ImFont_SetEllipsisCharStep(ImFont *ImFontPtr, float v) { ImFontPtr->EllipsisCharStep = v; }
float wrap_ImFont_GetEllipsisCharStep(ImFont *self) { return self->EllipsisCharStep; }
void wrap_ImFont_SetDirtyLookupTables(ImFont *ImFontPtr, bool v) { ImFontPtr->DirtyLookupTables = v; }
bool wrap_ImFont_GetDirtyLookupTables(ImFont *self) { return self->DirtyLookupTables; }
void wrap_ImFont_SetScale(ImFont *ImFontPtr, float v) { ImFontPtr->Scale = v; }
float wrap_ImFont_GetScale(ImFont *self) { return self->Scale; }
void wrap_ImFont_SetAscent(ImFont *ImFontPtr, float v) { ImFontPtr->Ascent = v; }
float wrap_ImFont_GetAscent(ImFont *self) { return self->Ascent; }
void wrap_ImFont_SetDescent(ImFont *ImFontPtr, float v) { ImFontPtr->Descent = v; }
float wrap_ImFont_GetDescent(ImFont *self) { return self->Descent; }
void wrap_ImFont_SetMetricsTotalSurface(ImFont *ImFontPtr, int v) { ImFontPtr->MetricsTotalSurface = v; }
int wrap_ImFont_GetMetricsTotalSurface(ImFont *self) { return self->MetricsTotalSurface; }
void wrap_ImFont_SetUsed4kPagesMap(ImFont *ImFontPtr, ImU8* v) { memcpy(ImFontPtr->Used4kPagesMap, v, sizeof(ImU8)*34); }
ImU8* wrap_ImFont_GetUsed4kPagesMap(ImFont *self) { return self->Used4kPagesMap; }
void wrap_ImFontAtlas_SetFlags(ImFontAtlas *ImFontAtlasPtr, ImFontAtlasFlags v) { ImFontAtlasPtr->Flags = v; }
ImFontAtlasFlags wrap_ImFontAtlas_GetFlags(ImFontAtlas *self) { return self->Flags; }
void wrap_ImFontAtlas_SetTexDesiredWidth(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->TexDesiredWidth = v; }
int wrap_ImFontAtlas_GetTexDesiredWidth(ImFontAtlas *self) { return self->TexDesiredWidth; }
void wrap_ImFontAtlas_SetTexGlyphPadding(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->TexGlyphPadding = v; }
int wrap_ImFontAtlas_GetTexGlyphPadding(ImFontAtlas *self) { return self->TexGlyphPadding; }
void wrap_ImFontAtlas_SetLocked(ImFontAtlas *ImFontAtlasPtr, bool v) { ImFontAtlasPtr->Locked = v; }
bool wrap_ImFontAtlas_GetLocked(ImFontAtlas *self) { return self->Locked; }
void wrap_ImFontAtlas_SetUserData(ImFontAtlas *ImFontAtlasPtr, uintptr_t v) { ImFontAtlasPtr->UserData = (void*)v; }
uintptr_t wrap_ImFontAtlas_GetUserData(ImFontAtlas *self) { return (uintptr_t)self->UserData; }
void wrap_ImFontAtlas_SetTexReady(ImFontAtlas *ImFontAtlasPtr, bool v) { ImFontAtlasPtr->TexReady = v; }
bool wrap_ImFontAtlas_GetTexReady(ImFontAtlas *self) { return self->TexReady; }
void wrap_ImFontAtlas_SetTexPixelsUseColors(ImFontAtlas *ImFontAtlasPtr, bool v) { ImFontAtlasPtr->TexPixelsUseColors = v; }
bool wrap_ImFontAtlas_GetTexPixelsUseColors(ImFontAtlas *self) { return self->TexPixelsUseColors; }
void wrap_ImFontAtlas_SetTexPixelsAlpha8(ImFontAtlas *ImFontAtlasPtr, unsigned char* v) { ImFontAtlasPtr->TexPixelsAlpha8 = v; }
unsigned char* wrap_ImFontAtlas_GetTexPixelsAlpha8(ImFontAtlas *self) { return self->TexPixelsAlpha8; }
void wrap_ImFontAtlas_SetTexPixelsRGBA32(ImFontAtlas *ImFontAtlasPtr, unsigned int* v) { ImFontAtlasPtr->TexPixelsRGBA32 = v; }
unsigned int* wrap_ImFontAtlas_GetTexPixelsRGBA32(ImFontAtlas *self) { return self->TexPixelsRGBA32; }
void wrap_ImFontAtlas_SetTexWidth(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->TexWidth = v; }
int wrap_ImFontAtlas_GetTexWidth(ImFontAtlas *self) { return self->TexWidth; }
void wrap_ImFontAtlas_SetTexHeight(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->TexHeight = v; }
int wrap_ImFontAtlas_GetTexHeight(ImFontAtlas *self) { return self->TexHeight; }
void wrap_ImFontAtlas_SetTexUvScale(ImFontAtlas *ImFontAtlasPtr, ImVec2 v) { ImFontAtlasPtr->TexUvScale = v; }
ImVec2 wrap_ImFontAtlas_GetTexUvScale(ImFontAtlas *self) { return self->TexUvScale; }
void wrap_ImFontAtlas_SetTexUvWhitePixel(ImFontAtlas *ImFontAtlasPtr, ImVec2 v) { ImFontAtlasPtr->TexUvWhitePixel = v; }
ImVec2 wrap_ImFontAtlas_GetTexUvWhitePixel(ImFontAtlas *self) { return self->TexUvWhitePixel; }
void wrap_ImFontAtlas_SetFonts(ImFontAtlas *ImFontAtlasPtr, ImVector_ImFontPtr v) { ImFontAtlasPtr->Fonts = v; }
ImVector_ImFontPtr wrap_ImFontAtlas_GetFonts(ImFontAtlas *self) { return self->Fonts; }
void wrap_ImFontAtlas_SetCustomRects(ImFontAtlas *ImFontAtlasPtr, ImVector_ImFontAtlasCustomRect v) { ImFontAtlasPtr->CustomRects = v; }
ImVector_ImFontAtlasCustomRect wrap_ImFontAtlas_GetCustomRects(ImFontAtlas *self) { return self->CustomRects; }
void wrap_ImFontAtlas_SetConfigData(ImFontAtlas *ImFontAtlasPtr, ImVector_ImFontConfig v) { ImFontAtlasPtr->ConfigData = v; }
ImVector_ImFontConfig wrap_ImFontAtlas_GetConfigData(ImFontAtlas *self) { return self->ConfigData; }
void wrap_ImFontAtlas_SetTexUvLines(ImFontAtlas *ImFontAtlasPtr, ImVec4* v) { memcpy(ImFontAtlasPtr->TexUvLines, v, sizeof(ImVec4)*64); }
ImVec4* wrap_ImFontAtlas_GetTexUvLines(ImFontAtlas *self) { return self->TexUvLines; }
ImVec4 cimgui_ImVec4_GetAtIdx(ImVec4 *self, int index) { return self[index]; }
void wrap_ImFontAtlas_SetFontBuilderIO(ImFontAtlas *ImFontAtlasPtr, const ImFontBuilderIO* v) { ImFontAtlasPtr->FontBuilderIO = v; }
const ImFontBuilderIO* wrap_ImFontAtlas_GetFontBuilderIO(ImFontAtlas *self) { return self->FontBuilderIO; }
void wrap_ImFontAtlas_SetFontBuilderFlags(ImFontAtlas *ImFontAtlasPtr, unsigned int v) { ImFontAtlasPtr->FontBuilderFlags = v; }
unsigned int wrap_ImFontAtlas_GetFontBuilderFlags(ImFontAtlas *self) { return self->FontBuilderFlags; }
void wrap_ImFontAtlas_SetPackIdMouseCursors(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->PackIdMouseCursors = v; }
int wrap_ImFontAtlas_GetPackIdMouseCursors(ImFontAtlas *self) { return self->PackIdMouseCursors; }
void wrap_ImFontAtlas_SetPackIdLines(ImFontAtlas *ImFontAtlasPtr, int v) { ImFontAtlasPtr->PackIdLines = v; }
int wrap_ImFontAtlas_GetPackIdLines(ImFontAtlas *self) { return self->PackIdLines; }
void wrap_ImFontAtlasCustomRect_SetWidth(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, unsigned short v) { ImFontAtlasCustomRectPtr->Width = v; }
unsigned short wrap_ImFontAtlasCustomRect_GetWidth(ImFontAtlasCustomRect *self) { return self->Width; }
void wrap_ImFontAtlasCustomRect_SetHeight(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, unsigned short v) { ImFontAtlasCustomRectPtr->Height = v; }
unsigned short wrap_ImFontAtlasCustomRect_GetHeight(ImFontAtlasCustomRect *self) { return self->Height; }
void wrap_ImFontAtlasCustomRect_SetX(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, unsigned short v) { ImFontAtlasCustomRectPtr->X = v; }
unsigned short wrap_ImFontAtlasCustomRect_GetX(ImFontAtlasCustomRect *self) { return self->X; }
void wrap_ImFontAtlasCustomRect_SetY(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, unsigned short v) { ImFontAtlasCustomRectPtr->Y = v; }
unsigned short wrap_ImFontAtlasCustomRect_GetY(ImFontAtlasCustomRect *self) { return self->Y; }
void wrap_ImFontAtlasCustomRect_SetGlyphID(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, unsigned int v) { ImFontAtlasCustomRectPtr->GlyphID = v; }
unsigned int wrap_ImFontAtlasCustomRect_GetGlyphID(ImFontAtlasCustomRect *self) { return self->GlyphID; }
void wrap_ImFontAtlasCustomRect_SetGlyphAdvanceX(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, float v) { ImFontAtlasCustomRectPtr->GlyphAdvanceX = v; }
float wrap_ImFontAtlasCustomRect_GetGlyphAdvanceX(ImFontAtlasCustomRect *self) { return self->GlyphAdvanceX; }
void wrap_ImFontAtlasCustomRect_SetGlyphOffset(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, ImVec2 v) { ImFontAtlasCustomRectPtr->GlyphOffset = v; }
ImVec2 wrap_ImFontAtlasCustomRect_GetGlyphOffset(ImFontAtlasCustomRect *self) { return self->GlyphOffset; }
void wrap_ImFontAtlasCustomRect_SetFont(ImFontAtlasCustomRect *ImFontAtlasCustomRectPtr, ImFont* v) { ImFontAtlasCustomRectPtr->Font = v; }
ImFont* wrap_ImFontAtlasCustomRect_GetFont(ImFontAtlasCustomRect *self) { return self->Font; }
void wrap_ImFontConfig_SetFontData(ImFontConfig *ImFontConfigPtr, uintptr_t v) { ImFontConfigPtr->FontData = (void*)v; }
uintptr_t wrap_ImFontConfig_GetFontData(ImFontConfig *self) { return (uintptr_t)self->FontData; }
void wrap_ImFontConfig_SetFontDataSize(ImFontConfig *ImFontConfigPtr, int v) { ImFontConfigPtr->FontDataSize = v; }
int wrap_ImFontConfig_GetFontDataSize(ImFontConfig *self) { return self->FontDataSize; }
void wrap_ImFontConfig_SetFontDataOwnedByAtlas(ImFontConfig *ImFontConfigPtr, bool v) { ImFontConfigPtr->FontDataOwnedByAtlas = v; }
bool wrap_ImFontConfig_GetFontDataOwnedByAtlas(ImFontConfig *self) { return self->FontDataOwnedByAtlas; }
void wrap_ImFontConfig_SetFontNo(ImFontConfig *ImFontConfigPtr, int v) { ImFontConfigPtr->FontNo = v; }
int wrap_ImFontConfig_GetFontNo(ImFontConfig *self) { return self->FontNo; }
void wrap_ImFontConfig_SetSizePixels(ImFontConfig *ImFontConfigPtr, float v) { ImFontConfigPtr->SizePixels = v; }
float wrap_ImFontConfig_GetSizePixels(ImFontConfig *self) { return self->SizePixels; }
void wrap_ImFontConfig_SetOversampleH(ImFontConfig *ImFontConfigPtr, int v) { ImFontConfigPtr->OversampleH = v; }
int wrap_ImFontConfig_GetOversampleH(ImFontConfig *self) { return self->OversampleH; }
void wrap_ImFontConfig_SetOversampleV(ImFontConfig *ImFontConfigPtr, int v) { ImFontConfigPtr->OversampleV = v; }
int wrap_ImFontConfig_GetOversampleV(ImFontConfig *self) { return self->OversampleV; }
void wrap_ImFontConfig_SetPixelSnapH(ImFontConfig *ImFontConfigPtr, bool v) { ImFontConfigPtr->PixelSnapH = v; }
bool wrap_ImFontConfig_GetPixelSnapH(ImFontConfig *self) { return self->PixelSnapH; }
void wrap_ImFontConfig_SetGlyphExtraSpacing(ImFontConfig *ImFontConfigPtr, ImVec2 v) { ImFontConfigPtr->GlyphExtraSpacing = v; }
ImVec2 wrap_ImFontConfig_GetGlyphExtraSpacing(ImFontConfig *self) { return self->GlyphExtraSpacing; }
void wrap_ImFontConfig_SetGlyphOffset(ImFontConfig *ImFontConfigPtr, ImVec2 v) { ImFontConfigPtr->GlyphOffset = v; }
ImVec2 wrap_ImFontConfig_GetGlyphOffset(ImFontConfig *self) { return self->GlyphOffset; }
void wrap_ImFontConfig_SetGlyphRanges(ImFontConfig *ImFontConfigPtr, const ImWchar* v) { ImFontConfigPtr->GlyphRanges = v; }
const ImWchar* wrap_ImFontConfig_GetGlyphRanges(ImFontConfig *self) { return self->GlyphRanges; }
void wrap_ImFontConfig_SetGlyphMinAdvanceX(ImFontConfig *ImFontConfigPtr, float v) { ImFontConfigPtr->GlyphMinAdvanceX = v; }
float wrap_ImFontConfig_GetGlyphMinAdvanceX(ImFontConfig *self) { return self->GlyphMinAdvanceX; }
void wrap_ImFontConfig_SetGlyphMaxAdvanceX(ImFontConfig *ImFontConfigPtr, float v) { ImFontConfigPtr->GlyphMaxAdvanceX = v; }
float wrap_ImFontConfig_GetGlyphMaxAdvanceX(ImFontConfig *self) { return self->GlyphMaxAdvanceX; }
void wrap_ImFontConfig_SetMergeMode(ImFontConfig *ImFontConfigPtr, bool v) { ImFontConfigPtr->MergeMode = v; }
bool wrap_ImFontConfig_GetMergeMode(ImFontConfig *self) { return self->MergeMode; }
void wrap_ImFontConfig_SetFontBuilderFlags(ImFontConfig *ImFontConfigPtr, unsigned int v) { ImFontConfigPtr->FontBuilderFlags = v; }
unsigned int wrap_ImFontConfig_GetFontBuilderFlags(ImFontConfig *self) { return self->FontBuilderFlags; }
void wrap_ImFontConfig_SetRasterizerMultiply(ImFontConfig *ImFontConfigPtr, float v) { ImFontConfigPtr->RasterizerMultiply = v; }
float wrap_ImFontConfig_GetRasterizerMultiply(ImFontConfig *self) { return self->RasterizerMultiply; }
void wrap_ImFontConfig_SetRasterizerDensity(ImFontConfig *ImFontConfigPtr, float v) { ImFontConfigPtr->RasterizerDensity = v; }
float wrap_ImFontConfig_GetRasterizerDensity(ImFontConfig *self) { return self->RasterizerDensity; }
void wrap_ImFontConfig_SetEllipsisChar(ImFontConfig *ImFontConfigPtr, ImWchar v) { ImFontConfigPtr->EllipsisChar = v; }
ImWchar wrap_ImFontConfig_GetEllipsisChar(ImFontConfig *self) { return self->EllipsisChar; }
void wrap_ImFontConfig_SetName(ImFontConfig *ImFontConfigPtr, char* v) { memcpy(ImFontConfigPtr->Name, v, sizeof(char)*40); }
char* wrap_ImFontConfig_GetName(ImFontConfig *self) { return self->Name; }
char cimgui_char_GetAtIdx(char *self, int index) { return self[index]; }
void wrap_ImFontConfig_SetDstFont(ImFontConfig *ImFontConfigPtr, ImFont* v) { ImFontConfigPtr->DstFont = v; }
ImFont* wrap_ImFontConfig_GetDstFont(ImFontConfig *self) { return self->DstFont; }
void wrap_ImFontGlyph_SetColored(ImFontGlyph *ImFontGlyphPtr, unsigned int v) { ImFontGlyphPtr->Colored = v; }
unsigned int wrap_ImFontGlyph_GetColored(ImFontGlyph *self) { return self->Colored; }
void wrap_ImFontGlyph_SetVisible(ImFontGlyph *ImFontGlyphPtr, unsigned int v) { ImFontGlyphPtr->Visible = v; }
unsigned int wrap_ImFontGlyph_GetVisible(ImFontGlyph *self) { return self->Visible; }
void wrap_ImFontGlyph_SetCodepoint(ImFontGlyph *ImFontGlyphPtr, unsigned int v) { ImFontGlyphPtr->Codepoint = v; }
unsigned int wrap_ImFontGlyph_GetCodepoint(ImFontGlyph *self) { return self->Codepoint; }
void wrap_ImFontGlyph_SetAdvanceX(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->AdvanceX = v; }
float wrap_ImFontGlyph_GetAdvanceX(ImFontGlyph *self) { return self->AdvanceX; }
void wrap_ImFontGlyph_SetX0(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->X0 = v; }
float wrap_ImFontGlyph_GetX0(ImFontGlyph *self) { return self->X0; }
void wrap_ImFontGlyph_SetY0(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->Y0 = v; }
float wrap_ImFontGlyph_GetY0(ImFontGlyph *self) { return self->Y0; }
void wrap_ImFontGlyph_SetX1(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->X1 = v; }
float wrap_ImFontGlyph_GetX1(ImFontGlyph *self) { return self->X1; }
void wrap_ImFontGlyph_SetY1(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->Y1 = v; }
float wrap_ImFontGlyph_GetY1(ImFontGlyph *self) { return self->Y1; }
void wrap_ImFontGlyph_SetU0(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->U0 = v; }
float wrap_ImFontGlyph_GetU0(ImFontGlyph *self) { return self->U0; }
void wrap_ImFontGlyph_SetV0(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->V0 = v; }
float wrap_ImFontGlyph_GetV0(ImFontGlyph *self) { return self->V0; }
void wrap_ImFontGlyph_SetU1(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->U1 = v; }
float wrap_ImFontGlyph_GetU1(ImFontGlyph *self) { return self->U1; }
void wrap_ImFontGlyph_SetV1(ImFontGlyph *ImFontGlyphPtr, float v) { ImFontGlyphPtr->V1 = v; }
float wrap_ImFontGlyph_GetV1(ImFontGlyph *self) { return self->V1; }
void wrap_ImFontGlyphRangesBuilder_SetUsedChars(ImFontGlyphRangesBuilder *ImFontGlyphRangesBuilderPtr, ImVector_ImU32 v) { ImFontGlyphRangesBuilderPtr->UsedChars = v; }
ImVector_ImU32 wrap_ImFontGlyphRangesBuilder_GetUsedChars(ImFontGlyphRangesBuilder *self) { return self->UsedChars; }
void wrap_ImGuiColorMod_SetCol(ImGuiColorMod *ImGuiColorModPtr, ImGuiCol v) { ImGuiColorModPtr->Col = v; }
ImGuiCol wrap_ImGuiColorMod_GetCol(ImGuiColorMod *self) { return self->Col; }
void wrap_ImGuiColorMod_SetBackupValue(ImGuiColorMod *ImGuiColorModPtr, ImVec4 v) { ImGuiColorModPtr->BackupValue = v; }
ImVec4 wrap_ImGuiColorMod_GetBackupValue(ImGuiColorMod *self) { return self->BackupValue; }
void wrap_ImGuiComboPreviewData_SetPreviewRect(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, ImRect v) { ImGuiComboPreviewDataPtr->PreviewRect = v; }
ImRect wrap_ImGuiComboPreviewData_GetPreviewRect(ImGuiComboPreviewData *self) { return self->PreviewRect; }
void wrap_ImGuiComboPreviewData_SetBackupCursorPos(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, ImVec2 v) { ImGuiComboPreviewDataPtr->BackupCursorPos = v; }
ImVec2 wrap_ImGuiComboPreviewData_GetBackupCursorPos(ImGuiComboPreviewData *self) { return self->BackupCursorPos; }
void wrap_ImGuiComboPreviewData_SetBackupCursorMaxPos(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, ImVec2 v) { ImGuiComboPreviewDataPtr->BackupCursorMaxPos = v; }
ImVec2 wrap_ImGuiComboPreviewData_GetBackupCursorMaxPos(ImGuiComboPreviewData *self) { return self->BackupCursorMaxPos; }
void wrap_ImGuiComboPreviewData_SetBackupCursorPosPrevLine(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, ImVec2 v) { ImGuiComboPreviewDataPtr->BackupCursorPosPrevLine = v; }
ImVec2 wrap_ImGuiComboPreviewData_GetBackupCursorPosPrevLine(ImGuiComboPreviewData *self) { return self->BackupCursorPosPrevLine; }
void wrap_ImGuiComboPreviewData_SetBackupPrevLineTextBaseOffset(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, float v) { ImGuiComboPreviewDataPtr->BackupPrevLineTextBaseOffset = v; }
float wrap_ImGuiComboPreviewData_GetBackupPrevLineTextBaseOffset(ImGuiComboPreviewData *self) { return self->BackupPrevLineTextBaseOffset; }
void wrap_ImGuiComboPreviewData_SetBackupLayout(ImGuiComboPreviewData *ImGuiComboPreviewDataPtr, ImGuiLayoutType v) { ImGuiComboPreviewDataPtr->BackupLayout = v; }
ImGuiLayoutType wrap_ImGuiComboPreviewData_GetBackupLayout(ImGuiComboPreviewData *self) { return self->BackupLayout; }
void wrap_ImGuiContext_SetInitialized(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->Initialized = v; }
bool wrap_ImGuiContext_GetInitialized(ImGuiContext *self) { return self->Initialized; }
void wrap_ImGuiContext_SetFontAtlasOwnedByContext(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->FontAtlasOwnedByContext = v; }
bool wrap_ImGuiContext_GetFontAtlasOwnedByContext(ImGuiContext *self) { return self->FontAtlasOwnedByContext; }
void wrap_ImGuiContext_SetIO(ImGuiContext *ImGuiContextPtr, ImGuiIO v) { ImGuiContextPtr->IO = v; }
ImGuiIO wrap_ImGuiContext_GetIO(ImGuiContext *self) { return self->IO; }
void wrap_ImGuiContext_SetPlatformIO(ImGuiContext *ImGuiContextPtr, ImGuiPlatformIO v) { ImGuiContextPtr->PlatformIO = v; }
ImGuiPlatformIO wrap_ImGuiContext_GetPlatformIO(ImGuiContext *self) { return self->PlatformIO; }
void wrap_ImGuiContext_SetStyle(ImGuiContext *ImGuiContextPtr, ImGuiStyle v) { ImGuiContextPtr->Style = v; }
ImGuiStyle wrap_ImGuiContext_GetStyle(ImGuiContext *self) { return self->Style; }
void wrap_ImGuiContext_SetConfigFlagsCurrFrame(ImGuiContext *ImGuiContextPtr, ImGuiConfigFlags v) { ImGuiContextPtr->ConfigFlagsCurrFrame = v; }
ImGuiConfigFlags wrap_ImGuiContext_GetConfigFlagsCurrFrame(ImGuiContext *self) { return self->ConfigFlagsCurrFrame; }
void wrap_ImGuiContext_SetConfigFlagsLastFrame(ImGuiContext *ImGuiContextPtr, ImGuiConfigFlags v) { ImGuiContextPtr->ConfigFlagsLastFrame = v; }
ImGuiConfigFlags wrap_ImGuiContext_GetConfigFlagsLastFrame(ImGuiContext *self) { return self->ConfigFlagsLastFrame; }
void wrap_ImGuiContext_SetFont(ImGuiContext *ImGuiContextPtr, ImFont* v) { ImGuiContextPtr->Font = v; }
ImFont* wrap_ImGuiContext_GetFont(ImGuiContext *self) { return self->Font; }
void wrap_ImGuiContext_SetFontSize(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->FontSize = v; }
float wrap_ImGuiContext_GetFontSize(ImGuiContext *self) { return self->FontSize; }
void wrap_ImGuiContext_SetFontBaseSize(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->FontBaseSize = v; }
float wrap_ImGuiContext_GetFontBaseSize(ImGuiContext *self) { return self->FontBaseSize; }
void wrap_ImGuiContext_SetDrawListSharedData(ImGuiContext *ImGuiContextPtr, ImDrawListSharedData v) { ImGuiContextPtr->DrawListSharedData = v; }
ImDrawListSharedData wrap_ImGuiContext_GetDrawListSharedData(ImGuiContext *self) { return self->DrawListSharedData; }
void wrap_ImGuiContext_SetTime(ImGuiContext *ImGuiContextPtr, double v) { ImGuiContextPtr->Time = v; }
double wrap_ImGuiContext_GetTime(ImGuiContext *self) { return self->Time; }
void wrap_ImGuiContext_SetFrameCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FrameCount = v; }
int wrap_ImGuiContext_GetFrameCount(ImGuiContext *self) { return self->FrameCount; }
void wrap_ImGuiContext_SetFrameCountEnded(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FrameCountEnded = v; }
int wrap_ImGuiContext_GetFrameCountEnded(ImGuiContext *self) { return self->FrameCountEnded; }
void wrap_ImGuiContext_SetFrameCountPlatformEnded(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FrameCountPlatformEnded = v; }
int wrap_ImGuiContext_GetFrameCountPlatformEnded(ImGuiContext *self) { return self->FrameCountPlatformEnded; }
void wrap_ImGuiContext_SetFrameCountRendered(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FrameCountRendered = v; }
int wrap_ImGuiContext_GetFrameCountRendered(ImGuiContext *self) { return self->FrameCountRendered; }
void wrap_ImGuiContext_SetWithinFrameScope(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->WithinFrameScope = v; }
bool wrap_ImGuiContext_GetWithinFrameScope(ImGuiContext *self) { return self->WithinFrameScope; }
void wrap_ImGuiContext_SetWithinFrameScopeWithImplicitWindow(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->WithinFrameScopeWithImplicitWindow = v; }
bool wrap_ImGuiContext_GetWithinFrameScopeWithImplicitWindow(ImGuiContext *self) { return self->WithinFrameScopeWithImplicitWindow; }
void wrap_ImGuiContext_SetWithinEndChild(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->WithinEndChild = v; }
bool wrap_ImGuiContext_GetWithinEndChild(ImGuiContext *self) { return self->WithinEndChild; }
void wrap_ImGuiContext_SetGcCompactAll(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->GcCompactAll = v; }
bool wrap_ImGuiContext_GetGcCompactAll(ImGuiContext *self) { return self->GcCompactAll; }
void wrap_ImGuiContext_SetTestEngineHookItems(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->TestEngineHookItems = v; }
bool wrap_ImGuiContext_GetTestEngineHookItems(ImGuiContext *self) { return self->TestEngineHookItems; }
void wrap_ImGuiContext_SetTestEngine(ImGuiContext *ImGuiContextPtr, uintptr_t v) { ImGuiContextPtr->TestEngine = (void*)v; }
uintptr_t wrap_ImGuiContext_GetTestEngine(ImGuiContext *self) { return (uintptr_t)self->TestEngine; }
void wrap_ImGuiContext_SetInputEventsQueue(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiInputEvent v) { ImGuiContextPtr->InputEventsQueue = v; }
ImVector_ImGuiInputEvent wrap_ImGuiContext_GetInputEventsQueue(ImGuiContext *self) { return self->InputEventsQueue; }
void wrap_ImGuiContext_SetInputEventsTrail(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiInputEvent v) { ImGuiContextPtr->InputEventsTrail = v; }
ImVector_ImGuiInputEvent wrap_ImGuiContext_GetInputEventsTrail(ImGuiContext *self) { return self->InputEventsTrail; }
void wrap_ImGuiContext_SetInputEventsNextMouseSource(ImGuiContext *ImGuiContextPtr, ImGuiMouseSource v) { ImGuiContextPtr->InputEventsNextMouseSource = v; }
ImGuiMouseSource wrap_ImGuiContext_GetInputEventsNextMouseSource(ImGuiContext *self) { return self->InputEventsNextMouseSource; }
void wrap_ImGuiContext_SetInputEventsNextEventId(ImGuiContext *ImGuiContextPtr, ImU32 v) { ImGuiContextPtr->InputEventsNextEventId = v; }
ImU32 wrap_ImGuiContext_GetInputEventsNextEventId(ImGuiContext *self) { return self->InputEventsNextEventId; }
void wrap_ImGuiContext_SetWindows(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiWindowPtr v) { ImGuiContextPtr->Windows = v; }
ImVector_ImGuiWindowPtr wrap_ImGuiContext_GetWindows(ImGuiContext *self) { return self->Windows; }
void wrap_ImGuiContext_SetWindowsFocusOrder(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiWindowPtr v) { ImGuiContextPtr->WindowsFocusOrder = v; }
ImVector_ImGuiWindowPtr wrap_ImGuiContext_GetWindowsFocusOrder(ImGuiContext *self) { return self->WindowsFocusOrder; }
void wrap_ImGuiContext_SetWindowsTempSortBuffer(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiWindowPtr v) { ImGuiContextPtr->WindowsTempSortBuffer = v; }
ImVector_ImGuiWindowPtr wrap_ImGuiContext_GetWindowsTempSortBuffer(ImGuiContext *self) { return self->WindowsTempSortBuffer; }
void wrap_ImGuiContext_SetCurrentWindowStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiWindowStackData v) { ImGuiContextPtr->CurrentWindowStack = v; }
ImVector_ImGuiWindowStackData wrap_ImGuiContext_GetCurrentWindowStack(ImGuiContext *self) { return self->CurrentWindowStack; }
void wrap_ImGuiContext_SetWindowsById(ImGuiContext *ImGuiContextPtr, ImGuiStorage v) { ImGuiContextPtr->WindowsById = v; }
ImGuiStorage wrap_ImGuiContext_GetWindowsById(ImGuiContext *self) { return self->WindowsById; }
void wrap_ImGuiContext_SetWindowsActiveCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WindowsActiveCount = v; }
int wrap_ImGuiContext_GetWindowsActiveCount(ImGuiContext *self) { return self->WindowsActiveCount; }
void wrap_ImGuiContext_SetWindowsHoverPadding(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->WindowsHoverPadding = v; }
ImVec2 wrap_ImGuiContext_GetWindowsHoverPadding(ImGuiContext *self) { return self->WindowsHoverPadding; }
void wrap_ImGuiContext_SetDebugBreakInWindow(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DebugBreakInWindow = v; }
ImGuiID wrap_ImGuiContext_GetDebugBreakInWindow(ImGuiContext *self) { return self->DebugBreakInWindow; }
void wrap_ImGuiContext_SetCurrentWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->CurrentWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetCurrentWindow(ImGuiContext *self) { return self->CurrentWindow; }
void wrap_ImGuiContext_SetHoveredWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->HoveredWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetHoveredWindow(ImGuiContext *self) { return self->HoveredWindow; }
void wrap_ImGuiContext_SetHoveredWindowUnderMovingWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->HoveredWindowUnderMovingWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetHoveredWindowUnderMovingWindow(ImGuiContext *self) { return self->HoveredWindowUnderMovingWindow; }
void wrap_ImGuiContext_SetMovingWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->MovingWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetMovingWindow(ImGuiContext *self) { return self->MovingWindow; }
void wrap_ImGuiContext_SetWheelingWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->WheelingWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetWheelingWindow(ImGuiContext *self) { return self->WheelingWindow; }
void wrap_ImGuiContext_SetWheelingWindowRefMousePos(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->WheelingWindowRefMousePos = v; }
ImVec2 wrap_ImGuiContext_GetWheelingWindowRefMousePos(ImGuiContext *self) { return self->WheelingWindowRefMousePos; }
void wrap_ImGuiContext_SetWheelingWindowStartFrame(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WheelingWindowStartFrame = v; }
int wrap_ImGuiContext_GetWheelingWindowStartFrame(ImGuiContext *self) { return self->WheelingWindowStartFrame; }
void wrap_ImGuiContext_SetWheelingWindowScrolledFrame(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WheelingWindowScrolledFrame = v; }
int wrap_ImGuiContext_GetWheelingWindowScrolledFrame(ImGuiContext *self) { return self->WheelingWindowScrolledFrame; }
void wrap_ImGuiContext_SetWheelingWindowReleaseTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->WheelingWindowReleaseTimer = v; }
float wrap_ImGuiContext_GetWheelingWindowReleaseTimer(ImGuiContext *self) { return self->WheelingWindowReleaseTimer; }
void wrap_ImGuiContext_SetWheelingWindowWheelRemainder(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->WheelingWindowWheelRemainder = v; }
ImVec2 wrap_ImGuiContext_GetWheelingWindowWheelRemainder(ImGuiContext *self) { return self->WheelingWindowWheelRemainder; }
void wrap_ImGuiContext_SetWheelingAxisAvg(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->WheelingAxisAvg = v; }
ImVec2 wrap_ImGuiContext_GetWheelingAxisAvg(ImGuiContext *self) { return self->WheelingAxisAvg; }
void wrap_ImGuiContext_SetDebugHookIdInfo(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DebugHookIdInfo = v; }
ImGuiID wrap_ImGuiContext_GetDebugHookIdInfo(ImGuiContext *self) { return self->DebugHookIdInfo; }
void wrap_ImGuiContext_SetHoveredId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoveredId = v; }
ImGuiID wrap_ImGuiContext_GetHoveredId(ImGuiContext *self) { return self->HoveredId; }
void wrap_ImGuiContext_SetHoveredIdPreviousFrame(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoveredIdPreviousFrame = v; }
ImGuiID wrap_ImGuiContext_GetHoveredIdPreviousFrame(ImGuiContext *self) { return self->HoveredIdPreviousFrame; }
void wrap_ImGuiContext_SetHoveredIdAllowOverlap(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->HoveredIdAllowOverlap = v; }
bool wrap_ImGuiContext_GetHoveredIdAllowOverlap(ImGuiContext *self) { return self->HoveredIdAllowOverlap; }
void wrap_ImGuiContext_SetHoveredIdDisabled(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->HoveredIdDisabled = v; }
bool wrap_ImGuiContext_GetHoveredIdDisabled(ImGuiContext *self) { return self->HoveredIdDisabled; }
void wrap_ImGuiContext_SetHoveredIdTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->HoveredIdTimer = v; }
float wrap_ImGuiContext_GetHoveredIdTimer(ImGuiContext *self) { return self->HoveredIdTimer; }
void wrap_ImGuiContext_SetHoveredIdNotActiveTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->HoveredIdNotActiveTimer = v; }
float wrap_ImGuiContext_GetHoveredIdNotActiveTimer(ImGuiContext *self) { return self->HoveredIdNotActiveTimer; }
void wrap_ImGuiContext_SetActiveId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->ActiveId = v; }
ImGuiID wrap_ImGuiContext_GetActiveId(ImGuiContext *self) { return self->ActiveId; }
void wrap_ImGuiContext_SetActiveIdIsAlive(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->ActiveIdIsAlive = v; }
ImGuiID wrap_ImGuiContext_GetActiveIdIsAlive(ImGuiContext *self) { return self->ActiveIdIsAlive; }
void wrap_ImGuiContext_SetActiveIdTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->ActiveIdTimer = v; }
float wrap_ImGuiContext_GetActiveIdTimer(ImGuiContext *self) { return self->ActiveIdTimer; }
void wrap_ImGuiContext_SetActiveIdIsJustActivated(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdIsJustActivated = v; }
bool wrap_ImGuiContext_GetActiveIdIsJustActivated(ImGuiContext *self) { return self->ActiveIdIsJustActivated; }
void wrap_ImGuiContext_SetActiveIdAllowOverlap(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdAllowOverlap = v; }
bool wrap_ImGuiContext_GetActiveIdAllowOverlap(ImGuiContext *self) { return self->ActiveIdAllowOverlap; }
void wrap_ImGuiContext_SetActiveIdNoClearOnFocusLoss(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdNoClearOnFocusLoss = v; }
bool wrap_ImGuiContext_GetActiveIdNoClearOnFocusLoss(ImGuiContext *self) { return self->ActiveIdNoClearOnFocusLoss; }
void wrap_ImGuiContext_SetActiveIdHasBeenPressedBefore(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdHasBeenPressedBefore = v; }
bool wrap_ImGuiContext_GetActiveIdHasBeenPressedBefore(ImGuiContext *self) { return self->ActiveIdHasBeenPressedBefore; }
void wrap_ImGuiContext_SetActiveIdHasBeenEditedBefore(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdHasBeenEditedBefore = v; }
bool wrap_ImGuiContext_GetActiveIdHasBeenEditedBefore(ImGuiContext *self) { return self->ActiveIdHasBeenEditedBefore; }
void wrap_ImGuiContext_SetActiveIdHasBeenEditedThisFrame(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdHasBeenEditedThisFrame = v; }
bool wrap_ImGuiContext_GetActiveIdHasBeenEditedThisFrame(ImGuiContext *self) { return self->ActiveIdHasBeenEditedThisFrame; }
void wrap_ImGuiContext_SetActiveIdFromShortcut(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdFromShortcut = v; }
bool wrap_ImGuiContext_GetActiveIdFromShortcut(ImGuiContext *self) { return self->ActiveIdFromShortcut; }
void wrap_ImGuiContext_SetActiveIdMouseButton(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->ActiveIdMouseButton = v; }
int wrap_ImGuiContext_GetActiveIdMouseButton(ImGuiContext *self) { return self->ActiveIdMouseButton; }
void wrap_ImGuiContext_SetActiveIdClickOffset(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->ActiveIdClickOffset = v; }
ImVec2 wrap_ImGuiContext_GetActiveIdClickOffset(ImGuiContext *self) { return self->ActiveIdClickOffset; }
void wrap_ImGuiContext_SetActiveIdWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->ActiveIdWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetActiveIdWindow(ImGuiContext *self) { return self->ActiveIdWindow; }
void wrap_ImGuiContext_SetActiveIdSource(ImGuiContext *ImGuiContextPtr, ImGuiInputSource v) { ImGuiContextPtr->ActiveIdSource = v; }
ImGuiInputSource wrap_ImGuiContext_GetActiveIdSource(ImGuiContext *self) { return self->ActiveIdSource; }
void wrap_ImGuiContext_SetActiveIdPreviousFrame(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->ActiveIdPreviousFrame = v; }
ImGuiID wrap_ImGuiContext_GetActiveIdPreviousFrame(ImGuiContext *self) { return self->ActiveIdPreviousFrame; }
void wrap_ImGuiContext_SetActiveIdPreviousFrameIsAlive(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdPreviousFrameIsAlive = v; }
bool wrap_ImGuiContext_GetActiveIdPreviousFrameIsAlive(ImGuiContext *self) { return self->ActiveIdPreviousFrameIsAlive; }
void wrap_ImGuiContext_SetActiveIdPreviousFrameHasBeenEditedBefore(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdPreviousFrameHasBeenEditedBefore = v; }
bool wrap_ImGuiContext_GetActiveIdPreviousFrameHasBeenEditedBefore(ImGuiContext *self) { return self->ActiveIdPreviousFrameHasBeenEditedBefore; }
void wrap_ImGuiContext_SetActiveIdPreviousFrameWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->ActiveIdPreviousFrameWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetActiveIdPreviousFrameWindow(ImGuiContext *self) { return self->ActiveIdPreviousFrameWindow; }
void wrap_ImGuiContext_SetLastActiveId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->LastActiveId = v; }
ImGuiID wrap_ImGuiContext_GetLastActiveId(ImGuiContext *self) { return self->LastActiveId; }
void wrap_ImGuiContext_SetLastActiveIdTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->LastActiveIdTimer = v; }
float wrap_ImGuiContext_GetLastActiveIdTimer(ImGuiContext *self) { return self->LastActiveIdTimer; }
void wrap_ImGuiContext_SetLastKeyModsChangeTime(ImGuiContext *ImGuiContextPtr, double v) { ImGuiContextPtr->LastKeyModsChangeTime = v; }
double wrap_ImGuiContext_GetLastKeyModsChangeTime(ImGuiContext *self) { return self->LastKeyModsChangeTime; }
void wrap_ImGuiContext_SetLastKeyModsChangeFromNoneTime(ImGuiContext *ImGuiContextPtr, double v) { ImGuiContextPtr->LastKeyModsChangeFromNoneTime = v; }
double wrap_ImGuiContext_GetLastKeyModsChangeFromNoneTime(ImGuiContext *self) { return self->LastKeyModsChangeFromNoneTime; }
void wrap_ImGuiContext_SetLastKeyboardKeyPressTime(ImGuiContext *ImGuiContextPtr, double v) { ImGuiContextPtr->LastKeyboardKeyPressTime = v; }
double wrap_ImGuiContext_GetLastKeyboardKeyPressTime(ImGuiContext *self) { return self->LastKeyboardKeyPressTime; }
void wrap_ImGuiContext_SetKeysMayBeCharInput(ImGuiContext *ImGuiContextPtr, ImBitArrayForNamedKeys v) { ImGuiContextPtr->KeysMayBeCharInput = v; }
ImBitArrayForNamedKeys wrap_ImGuiContext_GetKeysMayBeCharInput(ImGuiContext *self) { return self->KeysMayBeCharInput; }
void wrap_ImGuiContext_SetKeysOwnerData(ImGuiContext *ImGuiContextPtr, ImGuiKeyOwnerData* v) { memcpy(ImGuiContextPtr->KeysOwnerData, v, sizeof(ImGuiKeyOwnerData)*154); }
ImGuiKeyOwnerData* wrap_ImGuiContext_GetKeysOwnerData(ImGuiContext *self) { return self->KeysOwnerData; }
ImGuiKeyOwnerData cimgui_ImGuiKeyOwnerData_GetAtIdx(ImGuiKeyOwnerData *self, int index) { return self[index]; }
void wrap_ImGuiContext_SetKeysRoutingTable(ImGuiContext *ImGuiContextPtr, ImGuiKeyRoutingTable v) { ImGuiContextPtr->KeysRoutingTable = v; }
ImGuiKeyRoutingTable wrap_ImGuiContext_GetKeysRoutingTable(ImGuiContext *self) { return self->KeysRoutingTable; }
void wrap_ImGuiContext_SetActiveIdUsingNavDirMask(ImGuiContext *ImGuiContextPtr, ImU32 v) { ImGuiContextPtr->ActiveIdUsingNavDirMask = v; }
ImU32 wrap_ImGuiContext_GetActiveIdUsingNavDirMask(ImGuiContext *self) { return self->ActiveIdUsingNavDirMask; }
void wrap_ImGuiContext_SetActiveIdUsingAllKeyboardKeys(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->ActiveIdUsingAllKeyboardKeys = v; }
bool wrap_ImGuiContext_GetActiveIdUsingAllKeyboardKeys(ImGuiContext *self) { return self->ActiveIdUsingAllKeyboardKeys; }
void wrap_ImGuiContext_SetDebugBreakInShortcutRouting(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->DebugBreakInShortcutRouting = v; }
ImGuiKeyChord wrap_ImGuiContext_GetDebugBreakInShortcutRouting(ImGuiContext *self) { return self->DebugBreakInShortcutRouting; }
void wrap_ImGuiContext_SetCurrentFocusScopeId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->CurrentFocusScopeId = v; }
ImGuiID wrap_ImGuiContext_GetCurrentFocusScopeId(ImGuiContext *self) { return self->CurrentFocusScopeId; }
void wrap_ImGuiContext_SetCurrentItemFlags(ImGuiContext *ImGuiContextPtr, ImGuiItemFlags v) { ImGuiContextPtr->CurrentItemFlags = v; }
ImGuiItemFlags wrap_ImGuiContext_GetCurrentItemFlags(ImGuiContext *self) { return self->CurrentItemFlags; }
void wrap_ImGuiContext_SetDebugLocateId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DebugLocateId = v; }
ImGuiID wrap_ImGuiContext_GetDebugLocateId(ImGuiContext *self) { return self->DebugLocateId; }
void wrap_ImGuiContext_SetNextItemData(ImGuiContext *ImGuiContextPtr, ImGuiNextItemData v) { ImGuiContextPtr->NextItemData = v; }
ImGuiNextItemData wrap_ImGuiContext_GetNextItemData(ImGuiContext *self) { return self->NextItemData; }
void wrap_ImGuiContext_SetLastItemData(ImGuiContext *ImGuiContextPtr, ImGuiLastItemData v) { ImGuiContextPtr->LastItemData = v; }
ImGuiLastItemData wrap_ImGuiContext_GetLastItemData(ImGuiContext *self) { return self->LastItemData; }
void wrap_ImGuiContext_SetNextWindowData(ImGuiContext *ImGuiContextPtr, ImGuiNextWindowData v) { ImGuiContextPtr->NextWindowData = v; }
ImGuiNextWindowData wrap_ImGuiContext_GetNextWindowData(ImGuiContext *self) { return self->NextWindowData; }
void wrap_ImGuiContext_SetDebugShowGroupRects(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DebugShowGroupRects = v; }
bool wrap_ImGuiContext_GetDebugShowGroupRects(ImGuiContext *self) { return self->DebugShowGroupRects; }
void wrap_ImGuiContext_SetDebugFlashStyleColorIdx(ImGuiContext *ImGuiContextPtr, ImGuiCol v) { ImGuiContextPtr->DebugFlashStyleColorIdx = v; }
ImGuiCol wrap_ImGuiContext_GetDebugFlashStyleColorIdx(ImGuiContext *self) { return self->DebugFlashStyleColorIdx; }
void wrap_ImGuiContext_SetColorStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiColorMod v) { ImGuiContextPtr->ColorStack = v; }
ImVector_ImGuiColorMod wrap_ImGuiContext_GetColorStack(ImGuiContext *self) { return self->ColorStack; }
void wrap_ImGuiContext_SetStyleVarStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiStyleMod v) { ImGuiContextPtr->StyleVarStack = v; }
ImVector_ImGuiStyleMod wrap_ImGuiContext_GetStyleVarStack(ImGuiContext *self) { return self->StyleVarStack; }
void wrap_ImGuiContext_SetFontStack(ImGuiContext *ImGuiContextPtr, ImVector_ImFontPtr v) { ImGuiContextPtr->FontStack = v; }
ImVector_ImFontPtr wrap_ImGuiContext_GetFontStack(ImGuiContext *self) { return self->FontStack; }
void wrap_ImGuiContext_SetFocusScopeStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiFocusScopeData v) { ImGuiContextPtr->FocusScopeStack = v; }
ImVector_ImGuiFocusScopeData wrap_ImGuiContext_GetFocusScopeStack(ImGuiContext *self) { return self->FocusScopeStack; }
void wrap_ImGuiContext_SetItemFlagsStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiItemFlags v) { ImGuiContextPtr->ItemFlagsStack = v; }
ImVector_ImGuiItemFlags wrap_ImGuiContext_GetItemFlagsStack(ImGuiContext *self) { return self->ItemFlagsStack; }
void wrap_ImGuiContext_SetGroupStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiGroupData v) { ImGuiContextPtr->GroupStack = v; }
ImVector_ImGuiGroupData wrap_ImGuiContext_GetGroupStack(ImGuiContext *self) { return self->GroupStack; }
void wrap_ImGuiContext_SetOpenPopupStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiPopupData v) { ImGuiContextPtr->OpenPopupStack = v; }
ImVector_ImGuiPopupData wrap_ImGuiContext_GetOpenPopupStack(ImGuiContext *self) { return self->OpenPopupStack; }
void wrap_ImGuiContext_SetBeginPopupStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiPopupData v) { ImGuiContextPtr->BeginPopupStack = v; }
ImVector_ImGuiPopupData wrap_ImGuiContext_GetBeginPopupStack(ImGuiContext *self) { return self->BeginPopupStack; }
void wrap_ImGuiContext_SetNavTreeNodeStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiNavTreeNodeData v) { ImGuiContextPtr->NavTreeNodeStack = v; }
ImVector_ImGuiNavTreeNodeData wrap_ImGuiContext_GetNavTreeNodeStack(ImGuiContext *self) { return self->NavTreeNodeStack; }
void wrap_ImGuiContext_SetViewports(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiViewportPPtr v) { ImGuiContextPtr->Viewports = v; }
ImVector_ImGuiViewportPPtr wrap_ImGuiContext_GetViewports(ImGuiContext *self) { return self->Viewports; }
void wrap_ImGuiContext_SetCurrentDpiScale(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->CurrentDpiScale = v; }
float wrap_ImGuiContext_GetCurrentDpiScale(ImGuiContext *self) { return self->CurrentDpiScale; }
void wrap_ImGuiContext_SetCurrentViewport(ImGuiContext *ImGuiContextPtr, ImGuiViewportP* v) { ImGuiContextPtr->CurrentViewport = v; }
ImGuiViewportP* wrap_ImGuiContext_GetCurrentViewport(ImGuiContext *self) { return self->CurrentViewport; }
void wrap_ImGuiContext_SetMouseViewport(ImGuiContext *ImGuiContextPtr, ImGuiViewportP* v) { ImGuiContextPtr->MouseViewport = v; }
ImGuiViewportP* wrap_ImGuiContext_GetMouseViewport(ImGuiContext *self) { return self->MouseViewport; }
void wrap_ImGuiContext_SetMouseLastHoveredViewport(ImGuiContext *ImGuiContextPtr, ImGuiViewportP* v) { ImGuiContextPtr->MouseLastHoveredViewport = v; }
ImGuiViewportP* wrap_ImGuiContext_GetMouseLastHoveredViewport(ImGuiContext *self) { return self->MouseLastHoveredViewport; }
void wrap_ImGuiContext_SetPlatformLastFocusedViewportId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->PlatformLastFocusedViewportId = v; }
ImGuiID wrap_ImGuiContext_GetPlatformLastFocusedViewportId(ImGuiContext *self) { return self->PlatformLastFocusedViewportId; }
void wrap_ImGuiContext_SetFallbackMonitor(ImGuiContext *ImGuiContextPtr, ImGuiPlatformMonitor v) { ImGuiContextPtr->FallbackMonitor = v; }
ImGuiPlatformMonitor wrap_ImGuiContext_GetFallbackMonitor(ImGuiContext *self) { return self->FallbackMonitor; }
void wrap_ImGuiContext_SetPlatformMonitorsFullWorkRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->PlatformMonitorsFullWorkRect = v; }
ImRect wrap_ImGuiContext_GetPlatformMonitorsFullWorkRect(ImGuiContext *self) { return self->PlatformMonitorsFullWorkRect; }
void wrap_ImGuiContext_SetViewportCreatedCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->ViewportCreatedCount = v; }
int wrap_ImGuiContext_GetViewportCreatedCount(ImGuiContext *self) { return self->ViewportCreatedCount; }
void wrap_ImGuiContext_SetPlatformWindowsCreatedCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->PlatformWindowsCreatedCount = v; }
int wrap_ImGuiContext_GetPlatformWindowsCreatedCount(ImGuiContext *self) { return self->PlatformWindowsCreatedCount; }
void wrap_ImGuiContext_SetViewportFocusedStampCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->ViewportFocusedStampCount = v; }
int wrap_ImGuiContext_GetViewportFocusedStampCount(ImGuiContext *self) { return self->ViewportFocusedStampCount; }
void wrap_ImGuiContext_SetNavWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->NavWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetNavWindow(ImGuiContext *self) { return self->NavWindow; }
void wrap_ImGuiContext_SetNavId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavId = v; }
ImGuiID wrap_ImGuiContext_GetNavId(ImGuiContext *self) { return self->NavId; }
void wrap_ImGuiContext_SetNavFocusScopeId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavFocusScopeId = v; }
ImGuiID wrap_ImGuiContext_GetNavFocusScopeId(ImGuiContext *self) { return self->NavFocusScopeId; }
void wrap_ImGuiContext_SetNavFocusRoute(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiFocusScopeData v) { ImGuiContextPtr->NavFocusRoute = v; }
ImVector_ImGuiFocusScopeData wrap_ImGuiContext_GetNavFocusRoute(ImGuiContext *self) { return self->NavFocusRoute; }
void wrap_ImGuiContext_SetNavActivateId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavActivateId = v; }
ImGuiID wrap_ImGuiContext_GetNavActivateId(ImGuiContext *self) { return self->NavActivateId; }
void wrap_ImGuiContext_SetNavActivateDownId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavActivateDownId = v; }
ImGuiID wrap_ImGuiContext_GetNavActivateDownId(ImGuiContext *self) { return self->NavActivateDownId; }
void wrap_ImGuiContext_SetNavActivatePressedId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavActivatePressedId = v; }
ImGuiID wrap_ImGuiContext_GetNavActivatePressedId(ImGuiContext *self) { return self->NavActivatePressedId; }
void wrap_ImGuiContext_SetNavActivateFlags(ImGuiContext *ImGuiContextPtr, ImGuiActivateFlags v) { ImGuiContextPtr->NavActivateFlags = v; }
ImGuiActivateFlags wrap_ImGuiContext_GetNavActivateFlags(ImGuiContext *self) { return self->NavActivateFlags; }
void wrap_ImGuiContext_SetNavHighlightActivatedId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavHighlightActivatedId = v; }
ImGuiID wrap_ImGuiContext_GetNavHighlightActivatedId(ImGuiContext *self) { return self->NavHighlightActivatedId; }
void wrap_ImGuiContext_SetNavHighlightActivatedTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->NavHighlightActivatedTimer = v; }
float wrap_ImGuiContext_GetNavHighlightActivatedTimer(ImGuiContext *self) { return self->NavHighlightActivatedTimer; }
void wrap_ImGuiContext_SetNavJustMovedToId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavJustMovedToId = v; }
ImGuiID wrap_ImGuiContext_GetNavJustMovedToId(ImGuiContext *self) { return self->NavJustMovedToId; }
void wrap_ImGuiContext_SetNavJustMovedToFocusScopeId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavJustMovedToFocusScopeId = v; }
ImGuiID wrap_ImGuiContext_GetNavJustMovedToFocusScopeId(ImGuiContext *self) { return self->NavJustMovedToFocusScopeId; }
void wrap_ImGuiContext_SetNavJustMovedToKeyMods(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->NavJustMovedToKeyMods = v; }
ImGuiKeyChord wrap_ImGuiContext_GetNavJustMovedToKeyMods(ImGuiContext *self) { return self->NavJustMovedToKeyMods; }
void wrap_ImGuiContext_SetNavNextActivateId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->NavNextActivateId = v; }
ImGuiID wrap_ImGuiContext_GetNavNextActivateId(ImGuiContext *self) { return self->NavNextActivateId; }
void wrap_ImGuiContext_SetNavNextActivateFlags(ImGuiContext *ImGuiContextPtr, ImGuiActivateFlags v) { ImGuiContextPtr->NavNextActivateFlags = v; }
ImGuiActivateFlags wrap_ImGuiContext_GetNavNextActivateFlags(ImGuiContext *self) { return self->NavNextActivateFlags; }
void wrap_ImGuiContext_SetNavInputSource(ImGuiContext *ImGuiContextPtr, ImGuiInputSource v) { ImGuiContextPtr->NavInputSource = v; }
ImGuiInputSource wrap_ImGuiContext_GetNavInputSource(ImGuiContext *self) { return self->NavInputSource; }
void wrap_ImGuiContext_SetNavLayer(ImGuiContext *ImGuiContextPtr, ImGuiNavLayer v) { ImGuiContextPtr->NavLayer = v; }
ImGuiNavLayer wrap_ImGuiContext_GetNavLayer(ImGuiContext *self) { return self->NavLayer; }
void wrap_ImGuiContext_SetNavLastValidSelectionUserData(ImGuiContext *ImGuiContextPtr, ImGuiSelectionUserData v) { ImGuiContextPtr->NavLastValidSelectionUserData = v; }
ImGuiSelectionUserData wrap_ImGuiContext_GetNavLastValidSelectionUserData(ImGuiContext *self) { return self->NavLastValidSelectionUserData; }
void wrap_ImGuiContext_SetNavIdIsAlive(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavIdIsAlive = v; }
bool wrap_ImGuiContext_GetNavIdIsAlive(ImGuiContext *self) { return self->NavIdIsAlive; }
void wrap_ImGuiContext_SetNavMousePosDirty(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavMousePosDirty = v; }
bool wrap_ImGuiContext_GetNavMousePosDirty(ImGuiContext *self) { return self->NavMousePosDirty; }
void wrap_ImGuiContext_SetNavDisableHighlight(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavDisableHighlight = v; }
bool wrap_ImGuiContext_GetNavDisableHighlight(ImGuiContext *self) { return self->NavDisableHighlight; }
void wrap_ImGuiContext_SetNavDisableMouseHover(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavDisableMouseHover = v; }
bool wrap_ImGuiContext_GetNavDisableMouseHover(ImGuiContext *self) { return self->NavDisableMouseHover; }
void wrap_ImGuiContext_SetNavAnyRequest(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavAnyRequest = v; }
bool wrap_ImGuiContext_GetNavAnyRequest(ImGuiContext *self) { return self->NavAnyRequest; }
void wrap_ImGuiContext_SetNavInitRequest(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavInitRequest = v; }
bool wrap_ImGuiContext_GetNavInitRequest(ImGuiContext *self) { return self->NavInitRequest; }
void wrap_ImGuiContext_SetNavInitRequestFromMove(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavInitRequestFromMove = v; }
bool wrap_ImGuiContext_GetNavInitRequestFromMove(ImGuiContext *self) { return self->NavInitRequestFromMove; }
void wrap_ImGuiContext_SetNavInitResult(ImGuiContext *ImGuiContextPtr, ImGuiNavItemData v) { ImGuiContextPtr->NavInitResult = v; }
ImGuiNavItemData wrap_ImGuiContext_GetNavInitResult(ImGuiContext *self) { return self->NavInitResult; }
void wrap_ImGuiContext_SetNavMoveSubmitted(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavMoveSubmitted = v; }
bool wrap_ImGuiContext_GetNavMoveSubmitted(ImGuiContext *self) { return self->NavMoveSubmitted; }
void wrap_ImGuiContext_SetNavMoveScoringItems(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavMoveScoringItems = v; }
bool wrap_ImGuiContext_GetNavMoveScoringItems(ImGuiContext *self) { return self->NavMoveScoringItems; }
void wrap_ImGuiContext_SetNavMoveForwardToNextFrame(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavMoveForwardToNextFrame = v; }
bool wrap_ImGuiContext_GetNavMoveForwardToNextFrame(ImGuiContext *self) { return self->NavMoveForwardToNextFrame; }
void wrap_ImGuiContext_SetNavMoveFlags(ImGuiContext *ImGuiContextPtr, ImGuiNavMoveFlags v) { ImGuiContextPtr->NavMoveFlags = v; }
ImGuiNavMoveFlags wrap_ImGuiContext_GetNavMoveFlags(ImGuiContext *self) { return self->NavMoveFlags; }
void wrap_ImGuiContext_SetNavMoveScrollFlags(ImGuiContext *ImGuiContextPtr, ImGuiScrollFlags v) { ImGuiContextPtr->NavMoveScrollFlags = v; }
ImGuiScrollFlags wrap_ImGuiContext_GetNavMoveScrollFlags(ImGuiContext *self) { return self->NavMoveScrollFlags; }
void wrap_ImGuiContext_SetNavMoveKeyMods(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->NavMoveKeyMods = v; }
ImGuiKeyChord wrap_ImGuiContext_GetNavMoveKeyMods(ImGuiContext *self) { return self->NavMoveKeyMods; }
void wrap_ImGuiContext_SetNavMoveDir(ImGuiContext *ImGuiContextPtr, ImGuiDir v) { ImGuiContextPtr->NavMoveDir = v; }
ImGuiDir wrap_ImGuiContext_GetNavMoveDir(ImGuiContext *self) { return self->NavMoveDir; }
void wrap_ImGuiContext_SetNavMoveDirForDebug(ImGuiContext *ImGuiContextPtr, ImGuiDir v) { ImGuiContextPtr->NavMoveDirForDebug = v; }
ImGuiDir wrap_ImGuiContext_GetNavMoveDirForDebug(ImGuiContext *self) { return self->NavMoveDirForDebug; }
void wrap_ImGuiContext_SetNavMoveClipDir(ImGuiContext *ImGuiContextPtr, ImGuiDir v) { ImGuiContextPtr->NavMoveClipDir = v; }
ImGuiDir wrap_ImGuiContext_GetNavMoveClipDir(ImGuiContext *self) { return self->NavMoveClipDir; }
void wrap_ImGuiContext_SetNavScoringRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->NavScoringRect = v; }
ImRect wrap_ImGuiContext_GetNavScoringRect(ImGuiContext *self) { return self->NavScoringRect; }
void wrap_ImGuiContext_SetNavScoringNoClipRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->NavScoringNoClipRect = v; }
ImRect wrap_ImGuiContext_GetNavScoringNoClipRect(ImGuiContext *self) { return self->NavScoringNoClipRect; }
void wrap_ImGuiContext_SetNavScoringDebugCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->NavScoringDebugCount = v; }
int wrap_ImGuiContext_GetNavScoringDebugCount(ImGuiContext *self) { return self->NavScoringDebugCount; }
void wrap_ImGuiContext_SetNavTabbingDir(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->NavTabbingDir = v; }
int wrap_ImGuiContext_GetNavTabbingDir(ImGuiContext *self) { return self->NavTabbingDir; }
void wrap_ImGuiContext_SetNavTabbingCounter(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->NavTabbingCounter = v; }
int wrap_ImGuiContext_GetNavTabbingCounter(ImGuiContext *self) { return self->NavTabbingCounter; }
void wrap_ImGuiContext_SetNavMoveResultLocal(ImGuiContext *ImGuiContextPtr, ImGuiNavItemData v) { ImGuiContextPtr->NavMoveResultLocal = v; }
ImGuiNavItemData wrap_ImGuiContext_GetNavMoveResultLocal(ImGuiContext *self) { return self->NavMoveResultLocal; }
void wrap_ImGuiContext_SetNavMoveResultLocalVisible(ImGuiContext *ImGuiContextPtr, ImGuiNavItemData v) { ImGuiContextPtr->NavMoveResultLocalVisible = v; }
ImGuiNavItemData wrap_ImGuiContext_GetNavMoveResultLocalVisible(ImGuiContext *self) { return self->NavMoveResultLocalVisible; }
void wrap_ImGuiContext_SetNavMoveResultOther(ImGuiContext *ImGuiContextPtr, ImGuiNavItemData v) { ImGuiContextPtr->NavMoveResultOther = v; }
ImGuiNavItemData wrap_ImGuiContext_GetNavMoveResultOther(ImGuiContext *self) { return self->NavMoveResultOther; }
void wrap_ImGuiContext_SetNavTabbingResultFirst(ImGuiContext *ImGuiContextPtr, ImGuiNavItemData v) { ImGuiContextPtr->NavTabbingResultFirst = v; }
ImGuiNavItemData wrap_ImGuiContext_GetNavTabbingResultFirst(ImGuiContext *self) { return self->NavTabbingResultFirst; }
void wrap_ImGuiContext_SetConfigNavWindowingKeyNext(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->ConfigNavWindowingKeyNext = v; }
ImGuiKeyChord wrap_ImGuiContext_GetConfigNavWindowingKeyNext(ImGuiContext *self) { return self->ConfigNavWindowingKeyNext; }
void wrap_ImGuiContext_SetConfigNavWindowingKeyPrev(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->ConfigNavWindowingKeyPrev = v; }
ImGuiKeyChord wrap_ImGuiContext_GetConfigNavWindowingKeyPrev(ImGuiContext *self) { return self->ConfigNavWindowingKeyPrev; }
void wrap_ImGuiContext_SetNavWindowingTarget(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->NavWindowingTarget = v; }
ImGuiWindow* wrap_ImGuiContext_GetNavWindowingTarget(ImGuiContext *self) { return self->NavWindowingTarget; }
void wrap_ImGuiContext_SetNavWindowingTargetAnim(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->NavWindowingTargetAnim = v; }
ImGuiWindow* wrap_ImGuiContext_GetNavWindowingTargetAnim(ImGuiContext *self) { return self->NavWindowingTargetAnim; }
void wrap_ImGuiContext_SetNavWindowingListWindow(ImGuiContext *ImGuiContextPtr, ImGuiWindow* v) { ImGuiContextPtr->NavWindowingListWindow = v; }
ImGuiWindow* wrap_ImGuiContext_GetNavWindowingListWindow(ImGuiContext *self) { return self->NavWindowingListWindow; }
void wrap_ImGuiContext_SetNavWindowingTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->NavWindowingTimer = v; }
float wrap_ImGuiContext_GetNavWindowingTimer(ImGuiContext *self) { return self->NavWindowingTimer; }
void wrap_ImGuiContext_SetNavWindowingHighlightAlpha(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->NavWindowingHighlightAlpha = v; }
float wrap_ImGuiContext_GetNavWindowingHighlightAlpha(ImGuiContext *self) { return self->NavWindowingHighlightAlpha; }
void wrap_ImGuiContext_SetNavWindowingToggleLayer(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->NavWindowingToggleLayer = v; }
bool wrap_ImGuiContext_GetNavWindowingToggleLayer(ImGuiContext *self) { return self->NavWindowingToggleLayer; }
void wrap_ImGuiContext_SetNavWindowingToggleKey(ImGuiContext *ImGuiContextPtr, ImGuiKey v) { ImGuiContextPtr->NavWindowingToggleKey = v; }
ImGuiKey wrap_ImGuiContext_GetNavWindowingToggleKey(ImGuiContext *self) { return self->NavWindowingToggleKey; }
void wrap_ImGuiContext_SetNavWindowingAccumDeltaPos(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->NavWindowingAccumDeltaPos = v; }
ImVec2 wrap_ImGuiContext_GetNavWindowingAccumDeltaPos(ImGuiContext *self) { return self->NavWindowingAccumDeltaPos; }
void wrap_ImGuiContext_SetNavWindowingAccumDeltaSize(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->NavWindowingAccumDeltaSize = v; }
ImVec2 wrap_ImGuiContext_GetNavWindowingAccumDeltaSize(ImGuiContext *self) { return self->NavWindowingAccumDeltaSize; }
void wrap_ImGuiContext_SetDimBgRatio(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DimBgRatio = v; }
float wrap_ImGuiContext_GetDimBgRatio(ImGuiContext *self) { return self->DimBgRatio; }
void wrap_ImGuiContext_SetDragDropActive(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DragDropActive = v; }
bool wrap_ImGuiContext_GetDragDropActive(ImGuiContext *self) { return self->DragDropActive; }
void wrap_ImGuiContext_SetDragDropWithinSource(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DragDropWithinSource = v; }
bool wrap_ImGuiContext_GetDragDropWithinSource(ImGuiContext *self) { return self->DragDropWithinSource; }
void wrap_ImGuiContext_SetDragDropWithinTarget(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DragDropWithinTarget = v; }
bool wrap_ImGuiContext_GetDragDropWithinTarget(ImGuiContext *self) { return self->DragDropWithinTarget; }
void wrap_ImGuiContext_SetDragDropSourceFlags(ImGuiContext *ImGuiContextPtr, ImGuiDragDropFlags v) { ImGuiContextPtr->DragDropSourceFlags = v; }
ImGuiDragDropFlags wrap_ImGuiContext_GetDragDropSourceFlags(ImGuiContext *self) { return self->DragDropSourceFlags; }
void wrap_ImGuiContext_SetDragDropSourceFrameCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->DragDropSourceFrameCount = v; }
int wrap_ImGuiContext_GetDragDropSourceFrameCount(ImGuiContext *self) { return self->DragDropSourceFrameCount; }
void wrap_ImGuiContext_SetDragDropMouseButton(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->DragDropMouseButton = v; }
int wrap_ImGuiContext_GetDragDropMouseButton(ImGuiContext *self) { return self->DragDropMouseButton; }
void wrap_ImGuiContext_SetDragDropPayload(ImGuiContext *ImGuiContextPtr, ImGuiPayload v) { ImGuiContextPtr->DragDropPayload = v; }
ImGuiPayload wrap_ImGuiContext_GetDragDropPayload(ImGuiContext *self) { return self->DragDropPayload; }
void wrap_ImGuiContext_SetDragDropTargetRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->DragDropTargetRect = v; }
ImRect wrap_ImGuiContext_GetDragDropTargetRect(ImGuiContext *self) { return self->DragDropTargetRect; }
void wrap_ImGuiContext_SetDragDropTargetClipRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->DragDropTargetClipRect = v; }
ImRect wrap_ImGuiContext_GetDragDropTargetClipRect(ImGuiContext *self) { return self->DragDropTargetClipRect; }
void wrap_ImGuiContext_SetDragDropTargetId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DragDropTargetId = v; }
ImGuiID wrap_ImGuiContext_GetDragDropTargetId(ImGuiContext *self) { return self->DragDropTargetId; }
void wrap_ImGuiContext_SetDragDropAcceptFlags(ImGuiContext *ImGuiContextPtr, ImGuiDragDropFlags v) { ImGuiContextPtr->DragDropAcceptFlags = v; }
ImGuiDragDropFlags wrap_ImGuiContext_GetDragDropAcceptFlags(ImGuiContext *self) { return self->DragDropAcceptFlags; }
void wrap_ImGuiContext_SetDragDropAcceptIdCurrRectSurface(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DragDropAcceptIdCurrRectSurface = v; }
float wrap_ImGuiContext_GetDragDropAcceptIdCurrRectSurface(ImGuiContext *self) { return self->DragDropAcceptIdCurrRectSurface; }
void wrap_ImGuiContext_SetDragDropAcceptIdCurr(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DragDropAcceptIdCurr = v; }
ImGuiID wrap_ImGuiContext_GetDragDropAcceptIdCurr(ImGuiContext *self) { return self->DragDropAcceptIdCurr; }
void wrap_ImGuiContext_SetDragDropAcceptIdPrev(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DragDropAcceptIdPrev = v; }
ImGuiID wrap_ImGuiContext_GetDragDropAcceptIdPrev(ImGuiContext *self) { return self->DragDropAcceptIdPrev; }
void wrap_ImGuiContext_SetDragDropAcceptFrameCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->DragDropAcceptFrameCount = v; }
int wrap_ImGuiContext_GetDragDropAcceptFrameCount(ImGuiContext *self) { return self->DragDropAcceptFrameCount; }
void wrap_ImGuiContext_SetDragDropHoldJustPressedId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DragDropHoldJustPressedId = v; }
ImGuiID wrap_ImGuiContext_GetDragDropHoldJustPressedId(ImGuiContext *self) { return self->DragDropHoldJustPressedId; }
void wrap_ImGuiContext_SetDragDropPayloadBufHeap(ImGuiContext *ImGuiContextPtr, ImVector_unsigned_char v) { ImGuiContextPtr->DragDropPayloadBufHeap = v; }
ImVector_unsigned_char wrap_ImGuiContext_GetDragDropPayloadBufHeap(ImGuiContext *self) { return self->DragDropPayloadBufHeap; }
void wrap_ImGuiContext_SetDragDropPayloadBufLocal(ImGuiContext *ImGuiContextPtr, unsigned char* v) { memcpy(ImGuiContextPtr->DragDropPayloadBufLocal, v, sizeof(unsigned char)*16); }
unsigned char* wrap_ImGuiContext_GetDragDropPayloadBufLocal(ImGuiContext *self) { return self->DragDropPayloadBufLocal; }
unsigned char cimgui_unsigned_char_GetAtIdx(unsigned char *self, int index) { return self[index]; }
void wrap_ImGuiContext_SetClipperTempDataStacked(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->ClipperTempDataStacked = v; }
int wrap_ImGuiContext_GetClipperTempDataStacked(ImGuiContext *self) { return self->ClipperTempDataStacked; }
void wrap_ImGuiContext_SetClipperTempData(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiListClipperData v) { ImGuiContextPtr->ClipperTempData = v; }
ImVector_ImGuiListClipperData wrap_ImGuiContext_GetClipperTempData(ImGuiContext *self) { return self->ClipperTempData; }
void wrap_ImGuiContext_SetCurrentTable(ImGuiContext *ImGuiContextPtr, ImGuiTable* v) { ImGuiContextPtr->CurrentTable = v; }
ImGuiTable* wrap_ImGuiContext_GetCurrentTable(ImGuiContext *self) { return self->CurrentTable; }
void wrap_ImGuiContext_SetDebugBreakInTable(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DebugBreakInTable = v; }
ImGuiID wrap_ImGuiContext_GetDebugBreakInTable(ImGuiContext *self) { return self->DebugBreakInTable; }
void wrap_ImGuiContext_SetTablesTempDataStacked(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->TablesTempDataStacked = v; }
int wrap_ImGuiContext_GetTablesTempDataStacked(ImGuiContext *self) { return self->TablesTempDataStacked; }
void wrap_ImGuiContext_SetTablesTempData(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiTableTempData v) { ImGuiContextPtr->TablesTempData = v; }
ImVector_ImGuiTableTempData wrap_ImGuiContext_GetTablesTempData(ImGuiContext *self) { return self->TablesTempData; }
void wrap_ImGuiContext_SetTables(ImGuiContext *ImGuiContextPtr, ImPool_ImGuiTable v) { ImGuiContextPtr->Tables = v; }
ImPool_ImGuiTable wrap_ImGuiContext_GetTables(ImGuiContext *self) { return self->Tables; }
void wrap_ImGuiContext_SetTablesLastTimeActive(ImGuiContext *ImGuiContextPtr, ImVector_float v) { ImGuiContextPtr->TablesLastTimeActive = v; }
ImVector_float wrap_ImGuiContext_GetTablesLastTimeActive(ImGuiContext *self) { return self->TablesLastTimeActive; }
void wrap_ImGuiContext_SetDrawChannelsTempMergeBuffer(ImGuiContext *ImGuiContextPtr, ImVector_ImDrawChannel v) { ImGuiContextPtr->DrawChannelsTempMergeBuffer = v; }
ImVector_ImDrawChannel wrap_ImGuiContext_GetDrawChannelsTempMergeBuffer(ImGuiContext *self) { return self->DrawChannelsTempMergeBuffer; }
void wrap_ImGuiContext_SetCurrentTabBar(ImGuiContext *ImGuiContextPtr, ImGuiTabBar* v) { ImGuiContextPtr->CurrentTabBar = v; }
ImGuiTabBar* wrap_ImGuiContext_GetCurrentTabBar(ImGuiContext *self) { return self->CurrentTabBar; }
void wrap_ImGuiContext_SetTabBars(ImGuiContext *ImGuiContextPtr, ImPool_ImGuiTabBar v) { ImGuiContextPtr->TabBars = v; }
ImPool_ImGuiTabBar wrap_ImGuiContext_GetTabBars(ImGuiContext *self) { return self->TabBars; }
void wrap_ImGuiContext_SetCurrentTabBarStack(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiPtrOrIndex v) { ImGuiContextPtr->CurrentTabBarStack = v; }
ImVector_ImGuiPtrOrIndex wrap_ImGuiContext_GetCurrentTabBarStack(ImGuiContext *self) { return self->CurrentTabBarStack; }
void wrap_ImGuiContext_SetShrinkWidthBuffer(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiShrinkWidthItem v) { ImGuiContextPtr->ShrinkWidthBuffer = v; }
ImVector_ImGuiShrinkWidthItem wrap_ImGuiContext_GetShrinkWidthBuffer(ImGuiContext *self) { return self->ShrinkWidthBuffer; }
void wrap_ImGuiContext_SetHoverItemDelayId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoverItemDelayId = v; }
ImGuiID wrap_ImGuiContext_GetHoverItemDelayId(ImGuiContext *self) { return self->HoverItemDelayId; }
void wrap_ImGuiContext_SetHoverItemDelayIdPreviousFrame(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoverItemDelayIdPreviousFrame = v; }
ImGuiID wrap_ImGuiContext_GetHoverItemDelayIdPreviousFrame(ImGuiContext *self) { return self->HoverItemDelayIdPreviousFrame; }
void wrap_ImGuiContext_SetHoverItemDelayTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->HoverItemDelayTimer = v; }
float wrap_ImGuiContext_GetHoverItemDelayTimer(ImGuiContext *self) { return self->HoverItemDelayTimer; }
void wrap_ImGuiContext_SetHoverItemDelayClearTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->HoverItemDelayClearTimer = v; }
float wrap_ImGuiContext_GetHoverItemDelayClearTimer(ImGuiContext *self) { return self->HoverItemDelayClearTimer; }
void wrap_ImGuiContext_SetHoverItemUnlockedStationaryId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoverItemUnlockedStationaryId = v; }
ImGuiID wrap_ImGuiContext_GetHoverItemUnlockedStationaryId(ImGuiContext *self) { return self->HoverItemUnlockedStationaryId; }
void wrap_ImGuiContext_SetHoverWindowUnlockedStationaryId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HoverWindowUnlockedStationaryId = v; }
ImGuiID wrap_ImGuiContext_GetHoverWindowUnlockedStationaryId(ImGuiContext *self) { return self->HoverWindowUnlockedStationaryId; }
void wrap_ImGuiContext_SetMouseCursor(ImGuiContext *ImGuiContextPtr, ImGuiMouseCursor v) { ImGuiContextPtr->MouseCursor = v; }
ImGuiMouseCursor wrap_ImGuiContext_GetMouseCursor(ImGuiContext *self) { return self->MouseCursor; }
void wrap_ImGuiContext_SetMouseStationaryTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->MouseStationaryTimer = v; }
float wrap_ImGuiContext_GetMouseStationaryTimer(ImGuiContext *self) { return self->MouseStationaryTimer; }
void wrap_ImGuiContext_SetMouseLastValidPos(ImGuiContext *ImGuiContextPtr, ImVec2 v) { ImGuiContextPtr->MouseLastValidPos = v; }
ImVec2 wrap_ImGuiContext_GetMouseLastValidPos(ImGuiContext *self) { return self->MouseLastValidPos; }
void wrap_ImGuiContext_SetInputTextState(ImGuiContext *ImGuiContextPtr, ImGuiInputTextState v) { ImGuiContextPtr->InputTextState = v; }
ImGuiInputTextState wrap_ImGuiContext_GetInputTextState(ImGuiContext *self) { return self->InputTextState; }
void wrap_ImGuiContext_SetInputTextDeactivatedState(ImGuiContext *ImGuiContextPtr, ImGuiInputTextDeactivatedState v) { ImGuiContextPtr->InputTextDeactivatedState = v; }
ImGuiInputTextDeactivatedState wrap_ImGuiContext_GetInputTextDeactivatedState(ImGuiContext *self) { return self->InputTextDeactivatedState; }
void wrap_ImGuiContext_SetInputTextPasswordFont(ImGuiContext *ImGuiContextPtr, ImFont v) { ImGuiContextPtr->InputTextPasswordFont = v; }
ImFont wrap_ImGuiContext_GetInputTextPasswordFont(ImGuiContext *self) { return self->InputTextPasswordFont; }
void wrap_ImGuiContext_SetTempInputId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->TempInputId = v; }
ImGuiID wrap_ImGuiContext_GetTempInputId(ImGuiContext *self) { return self->TempInputId; }
void wrap_ImGuiContext_SetBeginMenuDepth(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->BeginMenuDepth = v; }
int wrap_ImGuiContext_GetBeginMenuDepth(ImGuiContext *self) { return self->BeginMenuDepth; }
void wrap_ImGuiContext_SetBeginComboDepth(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->BeginComboDepth = v; }
int wrap_ImGuiContext_GetBeginComboDepth(ImGuiContext *self) { return self->BeginComboDepth; }
void wrap_ImGuiContext_SetColorEditOptions(ImGuiContext *ImGuiContextPtr, ImGuiColorEditFlags v) { ImGuiContextPtr->ColorEditOptions = v; }
ImGuiColorEditFlags wrap_ImGuiContext_GetColorEditOptions(ImGuiContext *self) { return self->ColorEditOptions; }
void wrap_ImGuiContext_SetColorEditCurrentID(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->ColorEditCurrentID = v; }
ImGuiID wrap_ImGuiContext_GetColorEditCurrentID(ImGuiContext *self) { return self->ColorEditCurrentID; }
void wrap_ImGuiContext_SetColorEditSavedID(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->ColorEditSavedID = v; }
ImGuiID wrap_ImGuiContext_GetColorEditSavedID(ImGuiContext *self) { return self->ColorEditSavedID; }
void wrap_ImGuiContext_SetColorEditSavedHue(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->ColorEditSavedHue = v; }
float wrap_ImGuiContext_GetColorEditSavedHue(ImGuiContext *self) { return self->ColorEditSavedHue; }
void wrap_ImGuiContext_SetColorEditSavedSat(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->ColorEditSavedSat = v; }
float wrap_ImGuiContext_GetColorEditSavedSat(ImGuiContext *self) { return self->ColorEditSavedSat; }
void wrap_ImGuiContext_SetColorEditSavedColor(ImGuiContext *ImGuiContextPtr, ImU32 v) { ImGuiContextPtr->ColorEditSavedColor = v; }
ImU32 wrap_ImGuiContext_GetColorEditSavedColor(ImGuiContext *self) { return self->ColorEditSavedColor; }
void wrap_ImGuiContext_SetColorPickerRef(ImGuiContext *ImGuiContextPtr, ImVec4 v) { ImGuiContextPtr->ColorPickerRef = v; }
ImVec4 wrap_ImGuiContext_GetColorPickerRef(ImGuiContext *self) { return self->ColorPickerRef; }
void wrap_ImGuiContext_SetComboPreviewData(ImGuiContext *ImGuiContextPtr, ImGuiComboPreviewData v) { ImGuiContextPtr->ComboPreviewData = v; }
ImGuiComboPreviewData wrap_ImGuiContext_GetComboPreviewData(ImGuiContext *self) { return self->ComboPreviewData; }
void wrap_ImGuiContext_SetWindowResizeBorderExpectedRect(ImGuiContext *ImGuiContextPtr, ImRect v) { ImGuiContextPtr->WindowResizeBorderExpectedRect = v; }
ImRect wrap_ImGuiContext_GetWindowResizeBorderExpectedRect(ImGuiContext *self) { return self->WindowResizeBorderExpectedRect; }
void wrap_ImGuiContext_SetWindowResizeRelativeMode(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->WindowResizeRelativeMode = v; }
bool wrap_ImGuiContext_GetWindowResizeRelativeMode(ImGuiContext *self) { return self->WindowResizeRelativeMode; }
void wrap_ImGuiContext_SetSliderGrabClickOffset(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->SliderGrabClickOffset = v; }
float wrap_ImGuiContext_GetSliderGrabClickOffset(ImGuiContext *self) { return self->SliderGrabClickOffset; }
void wrap_ImGuiContext_SetSliderCurrentAccum(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->SliderCurrentAccum = v; }
float wrap_ImGuiContext_GetSliderCurrentAccum(ImGuiContext *self) { return self->SliderCurrentAccum; }
void wrap_ImGuiContext_SetSliderCurrentAccumDirty(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->SliderCurrentAccumDirty = v; }
bool wrap_ImGuiContext_GetSliderCurrentAccumDirty(ImGuiContext *self) { return self->SliderCurrentAccumDirty; }
void wrap_ImGuiContext_SetDragCurrentAccumDirty(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DragCurrentAccumDirty = v; }
bool wrap_ImGuiContext_GetDragCurrentAccumDirty(ImGuiContext *self) { return self->DragCurrentAccumDirty; }
void wrap_ImGuiContext_SetDragCurrentAccum(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DragCurrentAccum = v; }
float wrap_ImGuiContext_GetDragCurrentAccum(ImGuiContext *self) { return self->DragCurrentAccum; }
void wrap_ImGuiContext_SetDragSpeedDefaultRatio(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DragSpeedDefaultRatio = v; }
float wrap_ImGuiContext_GetDragSpeedDefaultRatio(ImGuiContext *self) { return self->DragSpeedDefaultRatio; }
void wrap_ImGuiContext_SetScrollbarClickDeltaToGrabCenter(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->ScrollbarClickDeltaToGrabCenter = v; }
float wrap_ImGuiContext_GetScrollbarClickDeltaToGrabCenter(ImGuiContext *self) { return self->ScrollbarClickDeltaToGrabCenter; }
void wrap_ImGuiContext_SetDisabledAlphaBackup(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DisabledAlphaBackup = v; }
float wrap_ImGuiContext_GetDisabledAlphaBackup(ImGuiContext *self) { return self->DisabledAlphaBackup; }
void wrap_ImGuiContext_SetDisabledStackSize(ImGuiContext *ImGuiContextPtr, short v) { ImGuiContextPtr->DisabledStackSize = v; }
short wrap_ImGuiContext_GetDisabledStackSize(ImGuiContext *self) { return self->DisabledStackSize; }
void wrap_ImGuiContext_SetLockMarkEdited(ImGuiContext *ImGuiContextPtr, short v) { ImGuiContextPtr->LockMarkEdited = v; }
short wrap_ImGuiContext_GetLockMarkEdited(ImGuiContext *self) { return self->LockMarkEdited; }
void wrap_ImGuiContext_SetTooltipOverrideCount(ImGuiContext *ImGuiContextPtr, short v) { ImGuiContextPtr->TooltipOverrideCount = v; }
short wrap_ImGuiContext_GetTooltipOverrideCount(ImGuiContext *self) { return self->TooltipOverrideCount; }
void wrap_ImGuiContext_SetClipboardHandlerData(ImGuiContext *ImGuiContextPtr, ImVector_char v) { ImGuiContextPtr->ClipboardHandlerData = v; }
ImVector_char wrap_ImGuiContext_GetClipboardHandlerData(ImGuiContext *self) { return self->ClipboardHandlerData; }
void wrap_ImGuiContext_SetMenusIdSubmittedThisFrame(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiID v) { ImGuiContextPtr->MenusIdSubmittedThisFrame = v; }
ImVector_ImGuiID wrap_ImGuiContext_GetMenusIdSubmittedThisFrame(ImGuiContext *self) { return self->MenusIdSubmittedThisFrame; }
void wrap_ImGuiContext_SetTypingSelectState(ImGuiContext *ImGuiContextPtr, ImGuiTypingSelectState v) { ImGuiContextPtr->TypingSelectState = v; }
ImGuiTypingSelectState wrap_ImGuiContext_GetTypingSelectState(ImGuiContext *self) { return self->TypingSelectState; }
void wrap_ImGuiContext_SetPlatformImeData(ImGuiContext *ImGuiContextPtr, ImGuiPlatformImeData v) { ImGuiContextPtr->PlatformImeData = v; }
ImGuiPlatformImeData wrap_ImGuiContext_GetPlatformImeData(ImGuiContext *self) { return self->PlatformImeData; }
void wrap_ImGuiContext_SetPlatformImeDataPrev(ImGuiContext *ImGuiContextPtr, ImGuiPlatformImeData v) { ImGuiContextPtr->PlatformImeDataPrev = v; }
ImGuiPlatformImeData wrap_ImGuiContext_GetPlatformImeDataPrev(ImGuiContext *self) { return self->PlatformImeDataPrev; }
void wrap_ImGuiContext_SetPlatformImeViewport(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->PlatformImeViewport = v; }
ImGuiID wrap_ImGuiContext_GetPlatformImeViewport(ImGuiContext *self) { return self->PlatformImeViewport; }
void wrap_ImGuiContext_SetDockContext(ImGuiContext *ImGuiContextPtr, ImGuiDockContext v) { ImGuiContextPtr->DockContext = v; }
ImGuiDockContext wrap_ImGuiContext_GetDockContext(ImGuiContext *self) { return self->DockContext; }
void wrap_ImGuiContext_SetSettingsLoaded(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->SettingsLoaded = v; }
bool wrap_ImGuiContext_GetSettingsLoaded(ImGuiContext *self) { return self->SettingsLoaded; }
void wrap_ImGuiContext_SetSettingsDirtyTimer(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->SettingsDirtyTimer = v; }
float wrap_ImGuiContext_GetSettingsDirtyTimer(ImGuiContext *self) { return self->SettingsDirtyTimer; }
void wrap_ImGuiContext_SetSettingsIniData(ImGuiContext *ImGuiContextPtr, ImGuiTextBuffer v) { ImGuiContextPtr->SettingsIniData = v; }
ImGuiTextBuffer wrap_ImGuiContext_GetSettingsIniData(ImGuiContext *self) { return self->SettingsIniData; }
void wrap_ImGuiContext_SetSettingsHandlers(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiSettingsHandler v) { ImGuiContextPtr->SettingsHandlers = v; }
ImVector_ImGuiSettingsHandler wrap_ImGuiContext_GetSettingsHandlers(ImGuiContext *self) { return self->SettingsHandlers; }
void wrap_ImGuiContext_SetSettingsWindows(ImGuiContext *ImGuiContextPtr, ImChunkStream_ImGuiWindowSettings v) { ImGuiContextPtr->SettingsWindows = v; }
ImChunkStream_ImGuiWindowSettings wrap_ImGuiContext_GetSettingsWindows(ImGuiContext *self) { return self->SettingsWindows; }
void wrap_ImGuiContext_SetSettingsTables(ImGuiContext *ImGuiContextPtr, ImChunkStream_ImGuiTableSettings v) { ImGuiContextPtr->SettingsTables = v; }
ImChunkStream_ImGuiTableSettings wrap_ImGuiContext_GetSettingsTables(ImGuiContext *self) { return self->SettingsTables; }
void wrap_ImGuiContext_SetHooks(ImGuiContext *ImGuiContextPtr, ImVector_ImGuiContextHook v) { ImGuiContextPtr->Hooks = v; }
ImVector_ImGuiContextHook wrap_ImGuiContext_GetHooks(ImGuiContext *self) { return self->Hooks; }
void wrap_ImGuiContext_SetHookIdNext(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->HookIdNext = v; }
ImGuiID wrap_ImGuiContext_GetHookIdNext(ImGuiContext *self) { return self->HookIdNext; }
void wrap_ImGuiContext_SetLocalizationTable(ImGuiContext *ImGuiContextPtr, const char** v) { memcpy(ImGuiContextPtr->LocalizationTable, v, sizeof(const char*)*11); }
const char** wrap_ImGuiContext_GetLocalizationTable(ImGuiContext *self) { return self->LocalizationTable; }
const char* cimgui_const_charPtr_GetAtIdx(const char* *self, int index) { return self[index]; }
void wrap_ImGuiContext_SetLogEnabled(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->LogEnabled = v; }
bool wrap_ImGuiContext_GetLogEnabled(ImGuiContext *self) { return self->LogEnabled; }
void wrap_ImGuiContext_SetLogType(ImGuiContext *ImGuiContextPtr, ImGuiLogType v) { ImGuiContextPtr->LogType = v; }
ImGuiLogType wrap_ImGuiContext_GetLogType(ImGuiContext *self) { return self->LogType; }
void wrap_ImGuiContext_SetLogFile(ImGuiContext *ImGuiContextPtr, ImFileHandle v) { ImGuiContextPtr->LogFile = v; }
ImFileHandle wrap_ImGuiContext_GetLogFile(ImGuiContext *self) { return self->LogFile; }
void wrap_ImGuiContext_SetLogBuffer(ImGuiContext *ImGuiContextPtr, ImGuiTextBuffer v) { ImGuiContextPtr->LogBuffer = v; }
ImGuiTextBuffer wrap_ImGuiContext_GetLogBuffer(ImGuiContext *self) { return self->LogBuffer; }
void wrap_ImGuiContext_SetLogNextPrefix(ImGuiContext *ImGuiContextPtr, const char* v) { ImGuiContextPtr->LogNextPrefix = v; }
const char* wrap_ImGuiContext_GetLogNextPrefix(ImGuiContext *self) { return self->LogNextPrefix; }
void wrap_ImGuiContext_SetLogNextSuffix(ImGuiContext *ImGuiContextPtr, const char* v) { ImGuiContextPtr->LogNextSuffix = v; }
const char* wrap_ImGuiContext_GetLogNextSuffix(ImGuiContext *self) { return self->LogNextSuffix; }
void wrap_ImGuiContext_SetLogLinePosY(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->LogLinePosY = v; }
float wrap_ImGuiContext_GetLogLinePosY(ImGuiContext *self) { return self->LogLinePosY; }
void wrap_ImGuiContext_SetLogLineFirstItem(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->LogLineFirstItem = v; }
bool wrap_ImGuiContext_GetLogLineFirstItem(ImGuiContext *self) { return self->LogLineFirstItem; }
void wrap_ImGuiContext_SetLogDepthRef(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->LogDepthRef = v; }
int wrap_ImGuiContext_GetLogDepthRef(ImGuiContext *self) { return self->LogDepthRef; }
void wrap_ImGuiContext_SetLogDepthToExpand(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->LogDepthToExpand = v; }
int wrap_ImGuiContext_GetLogDepthToExpand(ImGuiContext *self) { return self->LogDepthToExpand; }
void wrap_ImGuiContext_SetLogDepthToExpandDefault(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->LogDepthToExpandDefault = v; }
int wrap_ImGuiContext_GetLogDepthToExpandDefault(ImGuiContext *self) { return self->LogDepthToExpandDefault; }
void wrap_ImGuiContext_SetDebugLogFlags(ImGuiContext *ImGuiContextPtr, ImGuiDebugLogFlags v) { ImGuiContextPtr->DebugLogFlags = v; }
ImGuiDebugLogFlags wrap_ImGuiContext_GetDebugLogFlags(ImGuiContext *self) { return self->DebugLogFlags; }
void wrap_ImGuiContext_SetDebugLogBuf(ImGuiContext *ImGuiContextPtr, ImGuiTextBuffer v) { ImGuiContextPtr->DebugLogBuf = v; }
ImGuiTextBuffer wrap_ImGuiContext_GetDebugLogBuf(ImGuiContext *self) { return self->DebugLogBuf; }
void wrap_ImGuiContext_SetDebugLogIndex(ImGuiContext *ImGuiContextPtr, ImGuiTextIndex v) { ImGuiContextPtr->DebugLogIndex = v; }
ImGuiTextIndex wrap_ImGuiContext_GetDebugLogIndex(ImGuiContext *self) { return self->DebugLogIndex; }
void wrap_ImGuiContext_SetDebugLogAutoDisableFlags(ImGuiContext *ImGuiContextPtr, ImGuiDebugLogFlags v) { ImGuiContextPtr->DebugLogAutoDisableFlags = v; }
ImGuiDebugLogFlags wrap_ImGuiContext_GetDebugLogAutoDisableFlags(ImGuiContext *self) { return self->DebugLogAutoDisableFlags; }
void wrap_ImGuiContext_SetDebugLogAutoDisableFrames(ImGuiContext *ImGuiContextPtr, ImU8 v) { ImGuiContextPtr->DebugLogAutoDisableFrames = v; }
ImU8 wrap_ImGuiContext_GetDebugLogAutoDisableFrames(ImGuiContext *self) { return self->DebugLogAutoDisableFrames; }
void wrap_ImGuiContext_SetDebugLocateFrames(ImGuiContext *ImGuiContextPtr, ImU8 v) { ImGuiContextPtr->DebugLocateFrames = v; }
ImU8 wrap_ImGuiContext_GetDebugLocateFrames(ImGuiContext *self) { return self->DebugLocateFrames; }
void wrap_ImGuiContext_SetDebugBreakInLocateId(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DebugBreakInLocateId = v; }
bool wrap_ImGuiContext_GetDebugBreakInLocateId(ImGuiContext *self) { return self->DebugBreakInLocateId; }
void wrap_ImGuiContext_SetDebugBreakKeyChord(ImGuiContext *ImGuiContextPtr, ImGuiKeyChord v) { ImGuiContextPtr->DebugBreakKeyChord = v; }
ImGuiKeyChord wrap_ImGuiContext_GetDebugBreakKeyChord(ImGuiContext *self) { return self->DebugBreakKeyChord; }
void wrap_ImGuiContext_SetDebugBeginReturnValueCullDepth(ImGuiContext *ImGuiContextPtr, ImS8 v) { ImGuiContextPtr->DebugBeginReturnValueCullDepth = v; }
ImS8 wrap_ImGuiContext_GetDebugBeginReturnValueCullDepth(ImGuiContext *self) { return self->DebugBeginReturnValueCullDepth; }
void wrap_ImGuiContext_SetDebugItemPickerActive(ImGuiContext *ImGuiContextPtr, bool v) { ImGuiContextPtr->DebugItemPickerActive = v; }
bool wrap_ImGuiContext_GetDebugItemPickerActive(ImGuiContext *self) { return self->DebugItemPickerActive; }
void wrap_ImGuiContext_SetDebugItemPickerMouseButton(ImGuiContext *ImGuiContextPtr, ImU8 v) { ImGuiContextPtr->DebugItemPickerMouseButton = v; }
ImU8 wrap_ImGuiContext_GetDebugItemPickerMouseButton(ImGuiContext *self) { return self->DebugItemPickerMouseButton; }
void wrap_ImGuiContext_SetDebugItemPickerBreakId(ImGuiContext *ImGuiContextPtr, ImGuiID v) { ImGuiContextPtr->DebugItemPickerBreakId = v; }
ImGuiID wrap_ImGuiContext_GetDebugItemPickerBreakId(ImGuiContext *self) { return self->DebugItemPickerBreakId; }
void wrap_ImGuiContext_SetDebugFlashStyleColorTime(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->DebugFlashStyleColorTime = v; }
float wrap_ImGuiContext_GetDebugFlashStyleColorTime(ImGuiContext *self) { return self->DebugFlashStyleColorTime; }
void wrap_ImGuiContext_SetDebugFlashStyleColorBackup(ImGuiContext *ImGuiContextPtr, ImVec4 v) { ImGuiContextPtr->DebugFlashStyleColorBackup = v; }
ImVec4 wrap_ImGuiContext_GetDebugFlashStyleColorBackup(ImGuiContext *self) { return self->DebugFlashStyleColorBackup; }
void wrap_ImGuiContext_SetDebugMetricsConfig(ImGuiContext *ImGuiContextPtr, ImGuiMetricsConfig v) { ImGuiContextPtr->DebugMetricsConfig = v; }
ImGuiMetricsConfig wrap_ImGuiContext_GetDebugMetricsConfig(ImGuiContext *self) { return self->DebugMetricsConfig; }
void wrap_ImGuiContext_SetDebugIDStackTool(ImGuiContext *ImGuiContextPtr, ImGuiIDStackTool v) { ImGuiContextPtr->DebugIDStackTool = v; }
ImGuiIDStackTool wrap_ImGuiContext_GetDebugIDStackTool(ImGuiContext *self) { return self->DebugIDStackTool; }
void wrap_ImGuiContext_SetDebugAllocInfo(ImGuiContext *ImGuiContextPtr, ImGuiDebugAllocInfo v) { ImGuiContextPtr->DebugAllocInfo = v; }
ImGuiDebugAllocInfo wrap_ImGuiContext_GetDebugAllocInfo(ImGuiContext *self) { return self->DebugAllocInfo; }
void wrap_ImGuiContext_SetDebugHoveredDockNode(ImGuiContext *ImGuiContextPtr, ImGuiDockNode* v) { ImGuiContextPtr->DebugHoveredDockNode = v; }
ImGuiDockNode* wrap_ImGuiContext_GetDebugHoveredDockNode(ImGuiContext *self) { return self->DebugHoveredDockNode; }
void wrap_ImGuiContext_SetFramerateSecPerFrame(ImGuiContext *ImGuiContextPtr, float* v) { memcpy(ImGuiContextPtr->FramerateSecPerFrame, v, sizeof(float)*60); }
float* wrap_ImGuiContext_GetFramerateSecPerFrame(ImGuiContext *self) { return self->FramerateSecPerFrame; }
float cimgui_float_GetAtIdx(float *self, int index) { return self[index]; }
void wrap_ImGuiContext_SetFramerateSecPerFrameIdx(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FramerateSecPerFrameIdx = v; }
int wrap_ImGuiContext_GetFramerateSecPerFrameIdx(ImGuiContext *self) { return self->FramerateSecPerFrameIdx; }
void wrap_ImGuiContext_SetFramerateSecPerFrameCount(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->FramerateSecPerFrameCount = v; }
int wrap_ImGuiContext_GetFramerateSecPerFrameCount(ImGuiContext *self) { return self->FramerateSecPerFrameCount; }
void wrap_ImGuiContext_SetFramerateSecPerFrameAccum(ImGuiContext *ImGuiContextPtr, float v) { ImGuiContextPtr->FramerateSecPerFrameAccum = v; }
float wrap_ImGuiContext_GetFramerateSecPerFrameAccum(ImGuiContext *self) { return self->FramerateSecPerFrameAccum; }
void wrap_ImGuiContext_SetWantCaptureMouseNextFrame(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WantCaptureMouseNextFrame = v; }
int wrap_ImGuiContext_GetWantCaptureMouseNextFrame(ImGuiContext *self) { return self->WantCaptureMouseNextFrame; }
void wrap_ImGuiContext_SetWantCaptureKeyboardNextFrame(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WantCaptureKeyboardNextFrame = v; }
int wrap_ImGuiContext_GetWantCaptureKeyboardNextFrame(ImGuiContext *self) { return self->WantCaptureKeyboardNextFrame; }
void wrap_ImGuiContext_SetWantTextInputNextFrame(ImGuiContext *ImGuiContextPtr, int v) { ImGuiContextPtr->WantTextInputNextFrame = v; }
int wrap_ImGuiContext_GetWantTextInputNextFrame(ImGuiContext *self) { return self->WantTextInputNextFrame; }
void wrap_ImGuiContext_SetTempBuffer(ImGuiContext *ImGuiContextPtr, ImVector_char v) { ImGuiContextPtr->TempBuffer = v; }
ImVector_char wrap_ImGuiContext_GetTempBuffer(ImGuiContext *self) { return self->TempBuffer; }
void wrap_ImGuiContext_SetTempKeychordName(ImGuiContext *ImGuiContextPtr, char* v) { memcpy(ImGuiContextPtr->TempKeychordName, v, sizeof(char)*64); }
char* wrap_ImGuiContext_GetTempKeychordName(ImGuiContext *self) { return self->TempKeychordName; }
void wrap_ImGuiContextHook_SetHookId(ImGuiContextHook *ImGuiContextHookPtr, ImGuiID v) { ImGuiContextHookPtr->HookId = v; }
ImGuiID wrap_ImGuiContextHook_GetHookId(ImGuiContextHook *self) { return self->HookId; }
void wrap_ImGuiContextHook_SetType(ImGuiContextHook *ImGuiContextHookPtr, ImGuiContextHookType v) { ImGuiContextHookPtr->Type = v; }
ImGuiContextHookType wrap_ImGuiContextHook_GetType(ImGuiContextHook *self) { return self->Type; }
void wrap_ImGuiContextHook_SetOwner(ImGuiContextHook *ImGuiContextHookPtr, ImGuiID v) { ImGuiContextHookPtr->Owner = v; }
ImGuiID wrap_ImGuiContextHook_GetOwner(ImGuiContextHook *self) { return self->Owner; }
void wrap_ImGuiContextHook_SetCallback(ImGuiContextHook *ImGuiContextHookPtr, ImGuiContextHookCallback v) { ImGuiContextHookPtr->Callback = v; }
ImGuiContextHookCallback wrap_ImGuiContextHook_GetCallback(ImGuiContextHook *self) { return self->Callback; }
void wrap_ImGuiContextHook_SetUserData(ImGuiContextHook *ImGuiContextHookPtr, uintptr_t v) { ImGuiContextHookPtr->UserData = (void*)v; }
uintptr_t wrap_ImGuiContextHook_GetUserData(ImGuiContextHook *self) { return (uintptr_t)self->UserData; }
void wrap_ImGuiDataTypeInfo_SetSize(ImGuiDataTypeInfo *ImGuiDataTypeInfoPtr, size_t v) { ImGuiDataTypeInfoPtr->Size = v; }
size_t wrap_ImGuiDataTypeInfo_GetSize(ImGuiDataTypeInfo *self) { return self->Size; }
void wrap_ImGuiDataTypeInfo_SetName(ImGuiDataTypeInfo *ImGuiDataTypeInfoPtr, const char* v) { ImGuiDataTypeInfoPtr->Name = v; }
const char* wrap_ImGuiDataTypeInfo_GetName(ImGuiDataTypeInfo *self) { return self->Name; }
void wrap_ImGuiDataTypeInfo_SetPrintFmt(ImGuiDataTypeInfo *ImGuiDataTypeInfoPtr, const char* v) { ImGuiDataTypeInfoPtr->PrintFmt = v; }
const char* wrap_ImGuiDataTypeInfo_GetPrintFmt(ImGuiDataTypeInfo *self) { return self->PrintFmt; }
void wrap_ImGuiDataTypeInfo_SetScanFmt(ImGuiDataTypeInfo *ImGuiDataTypeInfoPtr, const char* v) { ImGuiDataTypeInfoPtr->ScanFmt = v; }
const char* wrap_ImGuiDataTypeInfo_GetScanFmt(ImGuiDataTypeInfo *self) { return self->ScanFmt; }
void wrap_ImGuiDataTypeTempStorage_SetData(ImGuiDataTypeTempStorage *ImGuiDataTypeTempStoragePtr, ImU8* v) { memcpy(ImGuiDataTypeTempStoragePtr->Data, v, sizeof(ImU8)*8); }
ImU8* wrap_ImGuiDataTypeTempStorage_GetData(ImGuiDataTypeTempStorage *self) { return self->Data; }
void wrap_ImGuiDataVarInfo_SetType(ImGuiDataVarInfo *ImGuiDataVarInfoPtr, ImGuiDataType v) { ImGuiDataVarInfoPtr->Type = v; }
ImGuiDataType wrap_ImGuiDataVarInfo_GetType(ImGuiDataVarInfo *self) { return self->Type; }
void wrap_ImGuiDataVarInfo_SetCount(ImGuiDataVarInfo *ImGuiDataVarInfoPtr, ImU32 v) { ImGuiDataVarInfoPtr->Count = v; }
ImU32 wrap_ImGuiDataVarInfo_GetCount(ImGuiDataVarInfo *self) { return self->Count; }
void wrap_ImGuiDataVarInfo_SetOffset(ImGuiDataVarInfo *ImGuiDataVarInfoPtr, ImU32 v) { ImGuiDataVarInfoPtr->Offset = v; }
ImU32 wrap_ImGuiDataVarInfo_GetOffset(ImGuiDataVarInfo *self) { return self->Offset; }
void wrap_ImGuiDebugAllocEntry_SetFrameCount(ImGuiDebugAllocEntry *ImGuiDebugAllocEntryPtr, int v) { ImGuiDebugAllocEntryPtr->FrameCount = v; }
int wrap_ImGuiDebugAllocEntry_GetFrameCount(ImGuiDebugAllocEntry *self) { return self->FrameCount; }
void wrap_ImGuiDebugAllocEntry_SetAllocCount(ImGuiDebugAllocEntry *ImGuiDebugAllocEntryPtr, ImS16 v) { ImGuiDebugAllocEntryPtr->AllocCount = v; }
ImS16 wrap_ImGuiDebugAllocEntry_GetAllocCount(ImGuiDebugAllocEntry *self) { return self->AllocCount; }
void wrap_ImGuiDebugAllocEntry_SetFreeCount(ImGuiDebugAllocEntry *ImGuiDebugAllocEntryPtr, ImS16 v) { ImGuiDebugAllocEntryPtr->FreeCount = v; }
ImS16 wrap_ImGuiDebugAllocEntry_GetFreeCount(ImGuiDebugAllocEntry *self) { return self->FreeCount; }
void wrap_ImGuiDebugAllocInfo_SetTotalAllocCount(ImGuiDebugAllocInfo *ImGuiDebugAllocInfoPtr, int v) { ImGuiDebugAllocInfoPtr->TotalAllocCount = v; }
int wrap_ImGuiDebugAllocInfo_GetTotalAllocCount(ImGuiDebugAllocInfo *self) { return self->TotalAllocCount; }
void wrap_ImGuiDebugAllocInfo_SetTotalFreeCount(ImGuiDebugAllocInfo *ImGuiDebugAllocInfoPtr, int v) { ImGuiDebugAllocInfoPtr->TotalFreeCount = v; }
int wrap_ImGuiDebugAllocInfo_GetTotalFreeCount(ImGuiDebugAllocInfo *self) { return self->TotalFreeCount; }
void wrap_ImGuiDebugAllocInfo_SetLastEntriesIdx(ImGuiDebugAllocInfo *ImGuiDebugAllocInfoPtr, ImS16 v) { ImGuiDebugAllocInfoPtr->LastEntriesIdx = v; }
ImS16 wrap_ImGuiDebugAllocInfo_GetLastEntriesIdx(ImGuiDebugAllocInfo *self) { return self->LastEntriesIdx; }
void wrap_ImGuiDebugAllocInfo_SetLastEntriesBuf(ImGuiDebugAllocInfo *ImGuiDebugAllocInfoPtr, ImGuiDebugAllocEntry* v) { memcpy(ImGuiDebugAllocInfoPtr->LastEntriesBuf, v, sizeof(ImGuiDebugAllocEntry)*6); }
ImGuiDebugAllocEntry* wrap_ImGuiDebugAllocInfo_GetLastEntriesBuf(ImGuiDebugAllocInfo *self) { return self->LastEntriesBuf; }
ImGuiDebugAllocEntry cimgui_ImGuiDebugAllocEntry_GetAtIdx(ImGuiDebugAllocEntry *self, int index) { return self[index]; }
void wrap_ImGuiDockContext_SetNodes(ImGuiDockContext *ImGuiDockContextPtr, ImGuiStorage v) { ImGuiDockContextPtr->Nodes = v; }
ImGuiStorage wrap_ImGuiDockContext_GetNodes(ImGuiDockContext *self) { return self->Nodes; }
void wrap_ImGuiDockContext_SetRequests(ImGuiDockContext *ImGuiDockContextPtr, ImVector_ImGuiDockRequest v) { ImGuiDockContextPtr->Requests = v; }
ImVector_ImGuiDockRequest wrap_ImGuiDockContext_GetRequests(ImGuiDockContext *self) { return self->Requests; }
void wrap_ImGuiDockContext_SetNodesSettings(ImGuiDockContext *ImGuiDockContextPtr, ImVector_ImGuiDockNodeSettings v) { ImGuiDockContextPtr->NodesSettings = v; }
ImVector_ImGuiDockNodeSettings wrap_ImGuiDockContext_GetNodesSettings(ImGuiDockContext *self) { return self->NodesSettings; }
void wrap_ImGuiDockContext_SetWantFullRebuild(ImGuiDockContext *ImGuiDockContextPtr, bool v) { ImGuiDockContextPtr->WantFullRebuild = v; }
bool wrap_ImGuiDockContext_GetWantFullRebuild(ImGuiDockContext *self) { return self->WantFullRebuild; }
void wrap_ImGuiDockNode_SetID(ImGuiDockNode *ImGuiDockNodePtr, ImGuiID v) { ImGuiDockNodePtr->ID = v; }
ImGuiID wrap_ImGuiDockNode_GetID(ImGuiDockNode *self) { return self->ID; }
void wrap_ImGuiDockNode_SetSharedFlags(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNodeFlags v) { ImGuiDockNodePtr->SharedFlags = v; }
ImGuiDockNodeFlags wrap_ImGuiDockNode_GetSharedFlags(ImGuiDockNode *self) { return self->SharedFlags; }
void wrap_ImGuiDockNode_SetLocalFlagsInWindows(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNodeFlags v) { ImGuiDockNodePtr->LocalFlagsInWindows = v; }
ImGuiDockNodeFlags wrap_ImGuiDockNode_GetLocalFlagsInWindows(ImGuiDockNode *self) { return self->LocalFlagsInWindows; }
void wrap_ImGuiDockNode_SetMergedFlags(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNodeFlags v) { ImGuiDockNodePtr->MergedFlags = v; }
ImGuiDockNodeFlags wrap_ImGuiDockNode_GetMergedFlags(ImGuiDockNode *self) { return self->MergedFlags; }
void wrap_ImGuiDockNode_SetState(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNodeState v) { ImGuiDockNodePtr->State = v; }
ImGuiDockNodeState wrap_ImGuiDockNode_GetState(ImGuiDockNode *self) { return self->State; }
void wrap_ImGuiDockNode_SetParentNode(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNode* v) { ImGuiDockNodePtr->ParentNode = v; }
ImGuiDockNode* wrap_ImGuiDockNode_GetParentNode(ImGuiDockNode *self) { return self->ParentNode; }
void wrap_ImGuiDockNode_SetChildNodes(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNode** v) { memcpy(ImGuiDockNodePtr->ChildNodes, v, sizeof(ImGuiDockNode*)*2); }
ImGuiDockNode** wrap_ImGuiDockNode_GetChildNodes(ImGuiDockNode *self) { return self->ChildNodes; }
ImGuiDockNode* cimgui_ImGuiDockNodePtr_GetAtIdx(ImGuiDockNode* *self, int index) { return self[index]; }
void wrap_ImGuiDockNode_SetWindows(ImGuiDockNode *ImGuiDockNodePtr, ImVector_ImGuiWindowPtr v) { ImGuiDockNodePtr->Windows = v; }
ImVector_ImGuiWindowPtr wrap_ImGuiDockNode_GetWindows(ImGuiDockNode *self) { return self->Windows; }
void wrap_ImGuiDockNode_SetTabBar(ImGuiDockNode *ImGuiDockNodePtr, ImGuiTabBar* v) { ImGuiDockNodePtr->TabBar = v; }
ImGuiTabBar* wrap_ImGuiDockNode_GetTabBar(ImGuiDockNode *self) { return self->TabBar; }
void wrap_ImGuiDockNode_SetPos(ImGuiDockNode *ImGuiDockNodePtr, ImVec2 v) { ImGuiDockNodePtr->Pos = v; }
ImVec2 wrap_ImGuiDockNode_GetPos(ImGuiDockNode *self) { return self->Pos; }
void wrap_ImGuiDockNode_SetSize(ImGuiDockNode *ImGuiDockNodePtr, ImVec2 v) { ImGuiDockNodePtr->Size = v; }
ImVec2 wrap_ImGuiDockNode_GetSize(ImGuiDockNode *self) { return self->Size; }
void wrap_ImGuiDockNode_SetSizeRef(ImGuiDockNode *ImGuiDockNodePtr, ImVec2 v) { ImGuiDockNodePtr->SizeRef = v; }
ImVec2 wrap_ImGuiDockNode_GetSizeRef(ImGuiDockNode *self) { return self->SizeRef; }
void wrap_ImGuiDockNode_SetSplitAxis(ImGuiDockNode *ImGuiDockNodePtr, ImGuiAxis v) { ImGuiDockNodePtr->SplitAxis = v; }
ImGuiAxis wrap_ImGuiDockNode_GetSplitAxis(ImGuiDockNode *self) { return self->SplitAxis; }
void wrap_ImGuiDockNode_SetWindowClass(ImGuiDockNode *ImGuiDockNodePtr, ImGuiWindowClass v) { ImGuiDockNodePtr->WindowClass = v; }
ImGuiWindowClass wrap_ImGuiDockNode_GetWindowClass(ImGuiDockNode *self) { return self->WindowClass; }
void wrap_ImGuiDockNode_SetLastBgColor(ImGuiDockNode *ImGuiDockNodePtr, ImU32 v) { ImGuiDockNodePtr->LastBgColor = v; }
ImU32 wrap_ImGuiDockNode_GetLastBgColor(ImGuiDockNode *self) { return self->LastBgColor; }
void wrap_ImGuiDockNode_SetHostWindow(ImGuiDockNode *ImGuiDockNodePtr, ImGuiWindow* v) { ImGuiDockNodePtr->HostWindow = v; }
ImGuiWindow* wrap_ImGuiDockNode_GetHostWindow(ImGuiDockNode *self) { return self->HostWindow; }
void wrap_ImGuiDockNode_SetVisibleWindow(ImGuiDockNode *ImGuiDockNodePtr, ImGuiWindow* v) { ImGuiDockNodePtr->VisibleWindow = v; }
ImGuiWindow* wrap_ImGuiDockNode_GetVisibleWindow(ImGuiDockNode *self) { return self->VisibleWindow; }
void wrap_ImGuiDockNode_SetCentralNode(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNode* v) { ImGuiDockNodePtr->CentralNode = v; }
ImGuiDockNode* wrap_ImGuiDockNode_GetCentralNode(ImGuiDockNode *self) { return self->CentralNode; }
void wrap_ImGuiDockNode_SetOnlyNodeWithWindows(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDockNode* v) { ImGuiDockNodePtr->OnlyNodeWithWindows = v; }
ImGuiDockNode* wrap_ImGuiDockNode_GetOnlyNodeWithWindows(ImGuiDockNode *self) { return self->OnlyNodeWithWindows; }
void wrap_ImGuiDockNode_SetCountNodeWithWindows(ImGuiDockNode *ImGuiDockNodePtr, int v) { ImGuiDockNodePtr->CountNodeWithWindows = v; }
int wrap_ImGuiDockNode_GetCountNodeWithWindows(ImGuiDockNode *self) { return self->CountNodeWithWindows; }
void wrap_ImGuiDockNode_SetLastFrameAlive(ImGuiDockNode *ImGuiDockNodePtr, int v) { ImGuiDockNodePtr->LastFrameAlive = v; }
int wrap_ImGuiDockNode_GetLastFrameAlive(ImGuiDockNode *self) { return self->LastFrameAlive; }
void wrap_ImGuiDockNode_SetLastFrameActive(ImGuiDockNode *ImGuiDockNodePtr, int v) { ImGuiDockNodePtr->LastFrameActive = v; }
int wrap_ImGuiDockNode_GetLastFrameActive(ImGuiDockNode *self) { return self->LastFrameActive; }
void wrap_ImGuiDockNode_SetLastFrameFocused(ImGuiDockNode *ImGuiDockNodePtr, int v) { ImGuiDockNodePtr->LastFrameFocused = v; }
int wrap_ImGuiDockNode_GetLastFrameFocused(ImGuiDockNode *self) { return self->LastFrameFocused; }
void wrap_ImGuiDockNode_SetLastFocusedNodeId(ImGuiDockNode *ImGuiDockNodePtr, ImGuiID v) { ImGuiDockNodePtr->LastFocusedNodeId = v; }
ImGuiID wrap_ImGuiDockNode_GetLastFocusedNodeId(ImGuiDockNode *self) { return self->LastFocusedNodeId; }
void wrap_ImGuiDockNode_SetSelectedTabId(ImGuiDockNode *ImGuiDockNodePtr, ImGuiID v) { ImGuiDockNodePtr->SelectedTabId = v; }
ImGuiID wrap_ImGuiDockNode_GetSelectedTabId(ImGuiDockNode *self) { return self->SelectedTabId; }
void wrap_ImGuiDockNode_SetWantCloseTabId(ImGuiDockNode *ImGuiDockNodePtr, ImGuiID v) { ImGuiDockNodePtr->WantCloseTabId = v; }
ImGuiID wrap_ImGuiDockNode_GetWantCloseTabId(ImGuiDockNode *self) { return self->WantCloseTabId; }
void wrap_ImGuiDockNode_SetRefViewportId(ImGuiDockNode *ImGuiDockNodePtr, ImGuiID v) { ImGuiDockNodePtr->RefViewportId = v; }
ImGuiID wrap_ImGuiDockNode_GetRefViewportId(ImGuiDockNode *self) { return self->RefViewportId; }
void wrap_ImGuiDockNode_SetAuthorityForPos(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDataAuthority v) { ImGuiDockNodePtr->AuthorityForPos = v; }
ImGuiDataAuthority wrap_ImGuiDockNode_GetAuthorityForPos(ImGuiDockNode *self) { return self->AuthorityForPos; }
void wrap_ImGuiDockNode_SetAuthorityForSize(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDataAuthority v) { ImGuiDockNodePtr->AuthorityForSize = v; }
ImGuiDataAuthority wrap_ImGuiDockNode_GetAuthorityForSize(ImGuiDockNode *self) { return self->AuthorityForSize; }
void wrap_ImGuiDockNode_SetAuthorityForViewport(ImGuiDockNode *ImGuiDockNodePtr, ImGuiDataAuthority v) { ImGuiDockNodePtr->AuthorityForViewport = v; }
ImGuiDataAuthority wrap_ImGuiDockNode_GetAuthorityForViewport(ImGuiDockNode *self) { return self->AuthorityForViewport; }
void wrap_ImGuiDockNode_SetIsVisible(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->IsVisible = v; }
bool wrap_ImGuiDockNode_GetIsVisible(ImGuiDockNode *self) { return self->IsVisible; }
void wrap_ImGuiDockNode_SetIsFocused(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->IsFocused = v; }
bool wrap_ImGuiDockNode_GetIsFocused(ImGuiDockNode *self) { return self->IsFocused; }
void wrap_ImGuiDockNode_SetIsBgDrawnThisFrame(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->IsBgDrawnThisFrame = v; }
bool wrap_ImGuiDockNode_GetIsBgDrawnThisFrame(ImGuiDockNode *self) { return self->IsBgDrawnThisFrame; }
void wrap_ImGuiDockNode_SetHasCloseButton(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->HasCloseButton = v; }
bool wrap_ImGuiDockNode_GetHasCloseButton(ImGuiDockNode *self) { return self->HasCloseButton; }
void wrap_ImGuiDockNode_SetHasWindowMenuButton(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->HasWindowMenuButton = v; }
bool wrap_ImGuiDockNode_GetHasWindowMenuButton(ImGuiDockNode *self) { return self->HasWindowMenuButton; }
void wrap_ImGuiDockNode_SetHasCentralNodeChild(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->HasCentralNodeChild = v; }
bool wrap_ImGuiDockNode_GetHasCentralNodeChild(ImGuiDockNode *self) { return self->HasCentralNodeChild; }
void wrap_ImGuiDockNode_SetWantCloseAll(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->WantCloseAll = v; }
bool wrap_ImGuiDockNode_GetWantCloseAll(ImGuiDockNode *self) { return self->WantCloseAll; }
void wrap_ImGuiDockNode_SetWantLockSizeOnce(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->WantLockSizeOnce = v; }
bool wrap_ImGuiDockNode_GetWantLockSizeOnce(ImGuiDockNode *self) { return self->WantLockSizeOnce; }
void wrap_ImGuiDockNode_SetWantMouseMove(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->WantMouseMove = v; }
bool wrap_ImGuiDockNode_GetWantMouseMove(ImGuiDockNode *self) { return self->WantMouseMove; }
void wrap_ImGuiDockNode_SetWantHiddenTabBarUpdate(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->WantHiddenTabBarUpdate = v; }
bool wrap_ImGuiDockNode_GetWantHiddenTabBarUpdate(ImGuiDockNode *self) { return self->WantHiddenTabBarUpdate; }
void wrap_ImGuiDockNode_SetWantHiddenTabBarToggle(ImGuiDockNode *ImGuiDockNodePtr, bool v) { ImGuiDockNodePtr->WantHiddenTabBarToggle = v; }
bool wrap_ImGuiDockNode_GetWantHiddenTabBarToggle(ImGuiDockNode *self) { return self->WantHiddenTabBarToggle; }
void wrap_ImGuiFocusScopeData_SetID(ImGuiFocusScopeData *ImGuiFocusScopeDataPtr, ImGuiID v) { ImGuiFocusScopeDataPtr->ID = v; }
ImGuiID wrap_ImGuiFocusScopeData_GetID(ImGuiFocusScopeData *self) { return self->ID; }
void wrap_ImGuiFocusScopeData_SetWindowID(ImGuiFocusScopeData *ImGuiFocusScopeDataPtr, ImGuiID v) { ImGuiFocusScopeDataPtr->WindowID = v; }
ImGuiID wrap_ImGuiFocusScopeData_GetWindowID(ImGuiFocusScopeData *self) { return self->WindowID; }
void wrap_ImGuiGroupData_SetWindowID(ImGuiGroupData *ImGuiGroupDataPtr, ImGuiID v) { ImGuiGroupDataPtr->WindowID = v; }
ImGuiID wrap_ImGuiGroupData_GetWindowID(ImGuiGroupData *self) { return self->WindowID; }
void wrap_ImGuiGroupData_SetBackupCursorPos(ImGuiGroupData *ImGuiGroupDataPtr, ImVec2 v) { ImGuiGroupDataPtr->BackupCursorPos = v; }
ImVec2 wrap_ImGuiGroupData_GetBackupCursorPos(ImGuiGroupData *self) { return self->BackupCursorPos; }
void wrap_ImGuiGroupData_SetBackupCursorMaxPos(ImGuiGroupData *ImGuiGroupDataPtr, ImVec2 v) { ImGuiGroupDataPtr->BackupCursorMaxPos = v; }
ImVec2 wrap_ImGuiGroupData_GetBackupCursorMaxPos(ImGuiGroupData *self) { return self->BackupCursorMaxPos; }
void wrap_ImGuiGroupData_SetBackupCursorPosPrevLine(ImGuiGroupData *ImGuiGroupDataPtr, ImVec2 v) { ImGuiGroupDataPtr->BackupCursorPosPrevLine = v; }
ImVec2 wrap_ImGuiGroupData_GetBackupCursorPosPrevLine(ImGuiGroupData *self) { return self->BackupCursorPosPrevLine; }
void wrap_ImGuiGroupData_SetBackupIndent(ImGuiGroupData *ImGuiGroupDataPtr, ImVec1 v) { ImGuiGroupDataPtr->BackupIndent = v; }
ImVec1 wrap_ImGuiGroupData_GetBackupIndent(ImGuiGroupData *self) { return self->BackupIndent; }
void wrap_ImGuiGroupData_SetBackupGroupOffset(ImGuiGroupData *ImGuiGroupDataPtr, ImVec1 v) { ImGuiGroupDataPtr->BackupGroupOffset = v; }
ImVec1 wrap_ImGuiGroupData_GetBackupGroupOffset(ImGuiGroupData *self) { return self->BackupGroupOffset; }
void wrap_ImGuiGroupData_SetBackupCurrLineSize(ImGuiGroupData *ImGuiGroupDataPtr, ImVec2 v) { ImGuiGroupDataPtr->BackupCurrLineSize = v; }
ImVec2 wrap_ImGuiGroupData_GetBackupCurrLineSize(ImGuiGroupData *self) { return self->BackupCurrLineSize; }
void wrap_ImGuiGroupData_SetBackupCurrLineTextBaseOffset(ImGuiGroupData *ImGuiGroupDataPtr, float v) { ImGuiGroupDataPtr->BackupCurrLineTextBaseOffset = v; }
float wrap_ImGuiGroupData_GetBackupCurrLineTextBaseOffset(ImGuiGroupData *self) { return self->BackupCurrLineTextBaseOffset; }
void wrap_ImGuiGroupData_SetBackupActiveIdIsAlive(ImGuiGroupData *ImGuiGroupDataPtr, ImGuiID v) { ImGuiGroupDataPtr->BackupActiveIdIsAlive = v; }
ImGuiID wrap_ImGuiGroupData_GetBackupActiveIdIsAlive(ImGuiGroupData *self) { return self->BackupActiveIdIsAlive; }
void wrap_ImGuiGroupData_SetBackupActiveIdPreviousFrameIsAlive(ImGuiGroupData *ImGuiGroupDataPtr, bool v) { ImGuiGroupDataPtr->BackupActiveIdPreviousFrameIsAlive = v; }
bool wrap_ImGuiGroupData_GetBackupActiveIdPreviousFrameIsAlive(ImGuiGroupData *self) { return self->BackupActiveIdPreviousFrameIsAlive; }
void wrap_ImGuiGroupData_SetBackupHoveredIdIsAlive(ImGuiGroupData *ImGuiGroupDataPtr, bool v) { ImGuiGroupDataPtr->BackupHoveredIdIsAlive = v; }
bool wrap_ImGuiGroupData_GetBackupHoveredIdIsAlive(ImGuiGroupData *self) { return self->BackupHoveredIdIsAlive; }
void wrap_ImGuiGroupData_SetBackupIsSameLine(ImGuiGroupData *ImGuiGroupDataPtr, bool v) { ImGuiGroupDataPtr->BackupIsSameLine = v; }
bool wrap_ImGuiGroupData_GetBackupIsSameLine(ImGuiGroupData *self) { return self->BackupIsSameLine; }
void wrap_ImGuiGroupData_SetEmitItem(ImGuiGroupData *ImGuiGroupDataPtr, bool v) { ImGuiGroupDataPtr->EmitItem = v; }
bool wrap_ImGuiGroupData_GetEmitItem(ImGuiGroupData *self) { return self->EmitItem; }
void wrap_ImGuiIDStackTool_SetLastActiveFrame(ImGuiIDStackTool *ImGuiIDStackToolPtr, int v) { ImGuiIDStackToolPtr->LastActiveFrame = v; }
int wrap_ImGuiIDStackTool_GetLastActiveFrame(ImGuiIDStackTool *self) { return self->LastActiveFrame; }
void wrap_ImGuiIDStackTool_SetStackLevel(ImGuiIDStackTool *ImGuiIDStackToolPtr, int v) { ImGuiIDStackToolPtr->StackLevel = v; }
int wrap_ImGuiIDStackTool_GetStackLevel(ImGuiIDStackTool *self) { return self->StackLevel; }
void wrap_ImGuiIDStackTool_SetQueryId(ImGuiIDStackTool *ImGuiIDStackToolPtr, ImGuiID v) { ImGuiIDStackToolPtr->QueryId = v; }
ImGuiID wrap_ImGuiIDStackTool_GetQueryId(ImGuiIDStackTool *self) { return self->QueryId; }
void wrap_ImGuiIDStackTool_SetResults(ImGuiIDStackTool *ImGuiIDStackToolPtr, ImVector_ImGuiStackLevelInfo v) { ImGuiIDStackToolPtr->Results = v; }
ImVector_ImGuiStackLevelInfo wrap_ImGuiIDStackTool_GetResults(ImGuiIDStackTool *self) { return self->Results; }
void wrap_ImGuiIDStackTool_SetCopyToClipboardOnCtrlC(ImGuiIDStackTool *ImGuiIDStackToolPtr, bool v) { ImGuiIDStackToolPtr->CopyToClipboardOnCtrlC = v; }
bool wrap_ImGuiIDStackTool_GetCopyToClipboardOnCtrlC(ImGuiIDStackTool *self) { return self->CopyToClipboardOnCtrlC; }
void wrap_ImGuiIDStackTool_SetCopyToClipboardLastTime(ImGuiIDStackTool *ImGuiIDStackToolPtr, float v) { ImGuiIDStackToolPtr->CopyToClipboardLastTime = v; }
float wrap_ImGuiIDStackTool_GetCopyToClipboardLastTime(ImGuiIDStackTool *self) { return self->CopyToClipboardLastTime; }
void wrap_ImGuiIO_SetConfigFlags(ImGuiIO *ImGuiIOPtr, ImGuiConfigFlags v) { ImGuiIOPtr->ConfigFlags = v; }
ImGuiConfigFlags wrap_ImGuiIO_GetConfigFlags(ImGuiIO *self) { return self->ConfigFlags; }
void wrap_ImGuiIO_SetBackendFlags(ImGuiIO *ImGuiIOPtr, ImGuiBackendFlags v) { ImGuiIOPtr->BackendFlags = v; }
ImGuiBackendFlags wrap_ImGuiIO_GetBackendFlags(ImGuiIO *self) { return self->BackendFlags; }
void wrap_ImGuiIO_SetDisplaySize(ImGuiIO *ImGuiIOPtr, ImVec2 v) { ImGuiIOPtr->DisplaySize = v; }
ImVec2 wrap_ImGuiIO_GetDisplaySize(ImGuiIO *self) { return self->DisplaySize; }
void wrap_ImGuiIO_SetDeltaTime(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->DeltaTime = v; }
float wrap_ImGuiIO_GetDeltaTime(ImGuiIO *self) { return self->DeltaTime; }
void wrap_ImGuiIO_SetIniSavingRate(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->IniSavingRate = v; }
float wrap_ImGuiIO_GetIniSavingRate(ImGuiIO *self) { return self->IniSavingRate; }
void wrap_ImGuiIO_SetIniFilename(ImGuiIO *ImGuiIOPtr, const char* v) { ImGuiIOPtr->IniFilename = v; }
const char* wrap_ImGuiIO_GetIniFilename(ImGuiIO *self) { return self->IniFilename; }
void wrap_ImGuiIO_SetLogFilename(ImGuiIO *ImGuiIOPtr, const char* v) { ImGuiIOPtr->LogFilename = v; }
const char* wrap_ImGuiIO_GetLogFilename(ImGuiIO *self) { return self->LogFilename; }
void wrap_ImGuiIO_SetUserData(ImGuiIO *ImGuiIOPtr, uintptr_t v) { ImGuiIOPtr->UserData = (void*)v; }
uintptr_t wrap_ImGuiIO_GetUserData(ImGuiIO *self) { return (uintptr_t)self->UserData; }
void wrap_ImGuiIO_SetFonts(ImGuiIO *ImGuiIOPtr, ImFontAtlas* v) { ImGuiIOPtr->Fonts = v; }
ImFontAtlas* wrap_ImGuiIO_GetFonts(ImGuiIO *self) { return self->Fonts; }
void wrap_ImGuiIO_SetFontGlobalScale(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->FontGlobalScale = v; }
float wrap_ImGuiIO_GetFontGlobalScale(ImGuiIO *self) { return self->FontGlobalScale; }
void wrap_ImGuiIO_SetFontAllowUserScaling(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->FontAllowUserScaling = v; }
bool wrap_ImGuiIO_GetFontAllowUserScaling(ImGuiIO *self) { return self->FontAllowUserScaling; }
void wrap_ImGuiIO_SetFontDefault(ImGuiIO *ImGuiIOPtr, ImFont* v) { ImGuiIOPtr->FontDefault = v; }
ImFont* wrap_ImGuiIO_GetFontDefault(ImGuiIO *self) { return self->FontDefault; }
void wrap_ImGuiIO_SetDisplayFramebufferScale(ImGuiIO *ImGuiIOPtr, ImVec2 v) { ImGuiIOPtr->DisplayFramebufferScale = v; }
ImVec2 wrap_ImGuiIO_GetDisplayFramebufferScale(ImGuiIO *self) { return self->DisplayFramebufferScale; }
void wrap_ImGuiIO_SetConfigDockingNoSplit(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDockingNoSplit = v; }
bool wrap_ImGuiIO_GetConfigDockingNoSplit(ImGuiIO *self) { return self->ConfigDockingNoSplit; }
void wrap_ImGuiIO_SetConfigDockingWithShift(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDockingWithShift = v; }
bool wrap_ImGuiIO_GetConfigDockingWithShift(ImGuiIO *self) { return self->ConfigDockingWithShift; }
void wrap_ImGuiIO_SetConfigDockingAlwaysTabBar(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDockingAlwaysTabBar = v; }
bool wrap_ImGuiIO_GetConfigDockingAlwaysTabBar(ImGuiIO *self) { return self->ConfigDockingAlwaysTabBar; }
void wrap_ImGuiIO_SetConfigDockingTransparentPayload(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDockingTransparentPayload = v; }
bool wrap_ImGuiIO_GetConfigDockingTransparentPayload(ImGuiIO *self) { return self->ConfigDockingTransparentPayload; }
void wrap_ImGuiIO_SetConfigViewportsNoAutoMerge(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigViewportsNoAutoMerge = v; }
bool wrap_ImGuiIO_GetConfigViewportsNoAutoMerge(ImGuiIO *self) { return self->ConfigViewportsNoAutoMerge; }
void wrap_ImGuiIO_SetConfigViewportsNoTaskBarIcon(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigViewportsNoTaskBarIcon = v; }
bool wrap_ImGuiIO_GetConfigViewportsNoTaskBarIcon(ImGuiIO *self) { return self->ConfigViewportsNoTaskBarIcon; }
void wrap_ImGuiIO_SetConfigViewportsNoDecoration(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigViewportsNoDecoration = v; }
bool wrap_ImGuiIO_GetConfigViewportsNoDecoration(ImGuiIO *self) { return self->ConfigViewportsNoDecoration; }
void wrap_ImGuiIO_SetConfigViewportsNoDefaultParent(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigViewportsNoDefaultParent = v; }
bool wrap_ImGuiIO_GetConfigViewportsNoDefaultParent(ImGuiIO *self) { return self->ConfigViewportsNoDefaultParent; }
void wrap_ImGuiIO_SetMouseDrawCursor(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->MouseDrawCursor = v; }
bool wrap_ImGuiIO_GetMouseDrawCursor(ImGuiIO *self) { return self->MouseDrawCursor; }
void wrap_ImGuiIO_SetConfigMacOSXBehaviors(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigMacOSXBehaviors = v; }
bool wrap_ImGuiIO_GetConfigMacOSXBehaviors(ImGuiIO *self) { return self->ConfigMacOSXBehaviors; }
void wrap_ImGuiIO_SetConfigInputTrickleEventQueue(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigInputTrickleEventQueue = v; }
bool wrap_ImGuiIO_GetConfigInputTrickleEventQueue(ImGuiIO *self) { return self->ConfigInputTrickleEventQueue; }
void wrap_ImGuiIO_SetConfigInputTextCursorBlink(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigInputTextCursorBlink = v; }
bool wrap_ImGuiIO_GetConfigInputTextCursorBlink(ImGuiIO *self) { return self->ConfigInputTextCursorBlink; }
void wrap_ImGuiIO_SetConfigInputTextEnterKeepActive(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigInputTextEnterKeepActive = v; }
bool wrap_ImGuiIO_GetConfigInputTextEnterKeepActive(ImGuiIO *self) { return self->ConfigInputTextEnterKeepActive; }
void wrap_ImGuiIO_SetConfigDragClickToInputText(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDragClickToInputText = v; }
bool wrap_ImGuiIO_GetConfigDragClickToInputText(ImGuiIO *self) { return self->ConfigDragClickToInputText; }
void wrap_ImGuiIO_SetConfigWindowsResizeFromEdges(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigWindowsResizeFromEdges = v; }
bool wrap_ImGuiIO_GetConfigWindowsResizeFromEdges(ImGuiIO *self) { return self->ConfigWindowsResizeFromEdges; }
void wrap_ImGuiIO_SetConfigWindowsMoveFromTitleBarOnly(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigWindowsMoveFromTitleBarOnly = v; }
bool wrap_ImGuiIO_GetConfigWindowsMoveFromTitleBarOnly(ImGuiIO *self) { return self->ConfigWindowsMoveFromTitleBarOnly; }
void wrap_ImGuiIO_SetConfigMemoryCompactTimer(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->ConfigMemoryCompactTimer = v; }
float wrap_ImGuiIO_GetConfigMemoryCompactTimer(ImGuiIO *self) { return self->ConfigMemoryCompactTimer; }
void wrap_ImGuiIO_SetMouseDoubleClickTime(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->MouseDoubleClickTime = v; }
float wrap_ImGuiIO_GetMouseDoubleClickTime(ImGuiIO *self) { return self->MouseDoubleClickTime; }
void wrap_ImGuiIO_SetMouseDoubleClickMaxDist(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->MouseDoubleClickMaxDist = v; }
float wrap_ImGuiIO_GetMouseDoubleClickMaxDist(ImGuiIO *self) { return self->MouseDoubleClickMaxDist; }
void wrap_ImGuiIO_SetMouseDragThreshold(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->MouseDragThreshold = v; }
float wrap_ImGuiIO_GetMouseDragThreshold(ImGuiIO *self) { return self->MouseDragThreshold; }
void wrap_ImGuiIO_SetKeyRepeatDelay(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->KeyRepeatDelay = v; }
float wrap_ImGuiIO_GetKeyRepeatDelay(ImGuiIO *self) { return self->KeyRepeatDelay; }
void wrap_ImGuiIO_SetKeyRepeatRate(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->KeyRepeatRate = v; }
float wrap_ImGuiIO_GetKeyRepeatRate(ImGuiIO *self) { return self->KeyRepeatRate; }
void wrap_ImGuiIO_SetConfigDebugIsDebuggerPresent(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDebugIsDebuggerPresent = v; }
bool wrap_ImGuiIO_GetConfigDebugIsDebuggerPresent(ImGuiIO *self) { return self->ConfigDebugIsDebuggerPresent; }
void wrap_ImGuiIO_SetConfigDebugBeginReturnValueOnce(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDebugBeginReturnValueOnce = v; }
bool wrap_ImGuiIO_GetConfigDebugBeginReturnValueOnce(ImGuiIO *self) { return self->ConfigDebugBeginReturnValueOnce; }
void wrap_ImGuiIO_SetConfigDebugBeginReturnValueLoop(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDebugBeginReturnValueLoop = v; }
bool wrap_ImGuiIO_GetConfigDebugBeginReturnValueLoop(ImGuiIO *self) { return self->ConfigDebugBeginReturnValueLoop; }
void wrap_ImGuiIO_SetConfigDebugIgnoreFocusLoss(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDebugIgnoreFocusLoss = v; }
bool wrap_ImGuiIO_GetConfigDebugIgnoreFocusLoss(ImGuiIO *self) { return self->ConfigDebugIgnoreFocusLoss; }
void wrap_ImGuiIO_SetConfigDebugIniSettings(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->ConfigDebugIniSettings = v; }
bool wrap_ImGuiIO_GetConfigDebugIniSettings(ImGuiIO *self) { return self->ConfigDebugIniSettings; }
void wrap_ImGuiIO_SetBackendPlatformName(ImGuiIO *ImGuiIOPtr, const char* v) { ImGuiIOPtr->BackendPlatformName = v; }
const char* wrap_ImGuiIO_GetBackendPlatformName(ImGuiIO *self) { return self->BackendPlatformName; }
void wrap_ImGuiIO_SetBackendRendererName(ImGuiIO *ImGuiIOPtr, const char* v) { ImGuiIOPtr->BackendRendererName = v; }
const char* wrap_ImGuiIO_GetBackendRendererName(ImGuiIO *self) { return self->BackendRendererName; }
void wrap_ImGuiIO_SetBackendPlatformUserData(ImGuiIO *ImGuiIOPtr, uintptr_t v) { ImGuiIOPtr->BackendPlatformUserData = (void*)v; }
uintptr_t wrap_ImGuiIO_GetBackendPlatformUserData(ImGuiIO *self) { return (uintptr_t)self->BackendPlatformUserData; }
void wrap_ImGuiIO_SetBackendRendererUserData(ImGuiIO *ImGuiIOPtr, uintptr_t v) { ImGuiIOPtr->BackendRendererUserData = (void*)v; }
uintptr_t wrap_ImGuiIO_GetBackendRendererUserData(ImGuiIO *self) { return (uintptr_t)self->BackendRendererUserData; }
void wrap_ImGuiIO_SetBackendLanguageUserData(ImGuiIO *ImGuiIOPtr, uintptr_t v) { ImGuiIOPtr->BackendLanguageUserData = (void*)v; }
uintptr_t wrap_ImGuiIO_GetBackendLanguageUserData(ImGuiIO *self) { return (uintptr_t)self->BackendLanguageUserData; }
void wrap_ImGuiIO_SetClipboardUserData(ImGuiIO *ImGuiIOPtr, uintptr_t v) { ImGuiIOPtr->ClipboardUserData = (void*)v; }
uintptr_t wrap_ImGuiIO_GetClipboardUserData(ImGuiIO *self) { return (uintptr_t)self->ClipboardUserData; }
void wrap_ImGuiIO_SetPlatformLocaleDecimalPoint(ImGuiIO *ImGuiIOPtr, ImWchar v) { ImGuiIOPtr->PlatformLocaleDecimalPoint = v; }
ImWchar wrap_ImGuiIO_GetPlatformLocaleDecimalPoint(ImGuiIO *self) { return self->PlatformLocaleDecimalPoint; }
void wrap_ImGuiIO_SetWantCaptureMouse(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantCaptureMouse = v; }
bool wrap_ImGuiIO_GetWantCaptureMouse(ImGuiIO *self) { return self->WantCaptureMouse; }
void wrap_ImGuiIO_SetWantCaptureKeyboard(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantCaptureKeyboard = v; }
bool wrap_ImGuiIO_GetWantCaptureKeyboard(ImGuiIO *self) { return self->WantCaptureKeyboard; }
void wrap_ImGuiIO_SetWantTextInput(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantTextInput = v; }
bool wrap_ImGuiIO_GetWantTextInput(ImGuiIO *self) { return self->WantTextInput; }
void wrap_ImGuiIO_SetWantSetMousePos(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantSetMousePos = v; }
bool wrap_ImGuiIO_GetWantSetMousePos(ImGuiIO *self) { return self->WantSetMousePos; }
void wrap_ImGuiIO_SetWantSaveIniSettings(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantSaveIniSettings = v; }
bool wrap_ImGuiIO_GetWantSaveIniSettings(ImGuiIO *self) { return self->WantSaveIniSettings; }
void wrap_ImGuiIO_SetNavActive(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->NavActive = v; }
bool wrap_ImGuiIO_GetNavActive(ImGuiIO *self) { return self->NavActive; }
void wrap_ImGuiIO_SetNavVisible(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->NavVisible = v; }
bool wrap_ImGuiIO_GetNavVisible(ImGuiIO *self) { return self->NavVisible; }
void wrap_ImGuiIO_SetFramerate(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->Framerate = v; }
float wrap_ImGuiIO_GetFramerate(ImGuiIO *self) { return self->Framerate; }
void wrap_ImGuiIO_SetMetricsRenderVertices(ImGuiIO *ImGuiIOPtr, int v) { ImGuiIOPtr->MetricsRenderVertices = v; }
int wrap_ImGuiIO_GetMetricsRenderVertices(ImGuiIO *self) { return self->MetricsRenderVertices; }
void wrap_ImGuiIO_SetMetricsRenderIndices(ImGuiIO *ImGuiIOPtr, int v) { ImGuiIOPtr->MetricsRenderIndices = v; }
int wrap_ImGuiIO_GetMetricsRenderIndices(ImGuiIO *self) { return self->MetricsRenderIndices; }
void wrap_ImGuiIO_SetMetricsRenderWindows(ImGuiIO *ImGuiIOPtr, int v) { ImGuiIOPtr->MetricsRenderWindows = v; }
int wrap_ImGuiIO_GetMetricsRenderWindows(ImGuiIO *self) { return self->MetricsRenderWindows; }
void wrap_ImGuiIO_SetMetricsActiveWindows(ImGuiIO *ImGuiIOPtr, int v) { ImGuiIOPtr->MetricsActiveWindows = v; }
int wrap_ImGuiIO_GetMetricsActiveWindows(ImGuiIO *self) { return self->MetricsActiveWindows; }
void wrap_ImGuiIO_SetMouseDelta(ImGuiIO *ImGuiIOPtr, ImVec2 v) { ImGuiIOPtr->MouseDelta = v; }
ImVec2 wrap_ImGuiIO_GetMouseDelta(ImGuiIO *self) { return self->MouseDelta; }
void wrap_ImGuiIO_SetCtx(ImGuiIO *ImGuiIOPtr, ImGuiContext* v) { ImGuiIOPtr->Ctx = v; }
ImGuiContext* wrap_ImGuiIO_GetCtx(ImGuiIO *self) { return self->Ctx; }
void wrap_ImGuiIO_SetMousePos(ImGuiIO *ImGuiIOPtr, ImVec2 v) { ImGuiIOPtr->MousePos = v; }
ImVec2 wrap_ImGuiIO_GetMousePos(ImGuiIO *self) { return self->MousePos; }
void wrap_ImGuiIO_SetMouseDown(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseDown, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseDown(ImGuiIO *self) { return self->MouseDown; }
bool cimgui_bool_GetAtIdx(bool *self, int index) { return self[index]; }
void wrap_ImGuiIO_SetMouseWheel(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->MouseWheel = v; }
float wrap_ImGuiIO_GetMouseWheel(ImGuiIO *self) { return self->MouseWheel; }
void wrap_ImGuiIO_SetMouseWheelH(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->MouseWheelH = v; }
float wrap_ImGuiIO_GetMouseWheelH(ImGuiIO *self) { return self->MouseWheelH; }
void wrap_ImGuiIO_SetMouseSource(ImGuiIO *ImGuiIOPtr, ImGuiMouseSource v) { ImGuiIOPtr->MouseSource = v; }
ImGuiMouseSource wrap_ImGuiIO_GetMouseSource(ImGuiIO *self) { return self->MouseSource; }
void wrap_ImGuiIO_SetMouseHoveredViewport(ImGuiIO *ImGuiIOPtr, ImGuiID v) { ImGuiIOPtr->MouseHoveredViewport = v; }
ImGuiID wrap_ImGuiIO_GetMouseHoveredViewport(ImGuiIO *self) { return self->MouseHoveredViewport; }
void wrap_ImGuiIO_SetKeyCtrl(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->KeyCtrl = v; }
bool wrap_ImGuiIO_GetKeyCtrl(ImGuiIO *self) { return self->KeyCtrl; }
void wrap_ImGuiIO_SetKeyShift(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->KeyShift = v; }
bool wrap_ImGuiIO_GetKeyShift(ImGuiIO *self) { return self->KeyShift; }
void wrap_ImGuiIO_SetKeyAlt(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->KeyAlt = v; }
bool wrap_ImGuiIO_GetKeyAlt(ImGuiIO *self) { return self->KeyAlt; }
void wrap_ImGuiIO_SetKeySuper(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->KeySuper = v; }
bool wrap_ImGuiIO_GetKeySuper(ImGuiIO *self) { return self->KeySuper; }
void wrap_ImGuiIO_SetKeyMods(ImGuiIO *ImGuiIOPtr, ImGuiKeyChord v) { ImGuiIOPtr->KeyMods = v; }
ImGuiKeyChord wrap_ImGuiIO_GetKeyMods(ImGuiIO *self) { return self->KeyMods; }
void wrap_ImGuiIO_SetKeysData(ImGuiIO *ImGuiIOPtr, ImGuiKeyData* v) { memcpy(ImGuiIOPtr->KeysData, v, sizeof(ImGuiKeyData)*154); }
ImGuiKeyData* wrap_ImGuiIO_GetKeysData(ImGuiIO *self) { return self->KeysData; }
ImGuiKeyData cimgui_ImGuiKeyData_GetAtIdx(ImGuiKeyData *self, int index) { return self[index]; }
void wrap_ImGuiIO_SetWantCaptureMouseUnlessPopupClose(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->WantCaptureMouseUnlessPopupClose = v; }
bool wrap_ImGuiIO_GetWantCaptureMouseUnlessPopupClose(ImGuiIO *self) { return self->WantCaptureMouseUnlessPopupClose; }
void wrap_ImGuiIO_SetMousePosPrev(ImGuiIO *ImGuiIOPtr, ImVec2 v) { ImGuiIOPtr->MousePosPrev = v; }
ImVec2 wrap_ImGuiIO_GetMousePosPrev(ImGuiIO *self) { return self->MousePosPrev; }
void wrap_ImGuiIO_SetMouseClickedPos(ImGuiIO *ImGuiIOPtr, ImVec2* v) { memcpy(ImGuiIOPtr->MouseClickedPos, v, sizeof(ImVec2)*5); }
ImVec2* wrap_ImGuiIO_GetMouseClickedPos(ImGuiIO *self) { return self->MouseClickedPos; }
void wrap_ImGuiIO_SetMouseClickedTime(ImGuiIO *ImGuiIOPtr, double* v) { memcpy(ImGuiIOPtr->MouseClickedTime, v, sizeof(double)*5); }
double* wrap_ImGuiIO_GetMouseClickedTime(ImGuiIO *self) { return self->MouseClickedTime; }
double cimgui_double_GetAtIdx(double *self, int index) { return self[index]; }
void wrap_ImGuiIO_SetMouseClicked(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseClicked, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseClicked(ImGuiIO *self) { return self->MouseClicked; }
void wrap_ImGuiIO_SetMouseDoubleClicked(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseDoubleClicked, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseDoubleClicked(ImGuiIO *self) { return self->MouseDoubleClicked; }
void wrap_ImGuiIO_SetMouseClickedCount(ImGuiIO *ImGuiIOPtr, ImU16* v) { memcpy(ImGuiIOPtr->MouseClickedCount, v, sizeof(ImU16)*5); }
ImU16* wrap_ImGuiIO_GetMouseClickedCount(ImGuiIO *self) { return self->MouseClickedCount; }
ImU16 cimgui_ImU16_GetAtIdx(ImU16 *self, int index) { return self[index]; }
void wrap_ImGuiIO_SetMouseClickedLastCount(ImGuiIO *ImGuiIOPtr, ImU16* v) { memcpy(ImGuiIOPtr->MouseClickedLastCount, v, sizeof(ImU16)*5); }
ImU16* wrap_ImGuiIO_GetMouseClickedLastCount(ImGuiIO *self) { return self->MouseClickedLastCount; }
void wrap_ImGuiIO_SetMouseReleased(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseReleased, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseReleased(ImGuiIO *self) { return self->MouseReleased; }
void wrap_ImGuiIO_SetMouseDownOwned(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseDownOwned, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseDownOwned(ImGuiIO *self) { return self->MouseDownOwned; }
void wrap_ImGuiIO_SetMouseDownOwnedUnlessPopupClose(ImGuiIO *ImGuiIOPtr, bool* v) { memcpy(ImGuiIOPtr->MouseDownOwnedUnlessPopupClose, v, sizeof(bool)*5); }
bool* wrap_ImGuiIO_GetMouseDownOwnedUnlessPopupClose(ImGuiIO *self) { return self->MouseDownOwnedUnlessPopupClose; }
void wrap_ImGuiIO_SetMouseWheelRequestAxisSwap(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->MouseWheelRequestAxisSwap = v; }
bool wrap_ImGuiIO_GetMouseWheelRequestAxisSwap(ImGuiIO *self) { return self->MouseWheelRequestAxisSwap; }
void wrap_ImGuiIO_SetMouseDownDuration(ImGuiIO *ImGuiIOPtr, float* v) { memcpy(ImGuiIOPtr->MouseDownDuration, v, sizeof(float)*5); }
float* wrap_ImGuiIO_GetMouseDownDuration(ImGuiIO *self) { return self->MouseDownDuration; }
void wrap_ImGuiIO_SetMouseDownDurationPrev(ImGuiIO *ImGuiIOPtr, float* v) { memcpy(ImGuiIOPtr->MouseDownDurationPrev, v, sizeof(float)*5); }
float* wrap_ImGuiIO_GetMouseDownDurationPrev(ImGuiIO *self) { return self->MouseDownDurationPrev; }
void wrap_ImGuiIO_SetMouseDragMaxDistanceAbs(ImGuiIO *ImGuiIOPtr, ImVec2* v) { memcpy(ImGuiIOPtr->MouseDragMaxDistanceAbs, v, sizeof(ImVec2)*5); }
ImVec2* wrap_ImGuiIO_GetMouseDragMaxDistanceAbs(ImGuiIO *self) { return self->MouseDragMaxDistanceAbs; }
void wrap_ImGuiIO_SetMouseDragMaxDistanceSqr(ImGuiIO *ImGuiIOPtr, float* v) { memcpy(ImGuiIOPtr->MouseDragMaxDistanceSqr, v, sizeof(float)*5); }
float* wrap_ImGuiIO_GetMouseDragMaxDistanceSqr(ImGuiIO *self) { return self->MouseDragMaxDistanceSqr; }
void wrap_ImGuiIO_SetPenPressure(ImGuiIO *ImGuiIOPtr, float v) { ImGuiIOPtr->PenPressure = v; }
float wrap_ImGuiIO_GetPenPressure(ImGuiIO *self) { return self->PenPressure; }
void wrap_ImGuiIO_SetAppFocusLost(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->AppFocusLost = v; }
bool wrap_ImGuiIO_GetAppFocusLost(ImGuiIO *self) { return self->AppFocusLost; }
void wrap_ImGuiIO_SetBackendUsingLegacyKeyArrays(ImGuiIO *ImGuiIOPtr, ImS8 v) { ImGuiIOPtr->BackendUsingLegacyKeyArrays = v; }
ImS8 wrap_ImGuiIO_GetBackendUsingLegacyKeyArrays(ImGuiIO *self) { return self->BackendUsingLegacyKeyArrays; }
void wrap_ImGuiIO_SetBackendUsingLegacyNavInputArray(ImGuiIO *ImGuiIOPtr, bool v) { ImGuiIOPtr->BackendUsingLegacyNavInputArray = v; }
bool wrap_ImGuiIO_GetBackendUsingLegacyNavInputArray(ImGuiIO *self) { return self->BackendUsingLegacyNavInputArray; }
void wrap_ImGuiIO_SetInputQueueSurrogate(ImGuiIO *ImGuiIOPtr, ImWchar16 v) { ImGuiIOPtr->InputQueueSurrogate = v; }
ImWchar16 wrap_ImGuiIO_GetInputQueueSurrogate(ImGuiIO *self) { return self->InputQueueSurrogate; }
void wrap_ImGuiIO_SetInputQueueCharacters(ImGuiIO *ImGuiIOPtr, ImVector_ImWchar v) { ImGuiIOPtr->InputQueueCharacters = v; }
ImVector_ImWchar wrap_ImGuiIO_GetInputQueueCharacters(ImGuiIO *self) { return self->InputQueueCharacters; }
void wrap_ImGuiInputEvent_SetType(ImGuiInputEvent *ImGuiInputEventPtr, ImGuiInputEventType v) { ImGuiInputEventPtr->Type = v; }
ImGuiInputEventType wrap_ImGuiInputEvent_GetType(ImGuiInputEvent *self) { return self->Type; }
void wrap_ImGuiInputEvent_SetSource(ImGuiInputEvent *ImGuiInputEventPtr, ImGuiInputSource v) { ImGuiInputEventPtr->Source = v; }
ImGuiInputSource wrap_ImGuiInputEvent_GetSource(ImGuiInputEvent *self) { return self->Source; }
void wrap_ImGuiInputEvent_SetEventId(ImGuiInputEvent *ImGuiInputEventPtr, ImU32 v) { ImGuiInputEventPtr->EventId = v; }
ImU32 wrap_ImGuiInputEvent_GetEventId(ImGuiInputEvent *self) { return self->EventId; }
void wrap_ImGuiInputEvent_SetAddedByTestEngine(ImGuiInputEvent *ImGuiInputEventPtr, bool v) { ImGuiInputEventPtr->AddedByTestEngine = v; }
bool wrap_ImGuiInputEvent_GetAddedByTestEngine(ImGuiInputEvent *self) { return self->AddedByTestEngine; }
void wrap_ImGuiInputEventAppFocused_SetFocused(ImGuiInputEventAppFocused *ImGuiInputEventAppFocusedPtr, bool v) { ImGuiInputEventAppFocusedPtr->Focused = v; }
bool wrap_ImGuiInputEventAppFocused_GetFocused(ImGuiInputEventAppFocused *self) { return self->Focused; }
void wrap_ImGuiInputEventKey_SetKey(ImGuiInputEventKey *ImGuiInputEventKeyPtr, ImGuiKey v) { ImGuiInputEventKeyPtr->Key = v; }
ImGuiKey wrap_ImGuiInputEventKey_GetKey(ImGuiInputEventKey *self) { return self->Key; }
void wrap_ImGuiInputEventKey_SetDown(ImGuiInputEventKey *ImGuiInputEventKeyPtr, bool v) { ImGuiInputEventKeyPtr->Down = v; }
bool wrap_ImGuiInputEventKey_GetDown(ImGuiInputEventKey *self) { return self->Down; }
void wrap_ImGuiInputEventKey_SetAnalogValue(ImGuiInputEventKey *ImGuiInputEventKeyPtr, float v) { ImGuiInputEventKeyPtr->AnalogValue = v; }
float wrap_ImGuiInputEventKey_GetAnalogValue(ImGuiInputEventKey *self) { return self->AnalogValue; }
void wrap_ImGuiInputEventMouseButton_SetButton(ImGuiInputEventMouseButton *ImGuiInputEventMouseButtonPtr, int v) { ImGuiInputEventMouseButtonPtr->Button = v; }
int wrap_ImGuiInputEventMouseButton_GetButton(ImGuiInputEventMouseButton *self) { return self->Button; }
void wrap_ImGuiInputEventMouseButton_SetDown(ImGuiInputEventMouseButton *ImGuiInputEventMouseButtonPtr, bool v) { ImGuiInputEventMouseButtonPtr->Down = v; }
bool wrap_ImGuiInputEventMouseButton_GetDown(ImGuiInputEventMouseButton *self) { return self->Down; }
void wrap_ImGuiInputEventMouseButton_SetMouseSource(ImGuiInputEventMouseButton *ImGuiInputEventMouseButtonPtr, ImGuiMouseSource v) { ImGuiInputEventMouseButtonPtr->MouseSource = v; }
ImGuiMouseSource wrap_ImGuiInputEventMouseButton_GetMouseSource(ImGuiInputEventMouseButton *self) { return self->MouseSource; }
void wrap_ImGuiInputEventMousePos_SetPosX(ImGuiInputEventMousePos *ImGuiInputEventMousePosPtr, float v) { ImGuiInputEventMousePosPtr->PosX = v; }
float wrap_ImGuiInputEventMousePos_GetPosX(ImGuiInputEventMousePos *self) { return self->PosX; }
void wrap_ImGuiInputEventMousePos_SetPosY(ImGuiInputEventMousePos *ImGuiInputEventMousePosPtr, float v) { ImGuiInputEventMousePosPtr->PosY = v; }
float wrap_ImGuiInputEventMousePos_GetPosY(ImGuiInputEventMousePos *self) { return self->PosY; }
void wrap_ImGuiInputEventMousePos_SetMouseSource(ImGuiInputEventMousePos *ImGuiInputEventMousePosPtr, ImGuiMouseSource v) { ImGuiInputEventMousePosPtr->MouseSource = v; }
ImGuiMouseSource wrap_ImGuiInputEventMousePos_GetMouseSource(ImGuiInputEventMousePos *self) { return self->MouseSource; }
void wrap_ImGuiInputEventMouseViewport_SetHoveredViewportID(ImGuiInputEventMouseViewport *ImGuiInputEventMouseViewportPtr, ImGuiID v) { ImGuiInputEventMouseViewportPtr->HoveredViewportID = v; }
ImGuiID wrap_ImGuiInputEventMouseViewport_GetHoveredViewportID(ImGuiInputEventMouseViewport *self) { return self->HoveredViewportID; }
void wrap_ImGuiInputEventMouseWheel_SetWheelX(ImGuiInputEventMouseWheel *ImGuiInputEventMouseWheelPtr, float v) { ImGuiInputEventMouseWheelPtr->WheelX = v; }
float wrap_ImGuiInputEventMouseWheel_GetWheelX(ImGuiInputEventMouseWheel *self) { return self->WheelX; }
void wrap_ImGuiInputEventMouseWheel_SetWheelY(ImGuiInputEventMouseWheel *ImGuiInputEventMouseWheelPtr, float v) { ImGuiInputEventMouseWheelPtr->WheelY = v; }
float wrap_ImGuiInputEventMouseWheel_GetWheelY(ImGuiInputEventMouseWheel *self) { return self->WheelY; }
void wrap_ImGuiInputEventMouseWheel_SetMouseSource(ImGuiInputEventMouseWheel *ImGuiInputEventMouseWheelPtr, ImGuiMouseSource v) { ImGuiInputEventMouseWheelPtr->MouseSource = v; }
ImGuiMouseSource wrap_ImGuiInputEventMouseWheel_GetMouseSource(ImGuiInputEventMouseWheel *self) { return self->MouseSource; }
void wrap_ImGuiInputEventText_SetChar(ImGuiInputEventText *ImGuiInputEventTextPtr, unsigned int v) { ImGuiInputEventTextPtr->Char = v; }
unsigned int wrap_ImGuiInputEventText_GetChar(ImGuiInputEventText *self) { return self->Char; }
void wrap_ImGuiInputTextCallbackData_SetCtx(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, ImGuiContext* v) { ImGuiInputTextCallbackDataPtr->Ctx = v; }
ImGuiContext* wrap_ImGuiInputTextCallbackData_GetCtx(ImGuiInputTextCallbackData *self) { return self->Ctx; }
void wrap_ImGuiInputTextCallbackData_SetEventFlag(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, ImGuiInputTextFlags v) { ImGuiInputTextCallbackDataPtr->EventFlag = v; }
ImGuiInputTextFlags wrap_ImGuiInputTextCallbackData_GetEventFlag(ImGuiInputTextCallbackData *self) { return self->EventFlag; }
void wrap_ImGuiInputTextCallbackData_SetFlags(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, ImGuiInputTextFlags v) { ImGuiInputTextCallbackDataPtr->Flags = v; }
ImGuiInputTextFlags wrap_ImGuiInputTextCallbackData_GetFlags(ImGuiInputTextCallbackData *self) { return self->Flags; }
void wrap_ImGuiInputTextCallbackData_SetUserData(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, uintptr_t v) { ImGuiInputTextCallbackDataPtr->UserData = (void*)v; }
uintptr_t wrap_ImGuiInputTextCallbackData_GetUserData(ImGuiInputTextCallbackData *self) { return (uintptr_t)self->UserData; }
void wrap_ImGuiInputTextCallbackData_SetEventChar(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, ImWchar v) { ImGuiInputTextCallbackDataPtr->EventChar = v; }
ImWchar wrap_ImGuiInputTextCallbackData_GetEventChar(ImGuiInputTextCallbackData *self) { return self->EventChar; }
void wrap_ImGuiInputTextCallbackData_SetEventKey(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, ImGuiKey v) { ImGuiInputTextCallbackDataPtr->EventKey = v; }
ImGuiKey wrap_ImGuiInputTextCallbackData_GetEventKey(ImGuiInputTextCallbackData *self) { return self->EventKey; }
void wrap_ImGuiInputTextCallbackData_SetBuf(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, char* v) { ImGuiInputTextCallbackDataPtr->Buf = v; }
char* wrap_ImGuiInputTextCallbackData_GetBuf(ImGuiInputTextCallbackData *self) { return self->Buf; }
void wrap_ImGuiInputTextCallbackData_SetBufTextLen(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, int v) { ImGuiInputTextCallbackDataPtr->BufTextLen = v; }
int wrap_ImGuiInputTextCallbackData_GetBufTextLen(ImGuiInputTextCallbackData *self) { return self->BufTextLen; }
void wrap_ImGuiInputTextCallbackData_SetBufSize(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, int v) { ImGuiInputTextCallbackDataPtr->BufSize = v; }
int wrap_ImGuiInputTextCallbackData_GetBufSize(ImGuiInputTextCallbackData *self) { return self->BufSize; }
void wrap_ImGuiInputTextCallbackData_SetBufDirty(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, bool v) { ImGuiInputTextCallbackDataPtr->BufDirty = v; }
bool wrap_ImGuiInputTextCallbackData_GetBufDirty(ImGuiInputTextCallbackData *self) { return self->BufDirty; }
void wrap_ImGuiInputTextCallbackData_SetCursorPos(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, int v) { ImGuiInputTextCallbackDataPtr->CursorPos = v; }
int wrap_ImGuiInputTextCallbackData_GetCursorPos(ImGuiInputTextCallbackData *self) { return self->CursorPos; }
void wrap_ImGuiInputTextCallbackData_SetSelectionStart(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, int v) { ImGuiInputTextCallbackDataPtr->SelectionStart = v; }
int wrap_ImGuiInputTextCallbackData_GetSelectionStart(ImGuiInputTextCallbackData *self) { return self->SelectionStart; }
void wrap_ImGuiInputTextCallbackData_SetSelectionEnd(ImGuiInputTextCallbackData *ImGuiInputTextCallbackDataPtr, int v) { ImGuiInputTextCallbackDataPtr->SelectionEnd = v; }
int wrap_ImGuiInputTextCallbackData_GetSelectionEnd(ImGuiInputTextCallbackData *self) { return self->SelectionEnd; }
void wrap_ImGuiInputTextDeactivatedState_SetID(ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedStatePtr, ImGuiID v) { ImGuiInputTextDeactivatedStatePtr->ID = v; }
ImGuiID wrap_ImGuiInputTextDeactivatedState_GetID(ImGuiInputTextDeactivatedState *self) { return self->ID; }
void wrap_ImGuiInputTextDeactivatedState_SetTextA(ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedStatePtr, ImVector_char v) { ImGuiInputTextDeactivatedStatePtr->TextA = v; }
ImVector_char wrap_ImGuiInputTextDeactivatedState_GetTextA(ImGuiInputTextDeactivatedState *self) { return self->TextA; }
void wrap_ImGuiInputTextState_SetCtx(ImGuiInputTextState *ImGuiInputTextStatePtr, ImGuiContext* v) { ImGuiInputTextStatePtr->Ctx = v; }
ImGuiContext* wrap_ImGuiInputTextState_GetCtx(ImGuiInputTextState *self) { return self->Ctx; }
void wrap_ImGuiInputTextState_SetID(ImGuiInputTextState *ImGuiInputTextStatePtr, ImGuiID v) { ImGuiInputTextStatePtr->ID = v; }
ImGuiID wrap_ImGuiInputTextState_GetID(ImGuiInputTextState *self) { return self->ID; }
void wrap_ImGuiInputTextState_SetCurLenW(ImGuiInputTextState *ImGuiInputTextStatePtr, int v) { ImGuiInputTextStatePtr->CurLenW = v; }
int wrap_ImGuiInputTextState_GetCurLenW(ImGuiInputTextState *self) { return self->CurLenW; }
void wrap_ImGuiInputTextState_SetCurLenA(ImGuiInputTextState *ImGuiInputTextStatePtr, int v) { ImGuiInputTextStatePtr->CurLenA = v; }
int wrap_ImGuiInputTextState_GetCurLenA(ImGuiInputTextState *self) { return self->CurLenA; }
void wrap_ImGuiInputTextState_SetTextW(ImGuiInputTextState *ImGuiInputTextStatePtr, ImVector_ImWchar v) { ImGuiInputTextStatePtr->TextW = v; }
ImVector_ImWchar wrap_ImGuiInputTextState_GetTextW(ImGuiInputTextState *self) { return self->TextW; }
void wrap_ImGuiInputTextState_SetTextA(ImGuiInputTextState *ImGuiInputTextStatePtr, ImVector_char v) { ImGuiInputTextStatePtr->TextA = v; }
ImVector_char wrap_ImGuiInputTextState_GetTextA(ImGuiInputTextState *self) { return self->TextA; }
void wrap_ImGuiInputTextState_SetInitialTextA(ImGuiInputTextState *ImGuiInputTextStatePtr, ImVector_char v) { ImGuiInputTextStatePtr->InitialTextA = v; }
ImVector_char wrap_ImGuiInputTextState_GetInitialTextA(ImGuiInputTextState *self) { return self->InitialTextA; }
void wrap_ImGuiInputTextState_SetTextAIsValid(ImGuiInputTextState *ImGuiInputTextStatePtr, bool v) { ImGuiInputTextStatePtr->TextAIsValid = v; }
bool wrap_ImGuiInputTextState_GetTextAIsValid(ImGuiInputTextState *self) { return self->TextAIsValid; }
void wrap_ImGuiInputTextState_SetBufCapacityA(ImGuiInputTextState *ImGuiInputTextStatePtr, int v) { ImGuiInputTextStatePtr->BufCapacityA = v; }
int wrap_ImGuiInputTextState_GetBufCapacityA(ImGuiInputTextState *self) { return self->BufCapacityA; }
void wrap_ImGuiInputTextState_SetScrollX(ImGuiInputTextState *ImGuiInputTextStatePtr, float v) { ImGuiInputTextStatePtr->ScrollX = v; }
float wrap_ImGuiInputTextState_GetScrollX(ImGuiInputTextState *self) { return self->ScrollX; }
void wrap_ImGuiInputTextState_SetStb(ImGuiInputTextState *ImGuiInputTextStatePtr, STB_TexteditState v) { ImGuiInputTextStatePtr->Stb = v; }
STB_TexteditState wrap_ImGuiInputTextState_GetStb(ImGuiInputTextState *self) { return self->Stb; }
void wrap_ImGuiInputTextState_SetCursorAnim(ImGuiInputTextState *ImGuiInputTextStatePtr, float v) { ImGuiInputTextStatePtr->CursorAnim = v; }
float wrap_ImGuiInputTextState_GetCursorAnim(ImGuiInputTextState *self) { return self->CursorAnim; }
void wrap_ImGuiInputTextState_SetCursorFollow(ImGuiInputTextState *ImGuiInputTextStatePtr, bool v) { ImGuiInputTextStatePtr->CursorFollow = v; }
bool wrap_ImGuiInputTextState_GetCursorFollow(ImGuiInputTextState *self) { return self->CursorFollow; }
void wrap_ImGuiInputTextState_SetSelectedAllMouseLock(ImGuiInputTextState *ImGuiInputTextStatePtr, bool v) { ImGuiInputTextStatePtr->SelectedAllMouseLock = v; }
bool wrap_ImGuiInputTextState_GetSelectedAllMouseLock(ImGuiInputTextState *self) { return self->SelectedAllMouseLock; }
void wrap_ImGuiInputTextState_SetEdited(ImGuiInputTextState *ImGuiInputTextStatePtr, bool v) { ImGuiInputTextStatePtr->Edited = v; }
bool wrap_ImGuiInputTextState_GetEdited(ImGuiInputTextState *self) { return self->Edited; }
void wrap_ImGuiInputTextState_SetFlags(ImGuiInputTextState *ImGuiInputTextStatePtr, ImGuiInputTextFlags v) { ImGuiInputTextStatePtr->Flags = v; }
ImGuiInputTextFlags wrap_ImGuiInputTextState_GetFlags(ImGuiInputTextState *self) { return self->Flags; }
void wrap_ImGuiInputTextState_SetReloadUserBuf(ImGuiInputTextState *ImGuiInputTextStatePtr, bool v) { ImGuiInputTextStatePtr->ReloadUserBuf = v; }
bool wrap_ImGuiInputTextState_GetReloadUserBuf(ImGuiInputTextState *self) { return self->ReloadUserBuf; }
void wrap_ImGuiInputTextState_SetReloadSelectionStart(ImGuiInputTextState *ImGuiInputTextStatePtr, int v) { ImGuiInputTextStatePtr->ReloadSelectionStart = v; }
int wrap_ImGuiInputTextState_GetReloadSelectionStart(ImGuiInputTextState *self) { return self->ReloadSelectionStart; }
void wrap_ImGuiInputTextState_SetReloadSelectionEnd(ImGuiInputTextState *ImGuiInputTextStatePtr, int v) { ImGuiInputTextStatePtr->ReloadSelectionEnd = v; }
int wrap_ImGuiInputTextState_GetReloadSelectionEnd(ImGuiInputTextState *self) { return self->ReloadSelectionEnd; }
void wrap_ImGuiKeyData_SetDown(ImGuiKeyData *ImGuiKeyDataPtr, bool v) { ImGuiKeyDataPtr->Down = v; }
bool wrap_ImGuiKeyData_GetDown(ImGuiKeyData *self) { return self->Down; }
void wrap_ImGuiKeyData_SetDownDuration(ImGuiKeyData *ImGuiKeyDataPtr, float v) { ImGuiKeyDataPtr->DownDuration = v; }
float wrap_ImGuiKeyData_GetDownDuration(ImGuiKeyData *self) { return self->DownDuration; }
void wrap_ImGuiKeyData_SetDownDurationPrev(ImGuiKeyData *ImGuiKeyDataPtr, float v) { ImGuiKeyDataPtr->DownDurationPrev = v; }
float wrap_ImGuiKeyData_GetDownDurationPrev(ImGuiKeyData *self) { return self->DownDurationPrev; }
void wrap_ImGuiKeyData_SetAnalogValue(ImGuiKeyData *ImGuiKeyDataPtr, float v) { ImGuiKeyDataPtr->AnalogValue = v; }
float wrap_ImGuiKeyData_GetAnalogValue(ImGuiKeyData *self) { return self->AnalogValue; }
void wrap_ImGuiKeyOwnerData_SetOwnerCurr(ImGuiKeyOwnerData *ImGuiKeyOwnerDataPtr, ImGuiID v) { ImGuiKeyOwnerDataPtr->OwnerCurr = v; }
ImGuiID wrap_ImGuiKeyOwnerData_GetOwnerCurr(ImGuiKeyOwnerData *self) { return self->OwnerCurr; }
void wrap_ImGuiKeyOwnerData_SetOwnerNext(ImGuiKeyOwnerData *ImGuiKeyOwnerDataPtr, ImGuiID v) { ImGuiKeyOwnerDataPtr->OwnerNext = v; }
ImGuiID wrap_ImGuiKeyOwnerData_GetOwnerNext(ImGuiKeyOwnerData *self) { return self->OwnerNext; }
void wrap_ImGuiKeyOwnerData_SetLockThisFrame(ImGuiKeyOwnerData *ImGuiKeyOwnerDataPtr, bool v) { ImGuiKeyOwnerDataPtr->LockThisFrame = v; }
bool wrap_ImGuiKeyOwnerData_GetLockThisFrame(ImGuiKeyOwnerData *self) { return self->LockThisFrame; }
void wrap_ImGuiKeyOwnerData_SetLockUntilRelease(ImGuiKeyOwnerData *ImGuiKeyOwnerDataPtr, bool v) { ImGuiKeyOwnerDataPtr->LockUntilRelease = v; }
bool wrap_ImGuiKeyOwnerData_GetLockUntilRelease(ImGuiKeyOwnerData *self) { return self->LockUntilRelease; }
void wrap_ImGuiKeyRoutingData_SetNextEntryIndex(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImGuiKeyRoutingIndex v) { ImGuiKeyRoutingDataPtr->NextEntryIndex = v; }
ImGuiKeyRoutingIndex wrap_ImGuiKeyRoutingData_GetNextEntryIndex(ImGuiKeyRoutingData *self) { return self->NextEntryIndex; }
void wrap_ImGuiKeyRoutingData_SetMods(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImU16 v) { ImGuiKeyRoutingDataPtr->Mods = v; }
ImU16 wrap_ImGuiKeyRoutingData_GetMods(ImGuiKeyRoutingData *self) { return self->Mods; }
void wrap_ImGuiKeyRoutingData_SetRoutingCurrScore(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImU8 v) { ImGuiKeyRoutingDataPtr->RoutingCurrScore = v; }
ImU8 wrap_ImGuiKeyRoutingData_GetRoutingCurrScore(ImGuiKeyRoutingData *self) { return self->RoutingCurrScore; }
void wrap_ImGuiKeyRoutingData_SetRoutingNextScore(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImU8 v) { ImGuiKeyRoutingDataPtr->RoutingNextScore = v; }
ImU8 wrap_ImGuiKeyRoutingData_GetRoutingNextScore(ImGuiKeyRoutingData *self) { return self->RoutingNextScore; }
void wrap_ImGuiKeyRoutingData_SetRoutingCurr(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImGuiID v) { ImGuiKeyRoutingDataPtr->RoutingCurr = v; }
ImGuiID wrap_ImGuiKeyRoutingData_GetRoutingCurr(ImGuiKeyRoutingData *self) { return self->RoutingCurr; }
void wrap_ImGuiKeyRoutingData_SetRoutingNext(ImGuiKeyRoutingData *ImGuiKeyRoutingDataPtr, ImGuiID v) { ImGuiKeyRoutingDataPtr->RoutingNext = v; }
ImGuiID wrap_ImGuiKeyRoutingData_GetRoutingNext(ImGuiKeyRoutingData *self) { return self->RoutingNext; }
void wrap_ImGuiKeyRoutingTable_SetIndex(ImGuiKeyRoutingTable *ImGuiKeyRoutingTablePtr, ImGuiKeyRoutingIndex* v) { memcpy(ImGuiKeyRoutingTablePtr->Index, v, sizeof(ImGuiKeyRoutingIndex)*154); }
ImGuiKeyRoutingIndex* wrap_ImGuiKeyRoutingTable_GetIndex(ImGuiKeyRoutingTable *self) { return self->Index; }
ImGuiKeyRoutingIndex cimgui_ImGuiKeyRoutingIndex_GetAtIdx(ImGuiKeyRoutingIndex *self, int index) { return self[index]; }
void wrap_ImGuiKeyRoutingTable_SetEntries(ImGuiKeyRoutingTable *ImGuiKeyRoutingTablePtr, ImVector_ImGuiKeyRoutingData v) { ImGuiKeyRoutingTablePtr->Entries = v; }
ImVector_ImGuiKeyRoutingData wrap_ImGuiKeyRoutingTable_GetEntries(ImGuiKeyRoutingTable *self) { return self->Entries; }
void wrap_ImGuiKeyRoutingTable_SetEntriesNext(ImGuiKeyRoutingTable *ImGuiKeyRoutingTablePtr, ImVector_ImGuiKeyRoutingData v) { ImGuiKeyRoutingTablePtr->EntriesNext = v; }
ImVector_ImGuiKeyRoutingData wrap_ImGuiKeyRoutingTable_GetEntriesNext(ImGuiKeyRoutingTable *self) { return self->EntriesNext; }
void wrap_ImGuiLastItemData_SetID(ImGuiLastItemData *ImGuiLastItemDataPtr, ImGuiID v) { ImGuiLastItemDataPtr->ID = v; }
ImGuiID wrap_ImGuiLastItemData_GetID(ImGuiLastItemData *self) { return self->ID; }
void wrap_ImGuiLastItemData_SetInFlags(ImGuiLastItemData *ImGuiLastItemDataPtr, ImGuiItemFlags v) { ImGuiLastItemDataPtr->InFlags = v; }
ImGuiItemFlags wrap_ImGuiLastItemData_GetInFlags(ImGuiLastItemData *self) { return self->InFlags; }
void wrap_ImGuiLastItemData_SetStatusFlags(ImGuiLastItemData *ImGuiLastItemDataPtr, ImGuiItemStatusFlags v) { ImGuiLastItemDataPtr->StatusFlags = v; }
ImGuiItemStatusFlags wrap_ImGuiLastItemData_GetStatusFlags(ImGuiLastItemData *self) { return self->StatusFlags; }
void wrap_ImGuiLastItemData_SetRect(ImGuiLastItemData *ImGuiLastItemDataPtr, ImRect v) { ImGuiLastItemDataPtr->Rect = v; }
ImRect wrap_ImGuiLastItemData_GetRect(ImGuiLastItemData *self) { return self->Rect; }
void wrap_ImGuiLastItemData_SetNavRect(ImGuiLastItemData *ImGuiLastItemDataPtr, ImRect v) { ImGuiLastItemDataPtr->NavRect = v; }
ImRect wrap_ImGuiLastItemData_GetNavRect(ImGuiLastItemData *self) { return self->NavRect; }
void wrap_ImGuiLastItemData_SetDisplayRect(ImGuiLastItemData *ImGuiLastItemDataPtr, ImRect v) { ImGuiLastItemDataPtr->DisplayRect = v; }
ImRect wrap_ImGuiLastItemData_GetDisplayRect(ImGuiLastItemData *self) { return self->DisplayRect; }
void wrap_ImGuiLastItemData_SetClipRect(ImGuiLastItemData *ImGuiLastItemDataPtr, ImRect v) { ImGuiLastItemDataPtr->ClipRect = v; }
ImRect wrap_ImGuiLastItemData_GetClipRect(ImGuiLastItemData *self) { return self->ClipRect; }
void wrap_ImGuiListClipper_SetCtx(ImGuiListClipper *ImGuiListClipperPtr, ImGuiContext* v) { ImGuiListClipperPtr->Ctx = v; }
ImGuiContext* wrap_ImGuiListClipper_GetCtx(ImGuiListClipper *self) { return self->Ctx; }
void wrap_ImGuiListClipper_SetDisplayStart(ImGuiListClipper *ImGuiListClipperPtr, int v) { ImGuiListClipperPtr->DisplayStart = v; }
int wrap_ImGuiListClipper_GetDisplayStart(ImGuiListClipper *self) { return self->DisplayStart; }
void wrap_ImGuiListClipper_SetDisplayEnd(ImGuiListClipper *ImGuiListClipperPtr, int v) { ImGuiListClipperPtr->DisplayEnd = v; }
int wrap_ImGuiListClipper_GetDisplayEnd(ImGuiListClipper *self) { return self->DisplayEnd; }
void wrap_ImGuiListClipper_SetItemsCount(ImGuiListClipper *ImGuiListClipperPtr, int v) { ImGuiListClipperPtr->ItemsCount = v; }
int wrap_ImGuiListClipper_GetItemsCount(ImGuiListClipper *self) { return self->ItemsCount; }
void wrap_ImGuiListClipper_SetItemsHeight(ImGuiListClipper *ImGuiListClipperPtr, float v) { ImGuiListClipperPtr->ItemsHeight = v; }
float wrap_ImGuiListClipper_GetItemsHeight(ImGuiListClipper *self) { return self->ItemsHeight; }
void wrap_ImGuiListClipper_SetStartPosY(ImGuiListClipper *ImGuiListClipperPtr, float v) { ImGuiListClipperPtr->StartPosY = v; }
float wrap_ImGuiListClipper_GetStartPosY(ImGuiListClipper *self) { return self->StartPosY; }
void wrap_ImGuiListClipper_SetTempData(ImGuiListClipper *ImGuiListClipperPtr, uintptr_t v) { ImGuiListClipperPtr->TempData = (void*)v; }
uintptr_t wrap_ImGuiListClipper_GetTempData(ImGuiListClipper *self) { return (uintptr_t)self->TempData; }
void wrap_ImGuiListClipperData_SetListClipper(ImGuiListClipperData *ImGuiListClipperDataPtr, ImGuiListClipper* v) { ImGuiListClipperDataPtr->ListClipper = v; }
ImGuiListClipper* wrap_ImGuiListClipperData_GetListClipper(ImGuiListClipperData *self) { return self->ListClipper; }
void wrap_ImGuiListClipperData_SetLossynessOffset(ImGuiListClipperData *ImGuiListClipperDataPtr, float v) { ImGuiListClipperDataPtr->LossynessOffset = v; }
float wrap_ImGuiListClipperData_GetLossynessOffset(ImGuiListClipperData *self) { return self->LossynessOffset; }
void wrap_ImGuiListClipperData_SetStepNo(ImGuiListClipperData *ImGuiListClipperDataPtr, int v) { ImGuiListClipperDataPtr->StepNo = v; }
int wrap_ImGuiListClipperData_GetStepNo(ImGuiListClipperData *self) { return self->StepNo; }
void wrap_ImGuiListClipperData_SetItemsFrozen(ImGuiListClipperData *ImGuiListClipperDataPtr, int v) { ImGuiListClipperDataPtr->ItemsFrozen = v; }
int wrap_ImGuiListClipperData_GetItemsFrozen(ImGuiListClipperData *self) { return self->ItemsFrozen; }
void wrap_ImGuiListClipperData_SetRanges(ImGuiListClipperData *ImGuiListClipperDataPtr, ImVector_ImGuiListClipperRange v) { ImGuiListClipperDataPtr->Ranges = v; }
ImVector_ImGuiListClipperRange wrap_ImGuiListClipperData_GetRanges(ImGuiListClipperData *self) { return self->Ranges; }
void wrap_ImGuiListClipperRange_SetMin(ImGuiListClipperRange *ImGuiListClipperRangePtr, int v) { ImGuiListClipperRangePtr->Min = v; }
int wrap_ImGuiListClipperRange_GetMin(ImGuiListClipperRange *self) { return self->Min; }
void wrap_ImGuiListClipperRange_SetMax(ImGuiListClipperRange *ImGuiListClipperRangePtr, int v) { ImGuiListClipperRangePtr->Max = v; }
int wrap_ImGuiListClipperRange_GetMax(ImGuiListClipperRange *self) { return self->Max; }
void wrap_ImGuiListClipperRange_SetPosToIndexConvert(ImGuiListClipperRange *ImGuiListClipperRangePtr, bool v) { ImGuiListClipperRangePtr->PosToIndexConvert = v; }
bool wrap_ImGuiListClipperRange_GetPosToIndexConvert(ImGuiListClipperRange *self) { return self->PosToIndexConvert; }
void wrap_ImGuiListClipperRange_SetPosToIndexOffsetMin(ImGuiListClipperRange *ImGuiListClipperRangePtr, ImS8 v) { ImGuiListClipperRangePtr->PosToIndexOffsetMin = v; }
ImS8 wrap_ImGuiListClipperRange_GetPosToIndexOffsetMin(ImGuiListClipperRange *self) { return self->PosToIndexOffsetMin; }
void wrap_ImGuiListClipperRange_SetPosToIndexOffsetMax(ImGuiListClipperRange *ImGuiListClipperRangePtr, ImS8 v) { ImGuiListClipperRangePtr->PosToIndexOffsetMax = v; }
ImS8 wrap_ImGuiListClipperRange_GetPosToIndexOffsetMax(ImGuiListClipperRange *self) { return self->PosToIndexOffsetMax; }
void wrap_ImGuiLocEntry_SetKey(ImGuiLocEntry *ImGuiLocEntryPtr, ImGuiLocKey v) { ImGuiLocEntryPtr->Key = v; }
ImGuiLocKey wrap_ImGuiLocEntry_GetKey(ImGuiLocEntry *self) { return self->Key; }
void wrap_ImGuiLocEntry_SetText(ImGuiLocEntry *ImGuiLocEntryPtr, const char* v) { ImGuiLocEntryPtr->Text = v; }
const char* wrap_ImGuiLocEntry_GetText(ImGuiLocEntry *self) { return self->Text; }
void wrap_ImGuiMenuColumns_SetTotalWidth(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU32 v) { ImGuiMenuColumnsPtr->TotalWidth = v; }
ImU32 wrap_ImGuiMenuColumns_GetTotalWidth(ImGuiMenuColumns *self) { return self->TotalWidth; }
void wrap_ImGuiMenuColumns_SetNextTotalWidth(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU32 v) { ImGuiMenuColumnsPtr->NextTotalWidth = v; }
ImU32 wrap_ImGuiMenuColumns_GetNextTotalWidth(ImGuiMenuColumns *self) { return self->NextTotalWidth; }
void wrap_ImGuiMenuColumns_SetSpacing(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16 v) { ImGuiMenuColumnsPtr->Spacing = v; }
ImU16 wrap_ImGuiMenuColumns_GetSpacing(ImGuiMenuColumns *self) { return self->Spacing; }
void wrap_ImGuiMenuColumns_SetOffsetIcon(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16 v) { ImGuiMenuColumnsPtr->OffsetIcon = v; }
ImU16 wrap_ImGuiMenuColumns_GetOffsetIcon(ImGuiMenuColumns *self) { return self->OffsetIcon; }
void wrap_ImGuiMenuColumns_SetOffsetLabel(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16 v) { ImGuiMenuColumnsPtr->OffsetLabel = v; }
ImU16 wrap_ImGuiMenuColumns_GetOffsetLabel(ImGuiMenuColumns *self) { return self->OffsetLabel; }
void wrap_ImGuiMenuColumns_SetOffsetShortcut(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16 v) { ImGuiMenuColumnsPtr->OffsetShortcut = v; }
ImU16 wrap_ImGuiMenuColumns_GetOffsetShortcut(ImGuiMenuColumns *self) { return self->OffsetShortcut; }
void wrap_ImGuiMenuColumns_SetOffsetMark(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16 v) { ImGuiMenuColumnsPtr->OffsetMark = v; }
ImU16 wrap_ImGuiMenuColumns_GetOffsetMark(ImGuiMenuColumns *self) { return self->OffsetMark; }
void wrap_ImGuiMenuColumns_SetWidths(ImGuiMenuColumns *ImGuiMenuColumnsPtr, ImU16* v) { memcpy(ImGuiMenuColumnsPtr->Widths, v, sizeof(ImU16)*4); }
ImU16* wrap_ImGuiMenuColumns_GetWidths(ImGuiMenuColumns *self) { return self->Widths; }
void wrap_ImGuiMetricsConfig_SetShowDebugLog(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowDebugLog = v; }
bool wrap_ImGuiMetricsConfig_GetShowDebugLog(ImGuiMetricsConfig *self) { return self->ShowDebugLog; }
void wrap_ImGuiMetricsConfig_SetShowIDStackTool(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowIDStackTool = v; }
bool wrap_ImGuiMetricsConfig_GetShowIDStackTool(ImGuiMetricsConfig *self) { return self->ShowIDStackTool; }
void wrap_ImGuiMetricsConfig_SetShowWindowsRects(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowWindowsRects = v; }
bool wrap_ImGuiMetricsConfig_GetShowWindowsRects(ImGuiMetricsConfig *self) { return self->ShowWindowsRects; }
void wrap_ImGuiMetricsConfig_SetShowWindowsBeginOrder(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowWindowsBeginOrder = v; }
bool wrap_ImGuiMetricsConfig_GetShowWindowsBeginOrder(ImGuiMetricsConfig *self) { return self->ShowWindowsBeginOrder; }
void wrap_ImGuiMetricsConfig_SetShowTablesRects(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowTablesRects = v; }
bool wrap_ImGuiMetricsConfig_GetShowTablesRects(ImGuiMetricsConfig *self) { return self->ShowTablesRects; }
void wrap_ImGuiMetricsConfig_SetShowDrawCmdMesh(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowDrawCmdMesh = v; }
bool wrap_ImGuiMetricsConfig_GetShowDrawCmdMesh(ImGuiMetricsConfig *self) { return self->ShowDrawCmdMesh; }
void wrap_ImGuiMetricsConfig_SetShowDrawCmdBoundingBoxes(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowDrawCmdBoundingBoxes = v; }
bool wrap_ImGuiMetricsConfig_GetShowDrawCmdBoundingBoxes(ImGuiMetricsConfig *self) { return self->ShowDrawCmdBoundingBoxes; }
void wrap_ImGuiMetricsConfig_SetShowTextEncodingViewer(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowTextEncodingViewer = v; }
bool wrap_ImGuiMetricsConfig_GetShowTextEncodingViewer(ImGuiMetricsConfig *self) { return self->ShowTextEncodingViewer; }
void wrap_ImGuiMetricsConfig_SetShowAtlasTintedWithTextColor(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowAtlasTintedWithTextColor = v; }
bool wrap_ImGuiMetricsConfig_GetShowAtlasTintedWithTextColor(ImGuiMetricsConfig *self) { return self->ShowAtlasTintedWithTextColor; }
void wrap_ImGuiMetricsConfig_SetShowDockingNodes(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, bool v) { ImGuiMetricsConfigPtr->ShowDockingNodes = v; }
bool wrap_ImGuiMetricsConfig_GetShowDockingNodes(ImGuiMetricsConfig *self) { return self->ShowDockingNodes; }
void wrap_ImGuiMetricsConfig_SetShowWindowsRectsType(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, int v) { ImGuiMetricsConfigPtr->ShowWindowsRectsType = v; }
int wrap_ImGuiMetricsConfig_GetShowWindowsRectsType(ImGuiMetricsConfig *self) { return self->ShowWindowsRectsType; }
void wrap_ImGuiMetricsConfig_SetShowTablesRectsType(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, int v) { ImGuiMetricsConfigPtr->ShowTablesRectsType = v; }
int wrap_ImGuiMetricsConfig_GetShowTablesRectsType(ImGuiMetricsConfig *self) { return self->ShowTablesRectsType; }
void wrap_ImGuiMetricsConfig_SetHighlightMonitorIdx(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, int v) { ImGuiMetricsConfigPtr->HighlightMonitorIdx = v; }
int wrap_ImGuiMetricsConfig_GetHighlightMonitorIdx(ImGuiMetricsConfig *self) { return self->HighlightMonitorIdx; }
void wrap_ImGuiMetricsConfig_SetHighlightViewportID(ImGuiMetricsConfig *ImGuiMetricsConfigPtr, ImGuiID v) { ImGuiMetricsConfigPtr->HighlightViewportID = v; }
ImGuiID wrap_ImGuiMetricsConfig_GetHighlightViewportID(ImGuiMetricsConfig *self) { return self->HighlightViewportID; }
void wrap_ImGuiNavItemData_SetWindow(ImGuiNavItemData *ImGuiNavItemDataPtr, ImGuiWindow* v) { ImGuiNavItemDataPtr->Window = v; }
ImGuiWindow* wrap_ImGuiNavItemData_GetWindow(ImGuiNavItemData *self) { return self->Window; }
void wrap_ImGuiNavItemData_SetID(ImGuiNavItemData *ImGuiNavItemDataPtr, ImGuiID v) { ImGuiNavItemDataPtr->ID = v; }
ImGuiID wrap_ImGuiNavItemData_GetID(ImGuiNavItemData *self) { return self->ID; }
void wrap_ImGuiNavItemData_SetFocusScopeId(ImGuiNavItemData *ImGuiNavItemDataPtr, ImGuiID v) { ImGuiNavItemDataPtr->FocusScopeId = v; }
ImGuiID wrap_ImGuiNavItemData_GetFocusScopeId(ImGuiNavItemData *self) { return self->FocusScopeId; }
void wrap_ImGuiNavItemData_SetRectRel(ImGuiNavItemData *ImGuiNavItemDataPtr, ImRect v) { ImGuiNavItemDataPtr->RectRel = v; }
ImRect wrap_ImGuiNavItemData_GetRectRel(ImGuiNavItemData *self) { return self->RectRel; }
void wrap_ImGuiNavItemData_SetInFlags(ImGuiNavItemData *ImGuiNavItemDataPtr, ImGuiItemFlags v) { ImGuiNavItemDataPtr->InFlags = v; }
ImGuiItemFlags wrap_ImGuiNavItemData_GetInFlags(ImGuiNavItemData *self) { return self->InFlags; }
void wrap_ImGuiNavItemData_SetSelectionUserData(ImGuiNavItemData *ImGuiNavItemDataPtr, ImGuiSelectionUserData v) { ImGuiNavItemDataPtr->SelectionUserData = v; }
ImGuiSelectionUserData wrap_ImGuiNavItemData_GetSelectionUserData(ImGuiNavItemData *self) { return self->SelectionUserData; }
void wrap_ImGuiNavItemData_SetDistBox(ImGuiNavItemData *ImGuiNavItemDataPtr, float v) { ImGuiNavItemDataPtr->DistBox = v; }
float wrap_ImGuiNavItemData_GetDistBox(ImGuiNavItemData *self) { return self->DistBox; }
void wrap_ImGuiNavItemData_SetDistCenter(ImGuiNavItemData *ImGuiNavItemDataPtr, float v) { ImGuiNavItemDataPtr->DistCenter = v; }
float wrap_ImGuiNavItemData_GetDistCenter(ImGuiNavItemData *self) { return self->DistCenter; }
void wrap_ImGuiNavItemData_SetDistAxial(ImGuiNavItemData *ImGuiNavItemDataPtr, float v) { ImGuiNavItemDataPtr->DistAxial = v; }
float wrap_ImGuiNavItemData_GetDistAxial(ImGuiNavItemData *self) { return self->DistAxial; }
void wrap_ImGuiNavTreeNodeData_SetID(ImGuiNavTreeNodeData *ImGuiNavTreeNodeDataPtr, ImGuiID v) { ImGuiNavTreeNodeDataPtr->ID = v; }
ImGuiID wrap_ImGuiNavTreeNodeData_GetID(ImGuiNavTreeNodeData *self) { return self->ID; }
void wrap_ImGuiNavTreeNodeData_SetInFlags(ImGuiNavTreeNodeData *ImGuiNavTreeNodeDataPtr, ImGuiItemFlags v) { ImGuiNavTreeNodeDataPtr->InFlags = v; }
ImGuiItemFlags wrap_ImGuiNavTreeNodeData_GetInFlags(ImGuiNavTreeNodeData *self) { return self->InFlags; }
void wrap_ImGuiNavTreeNodeData_SetNavRect(ImGuiNavTreeNodeData *ImGuiNavTreeNodeDataPtr, ImRect v) { ImGuiNavTreeNodeDataPtr->NavRect = v; }
ImRect wrap_ImGuiNavTreeNodeData_GetNavRect(ImGuiNavTreeNodeData *self) { return self->NavRect; }
void wrap_ImGuiNextItemData_SetFlags(ImGuiNextItemData *ImGuiNextItemDataPtr, ImGuiNextItemDataFlags v) { ImGuiNextItemDataPtr->Flags = v; }
ImGuiNextItemDataFlags wrap_ImGuiNextItemData_GetFlags(ImGuiNextItemData *self) { return self->Flags; }
void wrap_ImGuiNextItemData_SetItemFlags(ImGuiNextItemData *ImGuiNextItemDataPtr, ImGuiItemFlags v) { ImGuiNextItemDataPtr->ItemFlags = v; }
ImGuiItemFlags wrap_ImGuiNextItemData_GetItemFlags(ImGuiNextItemData *self) { return self->ItemFlags; }
void wrap_ImGuiNextItemData_SetSelectionUserData(ImGuiNextItemData *ImGuiNextItemDataPtr, ImGuiSelectionUserData v) { ImGuiNextItemDataPtr->SelectionUserData = v; }
ImGuiSelectionUserData wrap_ImGuiNextItemData_GetSelectionUserData(ImGuiNextItemData *self) { return self->SelectionUserData; }
void wrap_ImGuiNextItemData_SetWidth(ImGuiNextItemData *ImGuiNextItemDataPtr, float v) { ImGuiNextItemDataPtr->Width = v; }
float wrap_ImGuiNextItemData_GetWidth(ImGuiNextItemData *self) { return self->Width; }
void wrap_ImGuiNextItemData_SetShortcut(ImGuiNextItemData *ImGuiNextItemDataPtr, ImGuiKeyChord v) { ImGuiNextItemDataPtr->Shortcut = v; }
ImGuiKeyChord wrap_ImGuiNextItemData_GetShortcut(ImGuiNextItemData *self) { return self->Shortcut; }
void wrap_ImGuiNextItemData_SetOpenVal(ImGuiNextItemData *ImGuiNextItemDataPtr, bool v) { ImGuiNextItemDataPtr->OpenVal = v; }
bool wrap_ImGuiNextItemData_GetOpenVal(ImGuiNextItemData *self) { return self->OpenVal; }
void wrap_ImGuiNextItemData_SetOpenCond(ImGuiNextItemData *ImGuiNextItemDataPtr, ImGuiCond v) { ImGuiNextItemDataPtr->OpenCond = v; }
ImGuiCond wrap_ImGuiNextItemData_GetOpenCond(ImGuiNextItemData *self) { return self->OpenCond; }
void wrap_ImGuiNextWindowData_SetFlags(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiNextWindowDataFlags v) { ImGuiNextWindowDataPtr->Flags = v; }
ImGuiNextWindowDataFlags wrap_ImGuiNextWindowData_GetFlags(ImGuiNextWindowData *self) { return self->Flags; }
void wrap_ImGuiNextWindowData_SetPosCond(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiCond v) { ImGuiNextWindowDataPtr->PosCond = v; }
ImGuiCond wrap_ImGuiNextWindowData_GetPosCond(ImGuiNextWindowData *self) { return self->PosCond; }
void wrap_ImGuiNextWindowData_SetSizeCond(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiCond v) { ImGuiNextWindowDataPtr->SizeCond = v; }
ImGuiCond wrap_ImGuiNextWindowData_GetSizeCond(ImGuiNextWindowData *self) { return self->SizeCond; }
void wrap_ImGuiNextWindowData_SetCollapsedCond(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiCond v) { ImGuiNextWindowDataPtr->CollapsedCond = v; }
ImGuiCond wrap_ImGuiNextWindowData_GetCollapsedCond(ImGuiNextWindowData *self) { return self->CollapsedCond; }
void wrap_ImGuiNextWindowData_SetDockCond(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiCond v) { ImGuiNextWindowDataPtr->DockCond = v; }
ImGuiCond wrap_ImGuiNextWindowData_GetDockCond(ImGuiNextWindowData *self) { return self->DockCond; }
void wrap_ImGuiNextWindowData_SetPosVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->PosVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetPosVal(ImGuiNextWindowData *self) { return self->PosVal; }
void wrap_ImGuiNextWindowData_SetPosPivotVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->PosPivotVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetPosPivotVal(ImGuiNextWindowData *self) { return self->PosPivotVal; }
void wrap_ImGuiNextWindowData_SetSizeVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->SizeVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetSizeVal(ImGuiNextWindowData *self) { return self->SizeVal; }
void wrap_ImGuiNextWindowData_SetContentSizeVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->ContentSizeVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetContentSizeVal(ImGuiNextWindowData *self) { return self->ContentSizeVal; }
void wrap_ImGuiNextWindowData_SetScrollVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->ScrollVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetScrollVal(ImGuiNextWindowData *self) { return self->ScrollVal; }
void wrap_ImGuiNextWindowData_SetChildFlags(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiChildFlags v) { ImGuiNextWindowDataPtr->ChildFlags = v; }
ImGuiChildFlags wrap_ImGuiNextWindowData_GetChildFlags(ImGuiNextWindowData *self) { return self->ChildFlags; }
void wrap_ImGuiNextWindowData_SetPosUndock(ImGuiNextWindowData *ImGuiNextWindowDataPtr, bool v) { ImGuiNextWindowDataPtr->PosUndock = v; }
bool wrap_ImGuiNextWindowData_GetPosUndock(ImGuiNextWindowData *self) { return self->PosUndock; }
void wrap_ImGuiNextWindowData_SetCollapsedVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, bool v) { ImGuiNextWindowDataPtr->CollapsedVal = v; }
bool wrap_ImGuiNextWindowData_GetCollapsedVal(ImGuiNextWindowData *self) { return self->CollapsedVal; }
void wrap_ImGuiNextWindowData_SetSizeConstraintRect(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImRect v) { ImGuiNextWindowDataPtr->SizeConstraintRect = v; }
ImRect wrap_ImGuiNextWindowData_GetSizeConstraintRect(ImGuiNextWindowData *self) { return self->SizeConstraintRect; }
void wrap_ImGuiNextWindowData_SetSizeCallback(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiSizeCallback v) { ImGuiNextWindowDataPtr->SizeCallback = v; }
ImGuiSizeCallback wrap_ImGuiNextWindowData_GetSizeCallback(ImGuiNextWindowData *self) { return self->SizeCallback; }
void wrap_ImGuiNextWindowData_SetSizeCallbackUserData(ImGuiNextWindowData *ImGuiNextWindowDataPtr, uintptr_t v) { ImGuiNextWindowDataPtr->SizeCallbackUserData = (void*)v; }
uintptr_t wrap_ImGuiNextWindowData_GetSizeCallbackUserData(ImGuiNextWindowData *self) { return (uintptr_t)self->SizeCallbackUserData; }
void wrap_ImGuiNextWindowData_SetBgAlphaVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, float v) { ImGuiNextWindowDataPtr->BgAlphaVal = v; }
float wrap_ImGuiNextWindowData_GetBgAlphaVal(ImGuiNextWindowData *self) { return self->BgAlphaVal; }
void wrap_ImGuiNextWindowData_SetViewportId(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiID v) { ImGuiNextWindowDataPtr->ViewportId = v; }
ImGuiID wrap_ImGuiNextWindowData_GetViewportId(ImGuiNextWindowData *self) { return self->ViewportId; }
void wrap_ImGuiNextWindowData_SetDockId(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiID v) { ImGuiNextWindowDataPtr->DockId = v; }
ImGuiID wrap_ImGuiNextWindowData_GetDockId(ImGuiNextWindowData *self) { return self->DockId; }
void wrap_ImGuiNextWindowData_SetWindowClass(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImGuiWindowClass v) { ImGuiNextWindowDataPtr->WindowClass = v; }
ImGuiWindowClass wrap_ImGuiNextWindowData_GetWindowClass(ImGuiNextWindowData *self) { return self->WindowClass; }
void wrap_ImGuiNextWindowData_SetMenuBarOffsetMinVal(ImGuiNextWindowData *ImGuiNextWindowDataPtr, ImVec2 v) { ImGuiNextWindowDataPtr->MenuBarOffsetMinVal = v; }
ImVec2 wrap_ImGuiNextWindowData_GetMenuBarOffsetMinVal(ImGuiNextWindowData *self) { return self->MenuBarOffsetMinVal; }
void wrap_ImGuiOldColumnData_SetOffsetNorm(ImGuiOldColumnData *ImGuiOldColumnDataPtr, float v) { ImGuiOldColumnDataPtr->OffsetNorm = v; }
float wrap_ImGuiOldColumnData_GetOffsetNorm(ImGuiOldColumnData *self) { return self->OffsetNorm; }
void wrap_ImGuiOldColumnData_SetOffsetNormBeforeResize(ImGuiOldColumnData *ImGuiOldColumnDataPtr, float v) { ImGuiOldColumnDataPtr->OffsetNormBeforeResize = v; }
float wrap_ImGuiOldColumnData_GetOffsetNormBeforeResize(ImGuiOldColumnData *self) { return self->OffsetNormBeforeResize; }
void wrap_ImGuiOldColumnData_SetFlags(ImGuiOldColumnData *ImGuiOldColumnDataPtr, ImGuiOldColumnFlags v) { ImGuiOldColumnDataPtr->Flags = v; }
ImGuiOldColumnFlags wrap_ImGuiOldColumnData_GetFlags(ImGuiOldColumnData *self) { return self->Flags; }
void wrap_ImGuiOldColumnData_SetClipRect(ImGuiOldColumnData *ImGuiOldColumnDataPtr, ImRect v) { ImGuiOldColumnDataPtr->ClipRect = v; }
ImRect wrap_ImGuiOldColumnData_GetClipRect(ImGuiOldColumnData *self) { return self->ClipRect; }
void wrap_ImGuiOldColumns_SetID(ImGuiOldColumns *ImGuiOldColumnsPtr, ImGuiID v) { ImGuiOldColumnsPtr->ID = v; }
ImGuiID wrap_ImGuiOldColumns_GetID(ImGuiOldColumns *self) { return self->ID; }
void wrap_ImGuiOldColumns_SetFlags(ImGuiOldColumns *ImGuiOldColumnsPtr, ImGuiOldColumnFlags v) { ImGuiOldColumnsPtr->Flags = v; }
ImGuiOldColumnFlags wrap_ImGuiOldColumns_GetFlags(ImGuiOldColumns *self) { return self->Flags; }
void wrap_ImGuiOldColumns_SetIsFirstFrame(ImGuiOldColumns *ImGuiOldColumnsPtr, bool v) { ImGuiOldColumnsPtr->IsFirstFrame = v; }
bool wrap_ImGuiOldColumns_GetIsFirstFrame(ImGuiOldColumns *self) { return self->IsFirstFrame; }
void wrap_ImGuiOldColumns_SetIsBeingResized(ImGuiOldColumns *ImGuiOldColumnsPtr, bool v) { ImGuiOldColumnsPtr->IsBeingResized = v; }
bool wrap_ImGuiOldColumns_GetIsBeingResized(ImGuiOldColumns *self) { return self->IsBeingResized; }
void wrap_ImGuiOldColumns_SetCurrent(ImGuiOldColumns *ImGuiOldColumnsPtr, int v) { ImGuiOldColumnsPtr->Current = v; }
int wrap_ImGuiOldColumns_GetCurrent(ImGuiOldColumns *self) { return self->Current; }
void wrap_ImGuiOldColumns_SetCount(ImGuiOldColumns *ImGuiOldColumnsPtr, int v) { ImGuiOldColumnsPtr->Count = v; }
int wrap_ImGuiOldColumns_GetCount(ImGuiOldColumns *self) { return self->Count; }
void wrap_ImGuiOldColumns_SetOffMinX(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->OffMinX = v; }
float wrap_ImGuiOldColumns_GetOffMinX(ImGuiOldColumns *self) { return self->OffMinX; }
void wrap_ImGuiOldColumns_SetOffMaxX(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->OffMaxX = v; }
float wrap_ImGuiOldColumns_GetOffMaxX(ImGuiOldColumns *self) { return self->OffMaxX; }
void wrap_ImGuiOldColumns_SetLineMinY(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->LineMinY = v; }
float wrap_ImGuiOldColumns_GetLineMinY(ImGuiOldColumns *self) { return self->LineMinY; }
void wrap_ImGuiOldColumns_SetLineMaxY(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->LineMaxY = v; }
float wrap_ImGuiOldColumns_GetLineMaxY(ImGuiOldColumns *self) { return self->LineMaxY; }
void wrap_ImGuiOldColumns_SetHostCursorPosY(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->HostCursorPosY = v; }
float wrap_ImGuiOldColumns_GetHostCursorPosY(ImGuiOldColumns *self) { return self->HostCursorPosY; }
void wrap_ImGuiOldColumns_SetHostCursorMaxPosX(ImGuiOldColumns *ImGuiOldColumnsPtr, float v) { ImGuiOldColumnsPtr->HostCursorMaxPosX = v; }
float wrap_ImGuiOldColumns_GetHostCursorMaxPosX(ImGuiOldColumns *self) { return self->HostCursorMaxPosX; }
void wrap_ImGuiOldColumns_SetHostInitialClipRect(ImGuiOldColumns *ImGuiOldColumnsPtr, ImRect v) { ImGuiOldColumnsPtr->HostInitialClipRect = v; }
ImRect wrap_ImGuiOldColumns_GetHostInitialClipRect(ImGuiOldColumns *self) { return self->HostInitialClipRect; }
void wrap_ImGuiOldColumns_SetHostBackupClipRect(ImGuiOldColumns *ImGuiOldColumnsPtr, ImRect v) { ImGuiOldColumnsPtr->HostBackupClipRect = v; }
ImRect wrap_ImGuiOldColumns_GetHostBackupClipRect(ImGuiOldColumns *self) { return self->HostBackupClipRect; }
void wrap_ImGuiOldColumns_SetHostBackupParentWorkRect(ImGuiOldColumns *ImGuiOldColumnsPtr, ImRect v) { ImGuiOldColumnsPtr->HostBackupParentWorkRect = v; }
ImRect wrap_ImGuiOldColumns_GetHostBackupParentWorkRect(ImGuiOldColumns *self) { return self->HostBackupParentWorkRect; }
void wrap_ImGuiOldColumns_SetColumns(ImGuiOldColumns *ImGuiOldColumnsPtr, ImVector_ImGuiOldColumnData v) { ImGuiOldColumnsPtr->Columns = v; }
ImVector_ImGuiOldColumnData wrap_ImGuiOldColumns_GetColumns(ImGuiOldColumns *self) { return self->Columns; }
void wrap_ImGuiOldColumns_SetSplitter(ImGuiOldColumns *ImGuiOldColumnsPtr, ImDrawListSplitter v) { ImGuiOldColumnsPtr->Splitter = v; }
ImDrawListSplitter wrap_ImGuiOldColumns_GetSplitter(ImGuiOldColumns *self) { return self->Splitter; }
void wrap_ImGuiOnceUponAFrame_SetRefFrame(ImGuiOnceUponAFrame *ImGuiOnceUponAFramePtr, int v) { ImGuiOnceUponAFramePtr->RefFrame = v; }
int wrap_ImGuiOnceUponAFrame_GetRefFrame(ImGuiOnceUponAFrame *self) { return self->RefFrame; }
void wrap_ImGuiPayload_SetData(ImGuiPayload *ImGuiPayloadPtr, uintptr_t v) { ImGuiPayloadPtr->Data = (void*)v; }
uintptr_t wrap_ImGuiPayload_GetData(ImGuiPayload *self) { return (uintptr_t)self->Data; }
void wrap_ImGuiPayload_SetDataSize(ImGuiPayload *ImGuiPayloadPtr, int v) { ImGuiPayloadPtr->DataSize = v; }
int wrap_ImGuiPayload_GetDataSize(ImGuiPayload *self) { return self->DataSize; }
void wrap_ImGuiPayload_SetSourceId(ImGuiPayload *ImGuiPayloadPtr, ImGuiID v) { ImGuiPayloadPtr->SourceId = v; }
ImGuiID wrap_ImGuiPayload_GetSourceId(ImGuiPayload *self) { return self->SourceId; }
void wrap_ImGuiPayload_SetSourceParentId(ImGuiPayload *ImGuiPayloadPtr, ImGuiID v) { ImGuiPayloadPtr->SourceParentId = v; }
ImGuiID wrap_ImGuiPayload_GetSourceParentId(ImGuiPayload *self) { return self->SourceParentId; }
void wrap_ImGuiPayload_SetDataFrameCount(ImGuiPayload *ImGuiPayloadPtr, int v) { ImGuiPayloadPtr->DataFrameCount = v; }
int wrap_ImGuiPayload_GetDataFrameCount(ImGuiPayload *self) { return self->DataFrameCount; }
void wrap_ImGuiPayload_SetDataType(ImGuiPayload *ImGuiPayloadPtr, char* v) { memcpy(ImGuiPayloadPtr->DataType, v, sizeof(char)*33); }
char* wrap_ImGuiPayload_GetDataType(ImGuiPayload *self) { return self->DataType; }
void wrap_ImGuiPayload_SetPreview(ImGuiPayload *ImGuiPayloadPtr, bool v) { ImGuiPayloadPtr->Preview = v; }
bool wrap_ImGuiPayload_GetPreview(ImGuiPayload *self) { return self->Preview; }
void wrap_ImGuiPayload_SetDelivery(ImGuiPayload *ImGuiPayloadPtr, bool v) { ImGuiPayloadPtr->Delivery = v; }
bool wrap_ImGuiPayload_GetDelivery(ImGuiPayload *self) { return self->Delivery; }
void wrap_ImGuiPlatformIO_SetMonitors(ImGuiPlatformIO *ImGuiPlatformIOPtr, ImVector_ImGuiPlatformMonitor v) { ImGuiPlatformIOPtr->Monitors = v; }
ImVector_ImGuiPlatformMonitor wrap_ImGuiPlatformIO_GetMonitors(ImGuiPlatformIO *self) { return self->Monitors; }
void wrap_ImGuiPlatformIO_SetViewports(ImGuiPlatformIO *ImGuiPlatformIOPtr, ImVector_ImGuiViewportPtr v) { ImGuiPlatformIOPtr->Viewports = v; }
ImVector_ImGuiViewportPtr wrap_ImGuiPlatformIO_GetViewports(ImGuiPlatformIO *self) { return self->Viewports; }
void wrap_ImGuiPlatformImeData_SetWantVisible(ImGuiPlatformImeData *ImGuiPlatformImeDataPtr, bool v) { ImGuiPlatformImeDataPtr->WantVisible = v; }
bool wrap_ImGuiPlatformImeData_GetWantVisible(ImGuiPlatformImeData *self) { return self->WantVisible; }
void wrap_ImGuiPlatformImeData_SetInputPos(ImGuiPlatformImeData *ImGuiPlatformImeDataPtr, ImVec2 v) { ImGuiPlatformImeDataPtr->InputPos = v; }
ImVec2 wrap_ImGuiPlatformImeData_GetInputPos(ImGuiPlatformImeData *self) { return self->InputPos; }
void wrap_ImGuiPlatformImeData_SetInputLineHeight(ImGuiPlatformImeData *ImGuiPlatformImeDataPtr, float v) { ImGuiPlatformImeDataPtr->InputLineHeight = v; }
float wrap_ImGuiPlatformImeData_GetInputLineHeight(ImGuiPlatformImeData *self) { return self->InputLineHeight; }
void wrap_ImGuiPlatformMonitor_SetMainPos(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, ImVec2 v) { ImGuiPlatformMonitorPtr->MainPos = v; }
ImVec2 wrap_ImGuiPlatformMonitor_GetMainPos(ImGuiPlatformMonitor *self) { return self->MainPos; }
void wrap_ImGuiPlatformMonitor_SetMainSize(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, ImVec2 v) { ImGuiPlatformMonitorPtr->MainSize = v; }
ImVec2 wrap_ImGuiPlatformMonitor_GetMainSize(ImGuiPlatformMonitor *self) { return self->MainSize; }
void wrap_ImGuiPlatformMonitor_SetWorkPos(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, ImVec2 v) { ImGuiPlatformMonitorPtr->WorkPos = v; }
ImVec2 wrap_ImGuiPlatformMonitor_GetWorkPos(ImGuiPlatformMonitor *self) { return self->WorkPos; }
void wrap_ImGuiPlatformMonitor_SetWorkSize(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, ImVec2 v) { ImGuiPlatformMonitorPtr->WorkSize = v; }
ImVec2 wrap_ImGuiPlatformMonitor_GetWorkSize(ImGuiPlatformMonitor *self) { return self->WorkSize; }
void wrap_ImGuiPlatformMonitor_SetDpiScale(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, float v) { ImGuiPlatformMonitorPtr->DpiScale = v; }
float wrap_ImGuiPlatformMonitor_GetDpiScale(ImGuiPlatformMonitor *self) { return self->DpiScale; }
void wrap_ImGuiPlatformMonitor_SetPlatformHandle(ImGuiPlatformMonitor *ImGuiPlatformMonitorPtr, uintptr_t v) { ImGuiPlatformMonitorPtr->PlatformHandle = (void*)v; }
uintptr_t wrap_ImGuiPlatformMonitor_GetPlatformHandle(ImGuiPlatformMonitor *self) { return (uintptr_t)self->PlatformHandle; }
void wrap_ImGuiPopupData_SetPopupId(ImGuiPopupData *ImGuiPopupDataPtr, ImGuiID v) { ImGuiPopupDataPtr->PopupId = v; }
ImGuiID wrap_ImGuiPopupData_GetPopupId(ImGuiPopupData *self) { return self->PopupId; }
void wrap_ImGuiPopupData_SetWindow(ImGuiPopupData *ImGuiPopupDataPtr, ImGuiWindow* v) { ImGuiPopupDataPtr->Window = v; }
ImGuiWindow* wrap_ImGuiPopupData_GetWindow(ImGuiPopupData *self) { return self->Window; }
void wrap_ImGuiPopupData_SetBackupNavWindow(ImGuiPopupData *ImGuiPopupDataPtr, ImGuiWindow* v) { ImGuiPopupDataPtr->BackupNavWindow = v; }
ImGuiWindow* wrap_ImGuiPopupData_GetBackupNavWindow(ImGuiPopupData *self) { return self->BackupNavWindow; }
void wrap_ImGuiPopupData_SetParentNavLayer(ImGuiPopupData *ImGuiPopupDataPtr, int v) { ImGuiPopupDataPtr->ParentNavLayer = v; }
int wrap_ImGuiPopupData_GetParentNavLayer(ImGuiPopupData *self) { return self->ParentNavLayer; }
void wrap_ImGuiPopupData_SetOpenFrameCount(ImGuiPopupData *ImGuiPopupDataPtr, int v) { ImGuiPopupDataPtr->OpenFrameCount = v; }
int wrap_ImGuiPopupData_GetOpenFrameCount(ImGuiPopupData *self) { return self->OpenFrameCount; }
void wrap_ImGuiPopupData_SetOpenParentId(ImGuiPopupData *ImGuiPopupDataPtr, ImGuiID v) { ImGuiPopupDataPtr->OpenParentId = v; }
ImGuiID wrap_ImGuiPopupData_GetOpenParentId(ImGuiPopupData *self) { return self->OpenParentId; }
void wrap_ImGuiPopupData_SetOpenPopupPos(ImGuiPopupData *ImGuiPopupDataPtr, ImVec2 v) { ImGuiPopupDataPtr->OpenPopupPos = v; }
ImVec2 wrap_ImGuiPopupData_GetOpenPopupPos(ImGuiPopupData *self) { return self->OpenPopupPos; }
void wrap_ImGuiPopupData_SetOpenMousePos(ImGuiPopupData *ImGuiPopupDataPtr, ImVec2 v) { ImGuiPopupDataPtr->OpenMousePos = v; }
ImVec2 wrap_ImGuiPopupData_GetOpenMousePos(ImGuiPopupData *self) { return self->OpenMousePos; }
void wrap_ImGuiPtrOrIndex_SetPtr(ImGuiPtrOrIndex *ImGuiPtrOrIndexPtr, uintptr_t v) { ImGuiPtrOrIndexPtr->Ptr = (void*)v; }
uintptr_t wrap_ImGuiPtrOrIndex_GetPtr(ImGuiPtrOrIndex *self) { return (uintptr_t)self->Ptr; }
void wrap_ImGuiPtrOrIndex_SetIndex(ImGuiPtrOrIndex *ImGuiPtrOrIndexPtr, int v) { ImGuiPtrOrIndexPtr->Index = v; }
int wrap_ImGuiPtrOrIndex_GetIndex(ImGuiPtrOrIndex *self) { return self->Index; }
void wrap_ImGuiSettingsHandler_SetTypeName(ImGuiSettingsHandler *ImGuiSettingsHandlerPtr, const char* v) { ImGuiSettingsHandlerPtr->TypeName = v; }
const char* wrap_ImGuiSettingsHandler_GetTypeName(ImGuiSettingsHandler *self) { return self->TypeName; }
void wrap_ImGuiSettingsHandler_SetTypeHash(ImGuiSettingsHandler *ImGuiSettingsHandlerPtr, ImGuiID v) { ImGuiSettingsHandlerPtr->TypeHash = v; }
ImGuiID wrap_ImGuiSettingsHandler_GetTypeHash(ImGuiSettingsHandler *self) { return self->TypeHash; }
void wrap_ImGuiSettingsHandler_SetUserData(ImGuiSettingsHandler *ImGuiSettingsHandlerPtr, uintptr_t v) { ImGuiSettingsHandlerPtr->UserData = (void*)v; }
uintptr_t wrap_ImGuiSettingsHandler_GetUserData(ImGuiSettingsHandler *self) { return (uintptr_t)self->UserData; }
void wrap_ImGuiShrinkWidthItem_SetIndex(ImGuiShrinkWidthItem *ImGuiShrinkWidthItemPtr, int v) { ImGuiShrinkWidthItemPtr->Index = v; }
int wrap_ImGuiShrinkWidthItem_GetIndex(ImGuiShrinkWidthItem *self) { return self->Index; }
void wrap_ImGuiShrinkWidthItem_SetWidth(ImGuiShrinkWidthItem *ImGuiShrinkWidthItemPtr, float v) { ImGuiShrinkWidthItemPtr->Width = v; }
float wrap_ImGuiShrinkWidthItem_GetWidth(ImGuiShrinkWidthItem *self) { return self->Width; }
void wrap_ImGuiShrinkWidthItem_SetInitialWidth(ImGuiShrinkWidthItem *ImGuiShrinkWidthItemPtr, float v) { ImGuiShrinkWidthItemPtr->InitialWidth = v; }
float wrap_ImGuiShrinkWidthItem_GetInitialWidth(ImGuiShrinkWidthItem *self) { return self->InitialWidth; }
void wrap_ImGuiSizeCallbackData_SetUserData(ImGuiSizeCallbackData *ImGuiSizeCallbackDataPtr, uintptr_t v) { ImGuiSizeCallbackDataPtr->UserData = (void*)v; }
uintptr_t wrap_ImGuiSizeCallbackData_GetUserData(ImGuiSizeCallbackData *self) { return (uintptr_t)self->UserData; }
void wrap_ImGuiSizeCallbackData_SetPos(ImGuiSizeCallbackData *ImGuiSizeCallbackDataPtr, ImVec2 v) { ImGuiSizeCallbackDataPtr->Pos = v; }
ImVec2 wrap_ImGuiSizeCallbackData_GetPos(ImGuiSizeCallbackData *self) { return self->Pos; }
void wrap_ImGuiSizeCallbackData_SetCurrentSize(ImGuiSizeCallbackData *ImGuiSizeCallbackDataPtr, ImVec2 v) { ImGuiSizeCallbackDataPtr->CurrentSize = v; }
ImVec2 wrap_ImGuiSizeCallbackData_GetCurrentSize(ImGuiSizeCallbackData *self) { return self->CurrentSize; }
void wrap_ImGuiSizeCallbackData_SetDesiredSize(ImGuiSizeCallbackData *ImGuiSizeCallbackDataPtr, ImVec2 v) { ImGuiSizeCallbackDataPtr->DesiredSize = v; }
ImVec2 wrap_ImGuiSizeCallbackData_GetDesiredSize(ImGuiSizeCallbackData *self) { return self->DesiredSize; }
void wrap_ImGuiStackLevelInfo_SetID(ImGuiStackLevelInfo *ImGuiStackLevelInfoPtr, ImGuiID v) { ImGuiStackLevelInfoPtr->ID = v; }
ImGuiID wrap_ImGuiStackLevelInfo_GetID(ImGuiStackLevelInfo *self) { return self->ID; }
void wrap_ImGuiStackLevelInfo_SetQueryFrameCount(ImGuiStackLevelInfo *ImGuiStackLevelInfoPtr, ImS8 v) { ImGuiStackLevelInfoPtr->QueryFrameCount = v; }
ImS8 wrap_ImGuiStackLevelInfo_GetQueryFrameCount(ImGuiStackLevelInfo *self) { return self->QueryFrameCount; }
void wrap_ImGuiStackLevelInfo_SetQuerySuccess(ImGuiStackLevelInfo *ImGuiStackLevelInfoPtr, bool v) { ImGuiStackLevelInfoPtr->QuerySuccess = v; }
bool wrap_ImGuiStackLevelInfo_GetQuerySuccess(ImGuiStackLevelInfo *self) { return self->QuerySuccess; }
void wrap_ImGuiStackLevelInfo_SetDataType(ImGuiStackLevelInfo *ImGuiStackLevelInfoPtr, ImGuiDataType v) { ImGuiStackLevelInfoPtr->DataType = v; }
ImGuiDataType wrap_ImGuiStackLevelInfo_GetDataType(ImGuiStackLevelInfo *self) { return self->DataType; }
void wrap_ImGuiStackLevelInfo_SetDesc(ImGuiStackLevelInfo *ImGuiStackLevelInfoPtr, char* v) { memcpy(ImGuiStackLevelInfoPtr->Desc, v, sizeof(char)*57); }
char* wrap_ImGuiStackLevelInfo_GetDesc(ImGuiStackLevelInfo *self) { return self->Desc; }
void wrap_ImGuiStackSizes_SetSizeOfIDStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfIDStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfIDStack(ImGuiStackSizes *self) { return self->SizeOfIDStack; }
void wrap_ImGuiStackSizes_SetSizeOfColorStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfColorStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfColorStack(ImGuiStackSizes *self) { return self->SizeOfColorStack; }
void wrap_ImGuiStackSizes_SetSizeOfStyleVarStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfStyleVarStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfStyleVarStack(ImGuiStackSizes *self) { return self->SizeOfStyleVarStack; }
void wrap_ImGuiStackSizes_SetSizeOfFontStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfFontStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfFontStack(ImGuiStackSizes *self) { return self->SizeOfFontStack; }
void wrap_ImGuiStackSizes_SetSizeOfFocusScopeStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfFocusScopeStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfFocusScopeStack(ImGuiStackSizes *self) { return self->SizeOfFocusScopeStack; }
void wrap_ImGuiStackSizes_SetSizeOfGroupStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfGroupStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfGroupStack(ImGuiStackSizes *self) { return self->SizeOfGroupStack; }
void wrap_ImGuiStackSizes_SetSizeOfItemFlagsStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfItemFlagsStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfItemFlagsStack(ImGuiStackSizes *self) { return self->SizeOfItemFlagsStack; }
void wrap_ImGuiStackSizes_SetSizeOfBeginPopupStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfBeginPopupStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfBeginPopupStack(ImGuiStackSizes *self) { return self->SizeOfBeginPopupStack; }
void wrap_ImGuiStackSizes_SetSizeOfDisabledStack(ImGuiStackSizes *ImGuiStackSizesPtr, short v) { ImGuiStackSizesPtr->SizeOfDisabledStack = v; }
short wrap_ImGuiStackSizes_GetSizeOfDisabledStack(ImGuiStackSizes *self) { return self->SizeOfDisabledStack; }
void wrap_ImGuiStorage_SetData(ImGuiStorage *ImGuiStoragePtr, ImVector_ImGuiStoragePair v) { ImGuiStoragePtr->Data = v; }
ImVector_ImGuiStoragePair wrap_ImGuiStorage_GetData(ImGuiStorage *self) { return self->Data; }
void wrap_ImGuiStoragePair_SetKey(ImGuiStoragePair *ImGuiStoragePairPtr, ImGuiID v) { ImGuiStoragePairPtr->key = v; }
ImGuiID wrap_ImGuiStoragePair_GetKey(ImGuiStoragePair *self) { return self->key; }
void wrap_ImGuiStyle_SetAlpha(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->Alpha = v; }
float wrap_ImGuiStyle_GetAlpha(ImGuiStyle *self) { return self->Alpha; }
void wrap_ImGuiStyle_SetDisabledAlpha(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->DisabledAlpha = v; }
float wrap_ImGuiStyle_GetDisabledAlpha(ImGuiStyle *self) { return self->DisabledAlpha; }
void wrap_ImGuiStyle_SetWindowPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->WindowPadding = v; }
ImVec2 wrap_ImGuiStyle_GetWindowPadding(ImGuiStyle *self) { return self->WindowPadding; }
void wrap_ImGuiStyle_SetWindowRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->WindowRounding = v; }
float wrap_ImGuiStyle_GetWindowRounding(ImGuiStyle *self) { return self->WindowRounding; }
void wrap_ImGuiStyle_SetWindowBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->WindowBorderSize = v; }
float wrap_ImGuiStyle_GetWindowBorderSize(ImGuiStyle *self) { return self->WindowBorderSize; }
void wrap_ImGuiStyle_SetWindowMinSize(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->WindowMinSize = v; }
ImVec2 wrap_ImGuiStyle_GetWindowMinSize(ImGuiStyle *self) { return self->WindowMinSize; }
void wrap_ImGuiStyle_SetWindowTitleAlign(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->WindowTitleAlign = v; }
ImVec2 wrap_ImGuiStyle_GetWindowTitleAlign(ImGuiStyle *self) { return self->WindowTitleAlign; }
void wrap_ImGuiStyle_SetWindowMenuButtonPosition(ImGuiStyle *ImGuiStylePtr, ImGuiDir v) { ImGuiStylePtr->WindowMenuButtonPosition = v; }
ImGuiDir wrap_ImGuiStyle_GetWindowMenuButtonPosition(ImGuiStyle *self) { return self->WindowMenuButtonPosition; }
void wrap_ImGuiStyle_SetChildRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->ChildRounding = v; }
float wrap_ImGuiStyle_GetChildRounding(ImGuiStyle *self) { return self->ChildRounding; }
void wrap_ImGuiStyle_SetChildBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->ChildBorderSize = v; }
float wrap_ImGuiStyle_GetChildBorderSize(ImGuiStyle *self) { return self->ChildBorderSize; }
void wrap_ImGuiStyle_SetPopupRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->PopupRounding = v; }
float wrap_ImGuiStyle_GetPopupRounding(ImGuiStyle *self) { return self->PopupRounding; }
void wrap_ImGuiStyle_SetPopupBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->PopupBorderSize = v; }
float wrap_ImGuiStyle_GetPopupBorderSize(ImGuiStyle *self) { return self->PopupBorderSize; }
void wrap_ImGuiStyle_SetFramePadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->FramePadding = v; }
ImVec2 wrap_ImGuiStyle_GetFramePadding(ImGuiStyle *self) { return self->FramePadding; }
void wrap_ImGuiStyle_SetFrameRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->FrameRounding = v; }
float wrap_ImGuiStyle_GetFrameRounding(ImGuiStyle *self) { return self->FrameRounding; }
void wrap_ImGuiStyle_SetFrameBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->FrameBorderSize = v; }
float wrap_ImGuiStyle_GetFrameBorderSize(ImGuiStyle *self) { return self->FrameBorderSize; }
void wrap_ImGuiStyle_SetItemSpacing(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->ItemSpacing = v; }
ImVec2 wrap_ImGuiStyle_GetItemSpacing(ImGuiStyle *self) { return self->ItemSpacing; }
void wrap_ImGuiStyle_SetItemInnerSpacing(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->ItemInnerSpacing = v; }
ImVec2 wrap_ImGuiStyle_GetItemInnerSpacing(ImGuiStyle *self) { return self->ItemInnerSpacing; }
void wrap_ImGuiStyle_SetCellPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->CellPadding = v; }
ImVec2 wrap_ImGuiStyle_GetCellPadding(ImGuiStyle *self) { return self->CellPadding; }
void wrap_ImGuiStyle_SetTouchExtraPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->TouchExtraPadding = v; }
ImVec2 wrap_ImGuiStyle_GetTouchExtraPadding(ImGuiStyle *self) { return self->TouchExtraPadding; }
void wrap_ImGuiStyle_SetIndentSpacing(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->IndentSpacing = v; }
float wrap_ImGuiStyle_GetIndentSpacing(ImGuiStyle *self) { return self->IndentSpacing; }
void wrap_ImGuiStyle_SetColumnsMinSpacing(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->ColumnsMinSpacing = v; }
float wrap_ImGuiStyle_GetColumnsMinSpacing(ImGuiStyle *self) { return self->ColumnsMinSpacing; }
void wrap_ImGuiStyle_SetScrollbarSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->ScrollbarSize = v; }
float wrap_ImGuiStyle_GetScrollbarSize(ImGuiStyle *self) { return self->ScrollbarSize; }
void wrap_ImGuiStyle_SetScrollbarRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->ScrollbarRounding = v; }
float wrap_ImGuiStyle_GetScrollbarRounding(ImGuiStyle *self) { return self->ScrollbarRounding; }
void wrap_ImGuiStyle_SetGrabMinSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->GrabMinSize = v; }
float wrap_ImGuiStyle_GetGrabMinSize(ImGuiStyle *self) { return self->GrabMinSize; }
void wrap_ImGuiStyle_SetGrabRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->GrabRounding = v; }
float wrap_ImGuiStyle_GetGrabRounding(ImGuiStyle *self) { return self->GrabRounding; }
void wrap_ImGuiStyle_SetLogSliderDeadzone(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->LogSliderDeadzone = v; }
float wrap_ImGuiStyle_GetLogSliderDeadzone(ImGuiStyle *self) { return self->LogSliderDeadzone; }
void wrap_ImGuiStyle_SetTabRounding(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->TabRounding = v; }
float wrap_ImGuiStyle_GetTabRounding(ImGuiStyle *self) { return self->TabRounding; }
void wrap_ImGuiStyle_SetTabBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->TabBorderSize = v; }
float wrap_ImGuiStyle_GetTabBorderSize(ImGuiStyle *self) { return self->TabBorderSize; }
void wrap_ImGuiStyle_SetTabMinWidthForCloseButton(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->TabMinWidthForCloseButton = v; }
float wrap_ImGuiStyle_GetTabMinWidthForCloseButton(ImGuiStyle *self) { return self->TabMinWidthForCloseButton; }
void wrap_ImGuiStyle_SetTabBarBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->TabBarBorderSize = v; }
float wrap_ImGuiStyle_GetTabBarBorderSize(ImGuiStyle *self) { return self->TabBarBorderSize; }
void wrap_ImGuiStyle_SetTableAngledHeadersAngle(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->TableAngledHeadersAngle = v; }
float wrap_ImGuiStyle_GetTableAngledHeadersAngle(ImGuiStyle *self) { return self->TableAngledHeadersAngle; }
void wrap_ImGuiStyle_SetColorButtonPosition(ImGuiStyle *ImGuiStylePtr, ImGuiDir v) { ImGuiStylePtr->ColorButtonPosition = v; }
ImGuiDir wrap_ImGuiStyle_GetColorButtonPosition(ImGuiStyle *self) { return self->ColorButtonPosition; }
void wrap_ImGuiStyle_SetButtonTextAlign(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->ButtonTextAlign = v; }
ImVec2 wrap_ImGuiStyle_GetButtonTextAlign(ImGuiStyle *self) { return self->ButtonTextAlign; }
void wrap_ImGuiStyle_SetSelectableTextAlign(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->SelectableTextAlign = v; }
ImVec2 wrap_ImGuiStyle_GetSelectableTextAlign(ImGuiStyle *self) { return self->SelectableTextAlign; }
void wrap_ImGuiStyle_SetSeparatorTextBorderSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->SeparatorTextBorderSize = v; }
float wrap_ImGuiStyle_GetSeparatorTextBorderSize(ImGuiStyle *self) { return self->SeparatorTextBorderSize; }
void wrap_ImGuiStyle_SetSeparatorTextAlign(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->SeparatorTextAlign = v; }
ImVec2 wrap_ImGuiStyle_GetSeparatorTextAlign(ImGuiStyle *self) { return self->SeparatorTextAlign; }
void wrap_ImGuiStyle_SetSeparatorTextPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->SeparatorTextPadding = v; }
ImVec2 wrap_ImGuiStyle_GetSeparatorTextPadding(ImGuiStyle *self) { return self->SeparatorTextPadding; }
void wrap_ImGuiStyle_SetDisplayWindowPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->DisplayWindowPadding = v; }
ImVec2 wrap_ImGuiStyle_GetDisplayWindowPadding(ImGuiStyle *self) { return self->DisplayWindowPadding; }
void wrap_ImGuiStyle_SetDisplaySafeAreaPadding(ImGuiStyle *ImGuiStylePtr, ImVec2 v) { ImGuiStylePtr->DisplaySafeAreaPadding = v; }
ImVec2 wrap_ImGuiStyle_GetDisplaySafeAreaPadding(ImGuiStyle *self) { return self->DisplaySafeAreaPadding; }
void wrap_ImGuiStyle_SetDockingSeparatorSize(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->DockingSeparatorSize = v; }
float wrap_ImGuiStyle_GetDockingSeparatorSize(ImGuiStyle *self) { return self->DockingSeparatorSize; }
void wrap_ImGuiStyle_SetMouseCursorScale(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->MouseCursorScale = v; }
float wrap_ImGuiStyle_GetMouseCursorScale(ImGuiStyle *self) { return self->MouseCursorScale; }
void wrap_ImGuiStyle_SetAntiAliasedLines(ImGuiStyle *ImGuiStylePtr, bool v) { ImGuiStylePtr->AntiAliasedLines = v; }
bool wrap_ImGuiStyle_GetAntiAliasedLines(ImGuiStyle *self) { return self->AntiAliasedLines; }
void wrap_ImGuiStyle_SetAntiAliasedLinesUseTex(ImGuiStyle *ImGuiStylePtr, bool v) { ImGuiStylePtr->AntiAliasedLinesUseTex = v; }
bool wrap_ImGuiStyle_GetAntiAliasedLinesUseTex(ImGuiStyle *self) { return self->AntiAliasedLinesUseTex; }
void wrap_ImGuiStyle_SetAntiAliasedFill(ImGuiStyle *ImGuiStylePtr, bool v) { ImGuiStylePtr->AntiAliasedFill = v; }
bool wrap_ImGuiStyle_GetAntiAliasedFill(ImGuiStyle *self) { return self->AntiAliasedFill; }
void wrap_ImGuiStyle_SetCurveTessellationTol(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->CurveTessellationTol = v; }
float wrap_ImGuiStyle_GetCurveTessellationTol(ImGuiStyle *self) { return self->CurveTessellationTol; }
void wrap_ImGuiStyle_SetCircleTessellationMaxError(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->CircleTessellationMaxError = v; }
float wrap_ImGuiStyle_GetCircleTessellationMaxError(ImGuiStyle *self) { return self->CircleTessellationMaxError; }
void wrap_ImGuiStyle_SetColors(ImGuiStyle *ImGuiStylePtr, ImVec4* v) { memcpy(ImGuiStylePtr->Colors, v, sizeof(ImVec4)*55); }
ImVec4* wrap_ImGuiStyle_GetColors(ImGuiStyle *self) { return self->Colors; }
void wrap_ImGuiStyle_SetHoverStationaryDelay(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->HoverStationaryDelay = v; }
float wrap_ImGuiStyle_GetHoverStationaryDelay(ImGuiStyle *self) { return self->HoverStationaryDelay; }
void wrap_ImGuiStyle_SetHoverDelayShort(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->HoverDelayShort = v; }
float wrap_ImGuiStyle_GetHoverDelayShort(ImGuiStyle *self) { return self->HoverDelayShort; }
void wrap_ImGuiStyle_SetHoverDelayNormal(ImGuiStyle *ImGuiStylePtr, float v) { ImGuiStylePtr->HoverDelayNormal = v; }
float wrap_ImGuiStyle_GetHoverDelayNormal(ImGuiStyle *self) { return self->HoverDelayNormal; }
void wrap_ImGuiStyle_SetHoverFlagsForTooltipMouse(ImGuiStyle *ImGuiStylePtr, ImGuiHoveredFlags v) { ImGuiStylePtr->HoverFlagsForTooltipMouse = v; }
ImGuiHoveredFlags wrap_ImGuiStyle_GetHoverFlagsForTooltipMouse(ImGuiStyle *self) { return self->HoverFlagsForTooltipMouse; }
void wrap_ImGuiStyle_SetHoverFlagsForTooltipNav(ImGuiStyle *ImGuiStylePtr, ImGuiHoveredFlags v) { ImGuiStylePtr->HoverFlagsForTooltipNav = v; }
ImGuiHoveredFlags wrap_ImGuiStyle_GetHoverFlagsForTooltipNav(ImGuiStyle *self) { return self->HoverFlagsForTooltipNav; }
void wrap_ImGuiStyleMod_SetVarIdx(ImGuiStyleMod *ImGuiStyleModPtr, ImGuiStyleVar v) { ImGuiStyleModPtr->VarIdx = v; }
ImGuiStyleVar wrap_ImGuiStyleMod_GetVarIdx(ImGuiStyleMod *self) { return self->VarIdx; }
void wrap_ImGuiTabBar_SetTabs(ImGuiTabBar *ImGuiTabBarPtr, ImVector_ImGuiTabItem v) { ImGuiTabBarPtr->Tabs = v; }
ImVector_ImGuiTabItem wrap_ImGuiTabBar_GetTabs(ImGuiTabBar *self) { return self->Tabs; }
void wrap_ImGuiTabBar_SetFlags(ImGuiTabBar *ImGuiTabBarPtr, ImGuiTabBarFlags v) { ImGuiTabBarPtr->Flags = v; }
ImGuiTabBarFlags wrap_ImGuiTabBar_GetFlags(ImGuiTabBar *self) { return self->Flags; }
void wrap_ImGuiTabBar_SetID(ImGuiTabBar *ImGuiTabBarPtr, ImGuiID v) { ImGuiTabBarPtr->ID = v; }
ImGuiID wrap_ImGuiTabBar_GetID(ImGuiTabBar *self) { return self->ID; }
void wrap_ImGuiTabBar_SetSelectedTabId(ImGuiTabBar *ImGuiTabBarPtr, ImGuiID v) { ImGuiTabBarPtr->SelectedTabId = v; }
ImGuiID wrap_ImGuiTabBar_GetSelectedTabId(ImGuiTabBar *self) { return self->SelectedTabId; }
void wrap_ImGuiTabBar_SetNextSelectedTabId(ImGuiTabBar *ImGuiTabBarPtr, ImGuiID v) { ImGuiTabBarPtr->NextSelectedTabId = v; }
ImGuiID wrap_ImGuiTabBar_GetNextSelectedTabId(ImGuiTabBar *self) { return self->NextSelectedTabId; }
void wrap_ImGuiTabBar_SetVisibleTabId(ImGuiTabBar *ImGuiTabBarPtr, ImGuiID v) { ImGuiTabBarPtr->VisibleTabId = v; }
ImGuiID wrap_ImGuiTabBar_GetVisibleTabId(ImGuiTabBar *self) { return self->VisibleTabId; }
void wrap_ImGuiTabBar_SetCurrFrameVisible(ImGuiTabBar *ImGuiTabBarPtr, int v) { ImGuiTabBarPtr->CurrFrameVisible = v; }
int wrap_ImGuiTabBar_GetCurrFrameVisible(ImGuiTabBar *self) { return self->CurrFrameVisible; }
void wrap_ImGuiTabBar_SetPrevFrameVisible(ImGuiTabBar *ImGuiTabBarPtr, int v) { ImGuiTabBarPtr->PrevFrameVisible = v; }
int wrap_ImGuiTabBar_GetPrevFrameVisible(ImGuiTabBar *self) { return self->PrevFrameVisible; }
void wrap_ImGuiTabBar_SetBarRect(ImGuiTabBar *ImGuiTabBarPtr, ImRect v) { ImGuiTabBarPtr->BarRect = v; }
ImRect wrap_ImGuiTabBar_GetBarRect(ImGuiTabBar *self) { return self->BarRect; }
void wrap_ImGuiTabBar_SetCurrTabsContentsHeight(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->CurrTabsContentsHeight = v; }
float wrap_ImGuiTabBar_GetCurrTabsContentsHeight(ImGuiTabBar *self) { return self->CurrTabsContentsHeight; }
void wrap_ImGuiTabBar_SetPrevTabsContentsHeight(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->PrevTabsContentsHeight = v; }
float wrap_ImGuiTabBar_GetPrevTabsContentsHeight(ImGuiTabBar *self) { return self->PrevTabsContentsHeight; }
void wrap_ImGuiTabBar_SetWidthAllTabs(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->WidthAllTabs = v; }
float wrap_ImGuiTabBar_GetWidthAllTabs(ImGuiTabBar *self) { return self->WidthAllTabs; }
void wrap_ImGuiTabBar_SetWidthAllTabsIdeal(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->WidthAllTabsIdeal = v; }
float wrap_ImGuiTabBar_GetWidthAllTabsIdeal(ImGuiTabBar *self) { return self->WidthAllTabsIdeal; }
void wrap_ImGuiTabBar_SetScrollingAnim(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingAnim = v; }
float wrap_ImGuiTabBar_GetScrollingAnim(ImGuiTabBar *self) { return self->ScrollingAnim; }
void wrap_ImGuiTabBar_SetScrollingTarget(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingTarget = v; }
float wrap_ImGuiTabBar_GetScrollingTarget(ImGuiTabBar *self) { return self->ScrollingTarget; }
void wrap_ImGuiTabBar_SetScrollingTargetDistToVisibility(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingTargetDistToVisibility = v; }
float wrap_ImGuiTabBar_GetScrollingTargetDistToVisibility(ImGuiTabBar *self) { return self->ScrollingTargetDistToVisibility; }
void wrap_ImGuiTabBar_SetScrollingSpeed(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingSpeed = v; }
float wrap_ImGuiTabBar_GetScrollingSpeed(ImGuiTabBar *self) { return self->ScrollingSpeed; }
void wrap_ImGuiTabBar_SetScrollingRectMinX(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingRectMinX = v; }
float wrap_ImGuiTabBar_GetScrollingRectMinX(ImGuiTabBar *self) { return self->ScrollingRectMinX; }
void wrap_ImGuiTabBar_SetScrollingRectMaxX(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ScrollingRectMaxX = v; }
float wrap_ImGuiTabBar_GetScrollingRectMaxX(ImGuiTabBar *self) { return self->ScrollingRectMaxX; }
void wrap_ImGuiTabBar_SetSeparatorMinX(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->SeparatorMinX = v; }
float wrap_ImGuiTabBar_GetSeparatorMinX(ImGuiTabBar *self) { return self->SeparatorMinX; }
void wrap_ImGuiTabBar_SetSeparatorMaxX(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->SeparatorMaxX = v; }
float wrap_ImGuiTabBar_GetSeparatorMaxX(ImGuiTabBar *self) { return self->SeparatorMaxX; }
void wrap_ImGuiTabBar_SetReorderRequestTabId(ImGuiTabBar *ImGuiTabBarPtr, ImGuiID v) { ImGuiTabBarPtr->ReorderRequestTabId = v; }
ImGuiID wrap_ImGuiTabBar_GetReorderRequestTabId(ImGuiTabBar *self) { return self->ReorderRequestTabId; }
void wrap_ImGuiTabBar_SetReorderRequestOffset(ImGuiTabBar *ImGuiTabBarPtr, ImS16 v) { ImGuiTabBarPtr->ReorderRequestOffset = v; }
ImS16 wrap_ImGuiTabBar_GetReorderRequestOffset(ImGuiTabBar *self) { return self->ReorderRequestOffset; }
void wrap_ImGuiTabBar_SetBeginCount(ImGuiTabBar *ImGuiTabBarPtr, ImS8 v) { ImGuiTabBarPtr->BeginCount = v; }
ImS8 wrap_ImGuiTabBar_GetBeginCount(ImGuiTabBar *self) { return self->BeginCount; }
void wrap_ImGuiTabBar_SetWantLayout(ImGuiTabBar *ImGuiTabBarPtr, bool v) { ImGuiTabBarPtr->WantLayout = v; }
bool wrap_ImGuiTabBar_GetWantLayout(ImGuiTabBar *self) { return self->WantLayout; }
void wrap_ImGuiTabBar_SetVisibleTabWasSubmitted(ImGuiTabBar *ImGuiTabBarPtr, bool v) { ImGuiTabBarPtr->VisibleTabWasSubmitted = v; }
bool wrap_ImGuiTabBar_GetVisibleTabWasSubmitted(ImGuiTabBar *self) { return self->VisibleTabWasSubmitted; }
void wrap_ImGuiTabBar_SetTabsAddedNew(ImGuiTabBar *ImGuiTabBarPtr, bool v) { ImGuiTabBarPtr->TabsAddedNew = v; }
bool wrap_ImGuiTabBar_GetTabsAddedNew(ImGuiTabBar *self) { return self->TabsAddedNew; }
void wrap_ImGuiTabBar_SetTabsActiveCount(ImGuiTabBar *ImGuiTabBarPtr, ImS16 v) { ImGuiTabBarPtr->TabsActiveCount = v; }
ImS16 wrap_ImGuiTabBar_GetTabsActiveCount(ImGuiTabBar *self) { return self->TabsActiveCount; }
void wrap_ImGuiTabBar_SetLastTabItemIdx(ImGuiTabBar *ImGuiTabBarPtr, ImS16 v) { ImGuiTabBarPtr->LastTabItemIdx = v; }
ImS16 wrap_ImGuiTabBar_GetLastTabItemIdx(ImGuiTabBar *self) { return self->LastTabItemIdx; }
void wrap_ImGuiTabBar_SetItemSpacingY(ImGuiTabBar *ImGuiTabBarPtr, float v) { ImGuiTabBarPtr->ItemSpacingY = v; }
float wrap_ImGuiTabBar_GetItemSpacingY(ImGuiTabBar *self) { return self->ItemSpacingY; }
void wrap_ImGuiTabBar_SetFramePadding(ImGuiTabBar *ImGuiTabBarPtr, ImVec2 v) { ImGuiTabBarPtr->FramePadding = v; }
ImVec2 wrap_ImGuiTabBar_GetFramePadding(ImGuiTabBar *self) { return self->FramePadding; }
void wrap_ImGuiTabBar_SetBackupCursorPos(ImGuiTabBar *ImGuiTabBarPtr, ImVec2 v) { ImGuiTabBarPtr->BackupCursorPos = v; }
ImVec2 wrap_ImGuiTabBar_GetBackupCursorPos(ImGuiTabBar *self) { return self->BackupCursorPos; }
void wrap_ImGuiTabBar_SetTabsNames(ImGuiTabBar *ImGuiTabBarPtr, ImGuiTextBuffer v) { ImGuiTabBarPtr->TabsNames = v; }
ImGuiTextBuffer wrap_ImGuiTabBar_GetTabsNames(ImGuiTabBar *self) { return self->TabsNames; }
void wrap_ImGuiTabItem_SetID(ImGuiTabItem *ImGuiTabItemPtr, ImGuiID v) { ImGuiTabItemPtr->ID = v; }
ImGuiID wrap_ImGuiTabItem_GetID(ImGuiTabItem *self) { return self->ID; }
void wrap_ImGuiTabItem_SetFlags(ImGuiTabItem *ImGuiTabItemPtr, ImGuiTabItemFlags v) { ImGuiTabItemPtr->Flags = v; }
ImGuiTabItemFlags wrap_ImGuiTabItem_GetFlags(ImGuiTabItem *self) { return self->Flags; }
void wrap_ImGuiTabItem_SetWindow(ImGuiTabItem *ImGuiTabItemPtr, ImGuiWindow* v) { ImGuiTabItemPtr->Window = v; }
ImGuiWindow* wrap_ImGuiTabItem_GetWindow(ImGuiTabItem *self) { return self->Window; }
void wrap_ImGuiTabItem_SetLastFrameVisible(ImGuiTabItem *ImGuiTabItemPtr, int v) { ImGuiTabItemPtr->LastFrameVisible = v; }
int wrap_ImGuiTabItem_GetLastFrameVisible(ImGuiTabItem *self) { return self->LastFrameVisible; }
void wrap_ImGuiTabItem_SetLastFrameSelected(ImGuiTabItem *ImGuiTabItemPtr, int v) { ImGuiTabItemPtr->LastFrameSelected = v; }
int wrap_ImGuiTabItem_GetLastFrameSelected(ImGuiTabItem *self) { return self->LastFrameSelected; }
void wrap_ImGuiTabItem_SetOffset(ImGuiTabItem *ImGuiTabItemPtr, float v) { ImGuiTabItemPtr->Offset = v; }
float wrap_ImGuiTabItem_GetOffset(ImGuiTabItem *self) { return self->Offset; }
void wrap_ImGuiTabItem_SetWidth(ImGuiTabItem *ImGuiTabItemPtr, float v) { ImGuiTabItemPtr->Width = v; }
float wrap_ImGuiTabItem_GetWidth(ImGuiTabItem *self) { return self->Width; }
void wrap_ImGuiTabItem_SetContentWidth(ImGuiTabItem *ImGuiTabItemPtr, float v) { ImGuiTabItemPtr->ContentWidth = v; }
float wrap_ImGuiTabItem_GetContentWidth(ImGuiTabItem *self) { return self->ContentWidth; }
void wrap_ImGuiTabItem_SetRequestedWidth(ImGuiTabItem *ImGuiTabItemPtr, float v) { ImGuiTabItemPtr->RequestedWidth = v; }
float wrap_ImGuiTabItem_GetRequestedWidth(ImGuiTabItem *self) { return self->RequestedWidth; }
void wrap_ImGuiTabItem_SetNameOffset(ImGuiTabItem *ImGuiTabItemPtr, ImS32 v) { ImGuiTabItemPtr->NameOffset = v; }
ImS32 wrap_ImGuiTabItem_GetNameOffset(ImGuiTabItem *self) { return self->NameOffset; }
void wrap_ImGuiTabItem_SetBeginOrder(ImGuiTabItem *ImGuiTabItemPtr, ImS16 v) { ImGuiTabItemPtr->BeginOrder = v; }
ImS16 wrap_ImGuiTabItem_GetBeginOrder(ImGuiTabItem *self) { return self->BeginOrder; }
void wrap_ImGuiTabItem_SetIndexDuringLayout(ImGuiTabItem *ImGuiTabItemPtr, ImS16 v) { ImGuiTabItemPtr->IndexDuringLayout = v; }
ImS16 wrap_ImGuiTabItem_GetIndexDuringLayout(ImGuiTabItem *self) { return self->IndexDuringLayout; }
void wrap_ImGuiTabItem_SetWantClose(ImGuiTabItem *ImGuiTabItemPtr, bool v) { ImGuiTabItemPtr->WantClose = v; }
bool wrap_ImGuiTabItem_GetWantClose(ImGuiTabItem *self) { return self->WantClose; }
void wrap_ImGuiTable_SetID(ImGuiTable *ImGuiTablePtr, ImGuiID v) { ImGuiTablePtr->ID = v; }
ImGuiID wrap_ImGuiTable_GetID(ImGuiTable *self) { return self->ID; }
void wrap_ImGuiTable_SetFlags(ImGuiTable *ImGuiTablePtr, ImGuiTableFlags v) { ImGuiTablePtr->Flags = v; }
ImGuiTableFlags wrap_ImGuiTable_GetFlags(ImGuiTable *self) { return self->Flags; }
void wrap_ImGuiTable_SetRawData(ImGuiTable *ImGuiTablePtr, uintptr_t v) { ImGuiTablePtr->RawData = (void*)v; }
uintptr_t wrap_ImGuiTable_GetRawData(ImGuiTable *self) { return (uintptr_t)self->RawData; }
void wrap_ImGuiTable_SetTempData(ImGuiTable *ImGuiTablePtr, ImGuiTableTempData* v) { ImGuiTablePtr->TempData = v; }
ImGuiTableTempData* wrap_ImGuiTable_GetTempData(ImGuiTable *self) { return self->TempData; }
void wrap_ImGuiTable_SetColumns(ImGuiTable *ImGuiTablePtr, ImSpan_ImGuiTableColumn v) { ImGuiTablePtr->Columns = v; }
ImSpan_ImGuiTableColumn wrap_ImGuiTable_GetColumns(ImGuiTable *self) { return self->Columns; }
void wrap_ImGuiTable_SetDisplayOrderToIndex(ImGuiTable *ImGuiTablePtr, ImSpan_ImGuiTableColumnIdx v) { ImGuiTablePtr->DisplayOrderToIndex = v; }
ImSpan_ImGuiTableColumnIdx wrap_ImGuiTable_GetDisplayOrderToIndex(ImGuiTable *self) { return self->DisplayOrderToIndex; }
void wrap_ImGuiTable_SetRowCellData(ImGuiTable *ImGuiTablePtr, ImSpan_ImGuiTableCellData v) { ImGuiTablePtr->RowCellData = v; }
ImSpan_ImGuiTableCellData wrap_ImGuiTable_GetRowCellData(ImGuiTable *self) { return self->RowCellData; }
void wrap_ImGuiTable_SetEnabledMaskByDisplayOrder(ImGuiTable *ImGuiTablePtr, ImBitArrayPtr v) { ImGuiTablePtr->EnabledMaskByDisplayOrder = v; }
ImBitArrayPtr wrap_ImGuiTable_GetEnabledMaskByDisplayOrder(ImGuiTable *self) { return self->EnabledMaskByDisplayOrder; }
void wrap_ImGuiTable_SetEnabledMaskByIndex(ImGuiTable *ImGuiTablePtr, ImBitArrayPtr v) { ImGuiTablePtr->EnabledMaskByIndex = v; }
ImBitArrayPtr wrap_ImGuiTable_GetEnabledMaskByIndex(ImGuiTable *self) { return self->EnabledMaskByIndex; }
void wrap_ImGuiTable_SetVisibleMaskByIndex(ImGuiTable *ImGuiTablePtr, ImBitArrayPtr v) { ImGuiTablePtr->VisibleMaskByIndex = v; }
ImBitArrayPtr wrap_ImGuiTable_GetVisibleMaskByIndex(ImGuiTable *self) { return self->VisibleMaskByIndex; }
void wrap_ImGuiTable_SetSettingsLoadedFlags(ImGuiTable *ImGuiTablePtr, ImGuiTableFlags v) { ImGuiTablePtr->SettingsLoadedFlags = v; }
ImGuiTableFlags wrap_ImGuiTable_GetSettingsLoadedFlags(ImGuiTable *self) { return self->SettingsLoadedFlags; }
void wrap_ImGuiTable_SetSettingsOffset(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->SettingsOffset = v; }
int wrap_ImGuiTable_GetSettingsOffset(ImGuiTable *self) { return self->SettingsOffset; }
void wrap_ImGuiTable_SetLastFrameActive(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->LastFrameActive = v; }
int wrap_ImGuiTable_GetLastFrameActive(ImGuiTable *self) { return self->LastFrameActive; }
void wrap_ImGuiTable_SetColumnsCount(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->ColumnsCount = v; }
int wrap_ImGuiTable_GetColumnsCount(ImGuiTable *self) { return self->ColumnsCount; }
void wrap_ImGuiTable_SetCurrentRow(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->CurrentRow = v; }
int wrap_ImGuiTable_GetCurrentRow(ImGuiTable *self) { return self->CurrentRow; }
void wrap_ImGuiTable_SetCurrentColumn(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->CurrentColumn = v; }
int wrap_ImGuiTable_GetCurrentColumn(ImGuiTable *self) { return self->CurrentColumn; }
void wrap_ImGuiTable_SetInstanceCurrent(ImGuiTable *ImGuiTablePtr, ImS16 v) { ImGuiTablePtr->InstanceCurrent = v; }
ImS16 wrap_ImGuiTable_GetInstanceCurrent(ImGuiTable *self) { return self->InstanceCurrent; }
void wrap_ImGuiTable_SetInstanceInteracted(ImGuiTable *ImGuiTablePtr, ImS16 v) { ImGuiTablePtr->InstanceInteracted = v; }
ImS16 wrap_ImGuiTable_GetInstanceInteracted(ImGuiTable *self) { return self->InstanceInteracted; }
void wrap_ImGuiTable_SetRowPosY1(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowPosY1 = v; }
float wrap_ImGuiTable_GetRowPosY1(ImGuiTable *self) { return self->RowPosY1; }
void wrap_ImGuiTable_SetRowPosY2(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowPosY2 = v; }
float wrap_ImGuiTable_GetRowPosY2(ImGuiTable *self) { return self->RowPosY2; }
void wrap_ImGuiTable_SetRowMinHeight(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowMinHeight = v; }
float wrap_ImGuiTable_GetRowMinHeight(ImGuiTable *self) { return self->RowMinHeight; }
void wrap_ImGuiTable_SetRowCellPaddingY(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowCellPaddingY = v; }
float wrap_ImGuiTable_GetRowCellPaddingY(ImGuiTable *self) { return self->RowCellPaddingY; }
void wrap_ImGuiTable_SetRowTextBaseline(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowTextBaseline = v; }
float wrap_ImGuiTable_GetRowTextBaseline(ImGuiTable *self) { return self->RowTextBaseline; }
void wrap_ImGuiTable_SetRowIndentOffsetX(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RowIndentOffsetX = v; }
float wrap_ImGuiTable_GetRowIndentOffsetX(ImGuiTable *self) { return self->RowIndentOffsetX; }
void wrap_ImGuiTable_SetRowFlags(ImGuiTable *ImGuiTablePtr, ImGuiTableRowFlags v) { ImGuiTablePtr->RowFlags = v; }
ImGuiTableRowFlags wrap_ImGuiTable_GetRowFlags(ImGuiTable *self) { return self->RowFlags; }
void wrap_ImGuiTable_SetLastRowFlags(ImGuiTable *ImGuiTablePtr, ImGuiTableRowFlags v) { ImGuiTablePtr->LastRowFlags = v; }
ImGuiTableRowFlags wrap_ImGuiTable_GetLastRowFlags(ImGuiTable *self) { return self->LastRowFlags; }
void wrap_ImGuiTable_SetRowBgColorCounter(ImGuiTable *ImGuiTablePtr, int v) { ImGuiTablePtr->RowBgColorCounter = v; }
int wrap_ImGuiTable_GetRowBgColorCounter(ImGuiTable *self) { return self->RowBgColorCounter; }
void wrap_ImGuiTable_SetRowBgColor(ImGuiTable *ImGuiTablePtr, ImU32* v) { memcpy(ImGuiTablePtr->RowBgColor, v, sizeof(ImU32)*2); }
ImU32* wrap_ImGuiTable_GetRowBgColor(ImGuiTable *self) { return self->RowBgColor; }
ImU32 cimgui_ImU32_GetAtIdx(ImU32 *self, int index) { return self[index]; }
void wrap_ImGuiTable_SetBorderColorStrong(ImGuiTable *ImGuiTablePtr, ImU32 v) { ImGuiTablePtr->BorderColorStrong = v; }
ImU32 wrap_ImGuiTable_GetBorderColorStrong(ImGuiTable *self) { return self->BorderColorStrong; }
void wrap_ImGuiTable_SetBorderColorLight(ImGuiTable *ImGuiTablePtr, ImU32 v) { ImGuiTablePtr->BorderColorLight = v; }
ImU32 wrap_ImGuiTable_GetBorderColorLight(ImGuiTable *self) { return self->BorderColorLight; }
void wrap_ImGuiTable_SetBorderX1(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->BorderX1 = v; }
float wrap_ImGuiTable_GetBorderX1(ImGuiTable *self) { return self->BorderX1; }
void wrap_ImGuiTable_SetBorderX2(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->BorderX2 = v; }
float wrap_ImGuiTable_GetBorderX2(ImGuiTable *self) { return self->BorderX2; }
void wrap_ImGuiTable_SetHostIndentX(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->HostIndentX = v; }
float wrap_ImGuiTable_GetHostIndentX(ImGuiTable *self) { return self->HostIndentX; }
void wrap_ImGuiTable_SetMinColumnWidth(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->MinColumnWidth = v; }
float wrap_ImGuiTable_GetMinColumnWidth(ImGuiTable *self) { return self->MinColumnWidth; }
void wrap_ImGuiTable_SetOuterPaddingX(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->OuterPaddingX = v; }
float wrap_ImGuiTable_GetOuterPaddingX(ImGuiTable *self) { return self->OuterPaddingX; }
void wrap_ImGuiTable_SetCellPaddingX(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->CellPaddingX = v; }
float wrap_ImGuiTable_GetCellPaddingX(ImGuiTable *self) { return self->CellPaddingX; }
void wrap_ImGuiTable_SetCellSpacingX1(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->CellSpacingX1 = v; }
float wrap_ImGuiTable_GetCellSpacingX1(ImGuiTable *self) { return self->CellSpacingX1; }
void wrap_ImGuiTable_SetCellSpacingX2(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->CellSpacingX2 = v; }
float wrap_ImGuiTable_GetCellSpacingX2(ImGuiTable *self) { return self->CellSpacingX2; }
void wrap_ImGuiTable_SetInnerWidth(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->InnerWidth = v; }
float wrap_ImGuiTable_GetInnerWidth(ImGuiTable *self) { return self->InnerWidth; }
void wrap_ImGuiTable_SetColumnsGivenWidth(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->ColumnsGivenWidth = v; }
float wrap_ImGuiTable_GetColumnsGivenWidth(ImGuiTable *self) { return self->ColumnsGivenWidth; }
void wrap_ImGuiTable_SetColumnsAutoFitWidth(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->ColumnsAutoFitWidth = v; }
float wrap_ImGuiTable_GetColumnsAutoFitWidth(ImGuiTable *self) { return self->ColumnsAutoFitWidth; }
void wrap_ImGuiTable_SetColumnsStretchSumWeights(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->ColumnsStretchSumWeights = v; }
float wrap_ImGuiTable_GetColumnsStretchSumWeights(ImGuiTable *self) { return self->ColumnsStretchSumWeights; }
void wrap_ImGuiTable_SetResizedColumnNextWidth(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->ResizedColumnNextWidth = v; }
float wrap_ImGuiTable_GetResizedColumnNextWidth(ImGuiTable *self) { return self->ResizedColumnNextWidth; }
void wrap_ImGuiTable_SetResizeLockMinContentsX2(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->ResizeLockMinContentsX2 = v; }
float wrap_ImGuiTable_GetResizeLockMinContentsX2(ImGuiTable *self) { return self->ResizeLockMinContentsX2; }
void wrap_ImGuiTable_SetRefScale(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->RefScale = v; }
float wrap_ImGuiTable_GetRefScale(ImGuiTable *self) { return self->RefScale; }
void wrap_ImGuiTable_SetAngledHeadersHeight(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->AngledHeadersHeight = v; }
float wrap_ImGuiTable_GetAngledHeadersHeight(ImGuiTable *self) { return self->AngledHeadersHeight; }
void wrap_ImGuiTable_SetAngledHeadersSlope(ImGuiTable *ImGuiTablePtr, float v) { ImGuiTablePtr->AngledHeadersSlope = v; }
float wrap_ImGuiTable_GetAngledHeadersSlope(ImGuiTable *self) { return self->AngledHeadersSlope; }
void wrap_ImGuiTable_SetOuterRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->OuterRect = v; }
ImRect wrap_ImGuiTable_GetOuterRect(ImGuiTable *self) { return self->OuterRect; }
void wrap_ImGuiTable_SetInnerRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->InnerRect = v; }
ImRect wrap_ImGuiTable_GetInnerRect(ImGuiTable *self) { return self->InnerRect; }
void wrap_ImGuiTable_SetWorkRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->WorkRect = v; }
ImRect wrap_ImGuiTable_GetWorkRect(ImGuiTable *self) { return self->WorkRect; }
void wrap_ImGuiTable_SetInnerClipRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->InnerClipRect = v; }
ImRect wrap_ImGuiTable_GetInnerClipRect(ImGuiTable *self) { return self->InnerClipRect; }
void wrap_ImGuiTable_SetBgClipRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->BgClipRect = v; }
ImRect wrap_ImGuiTable_GetBgClipRect(ImGuiTable *self) { return self->BgClipRect; }
void wrap_ImGuiTable_SetBg0ClipRectForDrawCmd(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->Bg0ClipRectForDrawCmd = v; }
ImRect wrap_ImGuiTable_GetBg0ClipRectForDrawCmd(ImGuiTable *self) { return self->Bg0ClipRectForDrawCmd; }
void wrap_ImGuiTable_SetBg2ClipRectForDrawCmd(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->Bg2ClipRectForDrawCmd = v; }
ImRect wrap_ImGuiTable_GetBg2ClipRectForDrawCmd(ImGuiTable *self) { return self->Bg2ClipRectForDrawCmd; }
void wrap_ImGuiTable_SetHostClipRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->HostClipRect = v; }
ImRect wrap_ImGuiTable_GetHostClipRect(ImGuiTable *self) { return self->HostClipRect; }
void wrap_ImGuiTable_SetHostBackupInnerClipRect(ImGuiTable *ImGuiTablePtr, ImRect v) { ImGuiTablePtr->HostBackupInnerClipRect = v; }
ImRect wrap_ImGuiTable_GetHostBackupInnerClipRect(ImGuiTable *self) { return self->HostBackupInnerClipRect; }
void wrap_ImGuiTable_SetOuterWindow(ImGuiTable *ImGuiTablePtr, ImGuiWindow* v) { ImGuiTablePtr->OuterWindow = v; }
ImGuiWindow* wrap_ImGuiTable_GetOuterWindow(ImGuiTable *self) { return self->OuterWindow; }
void wrap_ImGuiTable_SetInnerWindow(ImGuiTable *ImGuiTablePtr, ImGuiWindow* v) { ImGuiTablePtr->InnerWindow = v; }
ImGuiWindow* wrap_ImGuiTable_GetInnerWindow(ImGuiTable *self) { return self->InnerWindow; }
void wrap_ImGuiTable_SetColumnsNames(ImGuiTable *ImGuiTablePtr, ImGuiTextBuffer v) { ImGuiTablePtr->ColumnsNames = v; }
ImGuiTextBuffer wrap_ImGuiTable_GetColumnsNames(ImGuiTable *self) { return self->ColumnsNames; }
void wrap_ImGuiTable_SetDrawSplitter(ImGuiTable *ImGuiTablePtr, ImDrawListSplitter* v) { ImGuiTablePtr->DrawSplitter = v; }
ImDrawListSplitter* wrap_ImGuiTable_GetDrawSplitter(ImGuiTable *self) { return self->DrawSplitter; }
void wrap_ImGuiTable_SetInstanceDataFirst(ImGuiTable *ImGuiTablePtr, ImGuiTableInstanceData v) { ImGuiTablePtr->InstanceDataFirst = v; }
ImGuiTableInstanceData wrap_ImGuiTable_GetInstanceDataFirst(ImGuiTable *self) { return self->InstanceDataFirst; }
void wrap_ImGuiTable_SetInstanceDataExtra(ImGuiTable *ImGuiTablePtr, ImVector_ImGuiTableInstanceData v) { ImGuiTablePtr->InstanceDataExtra = v; }
ImVector_ImGuiTableInstanceData wrap_ImGuiTable_GetInstanceDataExtra(ImGuiTable *self) { return self->InstanceDataExtra; }
void wrap_ImGuiTable_SetSortSpecsSingle(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnSortSpecs v) { ImGuiTablePtr->SortSpecsSingle = v; }
ImGuiTableColumnSortSpecs wrap_ImGuiTable_GetSortSpecsSingle(ImGuiTable *self) { return self->SortSpecsSingle; }
void wrap_ImGuiTable_SetSortSpecsMulti(ImGuiTable *ImGuiTablePtr, ImVector_ImGuiTableColumnSortSpecs v) { ImGuiTablePtr->SortSpecsMulti = v; }
ImVector_ImGuiTableColumnSortSpecs wrap_ImGuiTable_GetSortSpecsMulti(ImGuiTable *self) { return self->SortSpecsMulti; }
void wrap_ImGuiTable_SetSortSpecs(ImGuiTable *ImGuiTablePtr, ImGuiTableSortSpecs v) { ImGuiTablePtr->SortSpecs = v; }
ImGuiTableSortSpecs wrap_ImGuiTable_GetSortSpecs(ImGuiTable *self) { return self->SortSpecs; }
void wrap_ImGuiTable_SetSortSpecsCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->SortSpecsCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetSortSpecsCount(ImGuiTable *self) { return self->SortSpecsCount; }
void wrap_ImGuiTable_SetColumnsEnabledCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ColumnsEnabledCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetColumnsEnabledCount(ImGuiTable *self) { return self->ColumnsEnabledCount; }
void wrap_ImGuiTable_SetColumnsEnabledFixedCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ColumnsEnabledFixedCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetColumnsEnabledFixedCount(ImGuiTable *self) { return self->ColumnsEnabledFixedCount; }
void wrap_ImGuiTable_SetDeclColumnsCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->DeclColumnsCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetDeclColumnsCount(ImGuiTable *self) { return self->DeclColumnsCount; }
void wrap_ImGuiTable_SetAngledHeadersCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->AngledHeadersCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetAngledHeadersCount(ImGuiTable *self) { return self->AngledHeadersCount; }
void wrap_ImGuiTable_SetHoveredColumnBody(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->HoveredColumnBody = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetHoveredColumnBody(ImGuiTable *self) { return self->HoveredColumnBody; }
void wrap_ImGuiTable_SetHoveredColumnBorder(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->HoveredColumnBorder = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetHoveredColumnBorder(ImGuiTable *self) { return self->HoveredColumnBorder; }
void wrap_ImGuiTable_SetHighlightColumnHeader(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->HighlightColumnHeader = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetHighlightColumnHeader(ImGuiTable *self) { return self->HighlightColumnHeader; }
void wrap_ImGuiTable_SetAutoFitSingleColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->AutoFitSingleColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetAutoFitSingleColumn(ImGuiTable *self) { return self->AutoFitSingleColumn; }
void wrap_ImGuiTable_SetResizedColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ResizedColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetResizedColumn(ImGuiTable *self) { return self->ResizedColumn; }
void wrap_ImGuiTable_SetLastResizedColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->LastResizedColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetLastResizedColumn(ImGuiTable *self) { return self->LastResizedColumn; }
void wrap_ImGuiTable_SetHeldHeaderColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->HeldHeaderColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetHeldHeaderColumn(ImGuiTable *self) { return self->HeldHeaderColumn; }
void wrap_ImGuiTable_SetReorderColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ReorderColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetReorderColumn(ImGuiTable *self) { return self->ReorderColumn; }
void wrap_ImGuiTable_SetReorderColumnDir(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ReorderColumnDir = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetReorderColumnDir(ImGuiTable *self) { return self->ReorderColumnDir; }
void wrap_ImGuiTable_SetLeftMostEnabledColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->LeftMostEnabledColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetLeftMostEnabledColumn(ImGuiTable *self) { return self->LeftMostEnabledColumn; }
void wrap_ImGuiTable_SetRightMostEnabledColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->RightMostEnabledColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetRightMostEnabledColumn(ImGuiTable *self) { return self->RightMostEnabledColumn; }
void wrap_ImGuiTable_SetLeftMostStretchedColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->LeftMostStretchedColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetLeftMostStretchedColumn(ImGuiTable *self) { return self->LeftMostStretchedColumn; }
void wrap_ImGuiTable_SetRightMostStretchedColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->RightMostStretchedColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetRightMostStretchedColumn(ImGuiTable *self) { return self->RightMostStretchedColumn; }
void wrap_ImGuiTable_SetContextPopupColumn(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->ContextPopupColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetContextPopupColumn(ImGuiTable *self) { return self->ContextPopupColumn; }
void wrap_ImGuiTable_SetFreezeRowsRequest(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->FreezeRowsRequest = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetFreezeRowsRequest(ImGuiTable *self) { return self->FreezeRowsRequest; }
void wrap_ImGuiTable_SetFreezeRowsCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->FreezeRowsCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetFreezeRowsCount(ImGuiTable *self) { return self->FreezeRowsCount; }
void wrap_ImGuiTable_SetFreezeColumnsRequest(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->FreezeColumnsRequest = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetFreezeColumnsRequest(ImGuiTable *self) { return self->FreezeColumnsRequest; }
void wrap_ImGuiTable_SetFreezeColumnsCount(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->FreezeColumnsCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetFreezeColumnsCount(ImGuiTable *self) { return self->FreezeColumnsCount; }
void wrap_ImGuiTable_SetRowCellDataCurrent(ImGuiTable *ImGuiTablePtr, ImGuiTableColumnIdx v) { ImGuiTablePtr->RowCellDataCurrent = v; }
ImGuiTableColumnIdx wrap_ImGuiTable_GetRowCellDataCurrent(ImGuiTable *self) { return self->RowCellDataCurrent; }
void wrap_ImGuiTable_SetDummyDrawChannel(ImGuiTable *ImGuiTablePtr, ImGuiTableDrawChannelIdx v) { ImGuiTablePtr->DummyDrawChannel = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTable_GetDummyDrawChannel(ImGuiTable *self) { return self->DummyDrawChannel; }
void wrap_ImGuiTable_SetBg2DrawChannelCurrent(ImGuiTable *ImGuiTablePtr, ImGuiTableDrawChannelIdx v) { ImGuiTablePtr->Bg2DrawChannelCurrent = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTable_GetBg2DrawChannelCurrent(ImGuiTable *self) { return self->Bg2DrawChannelCurrent; }
void wrap_ImGuiTable_SetBg2DrawChannelUnfrozen(ImGuiTable *ImGuiTablePtr, ImGuiTableDrawChannelIdx v) { ImGuiTablePtr->Bg2DrawChannelUnfrozen = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTable_GetBg2DrawChannelUnfrozen(ImGuiTable *self) { return self->Bg2DrawChannelUnfrozen; }
void wrap_ImGuiTable_SetIsLayoutLocked(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsLayoutLocked = v; }
bool wrap_ImGuiTable_GetIsLayoutLocked(ImGuiTable *self) { return self->IsLayoutLocked; }
void wrap_ImGuiTable_SetIsInsideRow(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsInsideRow = v; }
bool wrap_ImGuiTable_GetIsInsideRow(ImGuiTable *self) { return self->IsInsideRow; }
void wrap_ImGuiTable_SetIsInitializing(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsInitializing = v; }
bool wrap_ImGuiTable_GetIsInitializing(ImGuiTable *self) { return self->IsInitializing; }
void wrap_ImGuiTable_SetIsSortSpecsDirty(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsSortSpecsDirty = v; }
bool wrap_ImGuiTable_GetIsSortSpecsDirty(ImGuiTable *self) { return self->IsSortSpecsDirty; }
void wrap_ImGuiTable_SetIsUsingHeaders(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsUsingHeaders = v; }
bool wrap_ImGuiTable_GetIsUsingHeaders(ImGuiTable *self) { return self->IsUsingHeaders; }
void wrap_ImGuiTable_SetIsContextPopupOpen(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsContextPopupOpen = v; }
bool wrap_ImGuiTable_GetIsContextPopupOpen(ImGuiTable *self) { return self->IsContextPopupOpen; }
void wrap_ImGuiTable_SetDisableDefaultContextMenu(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->DisableDefaultContextMenu = v; }
bool wrap_ImGuiTable_GetDisableDefaultContextMenu(ImGuiTable *self) { return self->DisableDefaultContextMenu; }
void wrap_ImGuiTable_SetIsSettingsRequestLoad(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsSettingsRequestLoad = v; }
bool wrap_ImGuiTable_GetIsSettingsRequestLoad(ImGuiTable *self) { return self->IsSettingsRequestLoad; }
void wrap_ImGuiTable_SetIsSettingsDirty(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsSettingsDirty = v; }
bool wrap_ImGuiTable_GetIsSettingsDirty(ImGuiTable *self) { return self->IsSettingsDirty; }
void wrap_ImGuiTable_SetIsDefaultDisplayOrder(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsDefaultDisplayOrder = v; }
bool wrap_ImGuiTable_GetIsDefaultDisplayOrder(ImGuiTable *self) { return self->IsDefaultDisplayOrder; }
void wrap_ImGuiTable_SetIsResetAllRequest(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsResetAllRequest = v; }
bool wrap_ImGuiTable_GetIsResetAllRequest(ImGuiTable *self) { return self->IsResetAllRequest; }
void wrap_ImGuiTable_SetIsResetDisplayOrderRequest(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsResetDisplayOrderRequest = v; }
bool wrap_ImGuiTable_GetIsResetDisplayOrderRequest(ImGuiTable *self) { return self->IsResetDisplayOrderRequest; }
void wrap_ImGuiTable_SetIsUnfrozenRows(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsUnfrozenRows = v; }
bool wrap_ImGuiTable_GetIsUnfrozenRows(ImGuiTable *self) { return self->IsUnfrozenRows; }
void wrap_ImGuiTable_SetIsDefaultSizingPolicy(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsDefaultSizingPolicy = v; }
bool wrap_ImGuiTable_GetIsDefaultSizingPolicy(ImGuiTable *self) { return self->IsDefaultSizingPolicy; }
void wrap_ImGuiTable_SetIsActiveIdAliveBeforeTable(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsActiveIdAliveBeforeTable = v; }
bool wrap_ImGuiTable_GetIsActiveIdAliveBeforeTable(ImGuiTable *self) { return self->IsActiveIdAliveBeforeTable; }
void wrap_ImGuiTable_SetIsActiveIdInTable(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->IsActiveIdInTable = v; }
bool wrap_ImGuiTable_GetIsActiveIdInTable(ImGuiTable *self) { return self->IsActiveIdInTable; }
void wrap_ImGuiTable_SetHasScrollbarYCurr(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->HasScrollbarYCurr = v; }
bool wrap_ImGuiTable_GetHasScrollbarYCurr(ImGuiTable *self) { return self->HasScrollbarYCurr; }
void wrap_ImGuiTable_SetHasScrollbarYPrev(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->HasScrollbarYPrev = v; }
bool wrap_ImGuiTable_GetHasScrollbarYPrev(ImGuiTable *self) { return self->HasScrollbarYPrev; }
void wrap_ImGuiTable_SetMemoryCompacted(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->MemoryCompacted = v; }
bool wrap_ImGuiTable_GetMemoryCompacted(ImGuiTable *self) { return self->MemoryCompacted; }
void wrap_ImGuiTable_SetHostSkipItems(ImGuiTable *ImGuiTablePtr, bool v) { ImGuiTablePtr->HostSkipItems = v; }
bool wrap_ImGuiTable_GetHostSkipItems(ImGuiTable *self) { return self->HostSkipItems; }
void wrap_ImGuiTableCellData_SetBgColor(ImGuiTableCellData *ImGuiTableCellDataPtr, ImU32 v) { ImGuiTableCellDataPtr->BgColor = v; }
ImU32 wrap_ImGuiTableCellData_GetBgColor(ImGuiTableCellData *self) { return self->BgColor; }
void wrap_ImGuiTableCellData_SetColumn(ImGuiTableCellData *ImGuiTableCellDataPtr, ImGuiTableColumnIdx v) { ImGuiTableCellDataPtr->Column = v; }
ImGuiTableColumnIdx wrap_ImGuiTableCellData_GetColumn(ImGuiTableCellData *self) { return self->Column; }
void wrap_ImGuiTableColumn_SetFlags(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnFlags v) { ImGuiTableColumnPtr->Flags = v; }
ImGuiTableColumnFlags wrap_ImGuiTableColumn_GetFlags(ImGuiTableColumn *self) { return self->Flags; }
void wrap_ImGuiTableColumn_SetWidthGiven(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->WidthGiven = v; }
float wrap_ImGuiTableColumn_GetWidthGiven(ImGuiTableColumn *self) { return self->WidthGiven; }
void wrap_ImGuiTableColumn_SetMinX(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->MinX = v; }
float wrap_ImGuiTableColumn_GetMinX(ImGuiTableColumn *self) { return self->MinX; }
void wrap_ImGuiTableColumn_SetMaxX(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->MaxX = v; }
float wrap_ImGuiTableColumn_GetMaxX(ImGuiTableColumn *self) { return self->MaxX; }
void wrap_ImGuiTableColumn_SetWidthRequest(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->WidthRequest = v; }
float wrap_ImGuiTableColumn_GetWidthRequest(ImGuiTableColumn *self) { return self->WidthRequest; }
void wrap_ImGuiTableColumn_SetWidthAuto(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->WidthAuto = v; }
float wrap_ImGuiTableColumn_GetWidthAuto(ImGuiTableColumn *self) { return self->WidthAuto; }
void wrap_ImGuiTableColumn_SetStretchWeight(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->StretchWeight = v; }
float wrap_ImGuiTableColumn_GetStretchWeight(ImGuiTableColumn *self) { return self->StretchWeight; }
void wrap_ImGuiTableColumn_SetInitStretchWeightOrWidth(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->InitStretchWeightOrWidth = v; }
float wrap_ImGuiTableColumn_GetInitStretchWeightOrWidth(ImGuiTableColumn *self) { return self->InitStretchWeightOrWidth; }
void wrap_ImGuiTableColumn_SetClipRect(ImGuiTableColumn *ImGuiTableColumnPtr, ImRect v) { ImGuiTableColumnPtr->ClipRect = v; }
ImRect wrap_ImGuiTableColumn_GetClipRect(ImGuiTableColumn *self) { return self->ClipRect; }
void wrap_ImGuiTableColumn_SetUserID(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiID v) { ImGuiTableColumnPtr->UserID = v; }
ImGuiID wrap_ImGuiTableColumn_GetUserID(ImGuiTableColumn *self) { return self->UserID; }
void wrap_ImGuiTableColumn_SetWorkMinX(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->WorkMinX = v; }
float wrap_ImGuiTableColumn_GetWorkMinX(ImGuiTableColumn *self) { return self->WorkMinX; }
void wrap_ImGuiTableColumn_SetWorkMaxX(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->WorkMaxX = v; }
float wrap_ImGuiTableColumn_GetWorkMaxX(ImGuiTableColumn *self) { return self->WorkMaxX; }
void wrap_ImGuiTableColumn_SetItemWidth(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->ItemWidth = v; }
float wrap_ImGuiTableColumn_GetItemWidth(ImGuiTableColumn *self) { return self->ItemWidth; }
void wrap_ImGuiTableColumn_SetContentMaxXFrozen(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->ContentMaxXFrozen = v; }
float wrap_ImGuiTableColumn_GetContentMaxXFrozen(ImGuiTableColumn *self) { return self->ContentMaxXFrozen; }
void wrap_ImGuiTableColumn_SetContentMaxXUnfrozen(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->ContentMaxXUnfrozen = v; }
float wrap_ImGuiTableColumn_GetContentMaxXUnfrozen(ImGuiTableColumn *self) { return self->ContentMaxXUnfrozen; }
void wrap_ImGuiTableColumn_SetContentMaxXHeadersUsed(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->ContentMaxXHeadersUsed = v; }
float wrap_ImGuiTableColumn_GetContentMaxXHeadersUsed(ImGuiTableColumn *self) { return self->ContentMaxXHeadersUsed; }
void wrap_ImGuiTableColumn_SetContentMaxXHeadersIdeal(ImGuiTableColumn *ImGuiTableColumnPtr, float v) { ImGuiTableColumnPtr->ContentMaxXHeadersIdeal = v; }
float wrap_ImGuiTableColumn_GetContentMaxXHeadersIdeal(ImGuiTableColumn *self) { return self->ContentMaxXHeadersIdeal; }
void wrap_ImGuiTableColumn_SetNameOffset(ImGuiTableColumn *ImGuiTableColumnPtr, ImS16 v) { ImGuiTableColumnPtr->NameOffset = v; }
ImS16 wrap_ImGuiTableColumn_GetNameOffset(ImGuiTableColumn *self) { return self->NameOffset; }
void wrap_ImGuiTableColumn_SetDisplayOrder(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnPtr->DisplayOrder = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumn_GetDisplayOrder(ImGuiTableColumn *self) { return self->DisplayOrder; }
void wrap_ImGuiTableColumn_SetIndexWithinEnabledSet(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnPtr->IndexWithinEnabledSet = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumn_GetIndexWithinEnabledSet(ImGuiTableColumn *self) { return self->IndexWithinEnabledSet; }
void wrap_ImGuiTableColumn_SetPrevEnabledColumn(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnPtr->PrevEnabledColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumn_GetPrevEnabledColumn(ImGuiTableColumn *self) { return self->PrevEnabledColumn; }
void wrap_ImGuiTableColumn_SetNextEnabledColumn(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnPtr->NextEnabledColumn = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumn_GetNextEnabledColumn(ImGuiTableColumn *self) { return self->NextEnabledColumn; }
void wrap_ImGuiTableColumn_SetSortOrder(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnPtr->SortOrder = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumn_GetSortOrder(ImGuiTableColumn *self) { return self->SortOrder; }
void wrap_ImGuiTableColumn_SetDrawChannelCurrent(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableDrawChannelIdx v) { ImGuiTableColumnPtr->DrawChannelCurrent = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTableColumn_GetDrawChannelCurrent(ImGuiTableColumn *self) { return self->DrawChannelCurrent; }
void wrap_ImGuiTableColumn_SetDrawChannelFrozen(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableDrawChannelIdx v) { ImGuiTableColumnPtr->DrawChannelFrozen = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTableColumn_GetDrawChannelFrozen(ImGuiTableColumn *self) { return self->DrawChannelFrozen; }
void wrap_ImGuiTableColumn_SetDrawChannelUnfrozen(ImGuiTableColumn *ImGuiTableColumnPtr, ImGuiTableDrawChannelIdx v) { ImGuiTableColumnPtr->DrawChannelUnfrozen = v; }
ImGuiTableDrawChannelIdx wrap_ImGuiTableColumn_GetDrawChannelUnfrozen(ImGuiTableColumn *self) { return self->DrawChannelUnfrozen; }
void wrap_ImGuiTableColumn_SetIsEnabled(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsEnabled = v; }
bool wrap_ImGuiTableColumn_GetIsEnabled(ImGuiTableColumn *self) { return self->IsEnabled; }
void wrap_ImGuiTableColumn_SetIsUserEnabled(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsUserEnabled = v; }
bool wrap_ImGuiTableColumn_GetIsUserEnabled(ImGuiTableColumn *self) { return self->IsUserEnabled; }
void wrap_ImGuiTableColumn_SetIsUserEnabledNextFrame(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsUserEnabledNextFrame = v; }
bool wrap_ImGuiTableColumn_GetIsUserEnabledNextFrame(ImGuiTableColumn *self) { return self->IsUserEnabledNextFrame; }
void wrap_ImGuiTableColumn_SetIsVisibleX(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsVisibleX = v; }
bool wrap_ImGuiTableColumn_GetIsVisibleX(ImGuiTableColumn *self) { return self->IsVisibleX; }
void wrap_ImGuiTableColumn_SetIsVisibleY(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsVisibleY = v; }
bool wrap_ImGuiTableColumn_GetIsVisibleY(ImGuiTableColumn *self) { return self->IsVisibleY; }
void wrap_ImGuiTableColumn_SetIsRequestOutput(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsRequestOutput = v; }
bool wrap_ImGuiTableColumn_GetIsRequestOutput(ImGuiTableColumn *self) { return self->IsRequestOutput; }
void wrap_ImGuiTableColumn_SetIsSkipItems(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsSkipItems = v; }
bool wrap_ImGuiTableColumn_GetIsSkipItems(ImGuiTableColumn *self) { return self->IsSkipItems; }
void wrap_ImGuiTableColumn_SetIsPreserveWidthAuto(ImGuiTableColumn *ImGuiTableColumnPtr, bool v) { ImGuiTableColumnPtr->IsPreserveWidthAuto = v; }
bool wrap_ImGuiTableColumn_GetIsPreserveWidthAuto(ImGuiTableColumn *self) { return self->IsPreserveWidthAuto; }
void wrap_ImGuiTableColumn_SetNavLayerCurrent(ImGuiTableColumn *ImGuiTableColumnPtr, ImS8 v) { ImGuiTableColumnPtr->NavLayerCurrent = v; }
ImS8 wrap_ImGuiTableColumn_GetNavLayerCurrent(ImGuiTableColumn *self) { return self->NavLayerCurrent; }
void wrap_ImGuiTableColumn_SetAutoFitQueue(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->AutoFitQueue = v; }
ImU8 wrap_ImGuiTableColumn_GetAutoFitQueue(ImGuiTableColumn *self) { return self->AutoFitQueue; }
void wrap_ImGuiTableColumn_SetCannotSkipItemsQueue(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->CannotSkipItemsQueue = v; }
ImU8 wrap_ImGuiTableColumn_GetCannotSkipItemsQueue(ImGuiTableColumn *self) { return self->CannotSkipItemsQueue; }
void wrap_ImGuiTableColumn_SetSortDirection(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->SortDirection = v; }
ImU8 wrap_ImGuiTableColumn_GetSortDirection(ImGuiTableColumn *self) { return self->SortDirection; }
void wrap_ImGuiTableColumn_SetSortDirectionsAvailCount(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->SortDirectionsAvailCount = v; }
ImU8 wrap_ImGuiTableColumn_GetSortDirectionsAvailCount(ImGuiTableColumn *self) { return self->SortDirectionsAvailCount; }
void wrap_ImGuiTableColumn_SetSortDirectionsAvailMask(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->SortDirectionsAvailMask = v; }
ImU8 wrap_ImGuiTableColumn_GetSortDirectionsAvailMask(ImGuiTableColumn *self) { return self->SortDirectionsAvailMask; }
void wrap_ImGuiTableColumn_SetSortDirectionsAvailList(ImGuiTableColumn *ImGuiTableColumnPtr, ImU8 v) { ImGuiTableColumnPtr->SortDirectionsAvailList = v; }
ImU8 wrap_ImGuiTableColumn_GetSortDirectionsAvailList(ImGuiTableColumn *self) { return self->SortDirectionsAvailList; }
void wrap_ImGuiTableColumnSettings_SetWidthOrWeight(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, float v) { ImGuiTableColumnSettingsPtr->WidthOrWeight = v; }
float wrap_ImGuiTableColumnSettings_GetWidthOrWeight(ImGuiTableColumnSettings *self) { return self->WidthOrWeight; }
void wrap_ImGuiTableColumnSettings_SetUserID(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImGuiID v) { ImGuiTableColumnSettingsPtr->UserID = v; }
ImGuiID wrap_ImGuiTableColumnSettings_GetUserID(ImGuiTableColumnSettings *self) { return self->UserID; }
void wrap_ImGuiTableColumnSettings_SetIndex(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnSettingsPtr->Index = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumnSettings_GetIndex(ImGuiTableColumnSettings *self) { return self->Index; }
void wrap_ImGuiTableColumnSettings_SetDisplayOrder(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnSettingsPtr->DisplayOrder = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumnSettings_GetDisplayOrder(ImGuiTableColumnSettings *self) { return self->DisplayOrder; }
void wrap_ImGuiTableColumnSettings_SetSortOrder(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImGuiTableColumnIdx v) { ImGuiTableColumnSettingsPtr->SortOrder = v; }
ImGuiTableColumnIdx wrap_ImGuiTableColumnSettings_GetSortOrder(ImGuiTableColumnSettings *self) { return self->SortOrder; }
void wrap_ImGuiTableColumnSettings_SetSortDirection(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImU8 v) { ImGuiTableColumnSettingsPtr->SortDirection = v; }
ImU8 wrap_ImGuiTableColumnSettings_GetSortDirection(ImGuiTableColumnSettings *self) { return self->SortDirection; }
void wrap_ImGuiTableColumnSettings_SetIsEnabled(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImU8 v) { ImGuiTableColumnSettingsPtr->IsEnabled = v; }
ImU8 wrap_ImGuiTableColumnSettings_GetIsEnabled(ImGuiTableColumnSettings *self) { return self->IsEnabled; }
void wrap_ImGuiTableColumnSettings_SetIsStretch(ImGuiTableColumnSettings *ImGuiTableColumnSettingsPtr, ImU8 v) { ImGuiTableColumnSettingsPtr->IsStretch = v; }
ImU8 wrap_ImGuiTableColumnSettings_GetIsStretch(ImGuiTableColumnSettings *self) { return self->IsStretch; }
void wrap_ImGuiTableColumnSortSpecs_SetColumnUserID(ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecsPtr, ImGuiID v) { ImGuiTableColumnSortSpecsPtr->ColumnUserID = v; }
ImGuiID wrap_ImGuiTableColumnSortSpecs_GetColumnUserID(ImGuiTableColumnSortSpecs *self) { return self->ColumnUserID; }
void wrap_ImGuiTableColumnSortSpecs_SetColumnIndex(ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecsPtr, ImS16 v) { ImGuiTableColumnSortSpecsPtr->ColumnIndex = v; }
ImS16 wrap_ImGuiTableColumnSortSpecs_GetColumnIndex(ImGuiTableColumnSortSpecs *self) { return self->ColumnIndex; }
void wrap_ImGuiTableColumnSortSpecs_SetSortOrder(ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecsPtr, ImS16 v) { ImGuiTableColumnSortSpecsPtr->SortOrder = v; }
ImS16 wrap_ImGuiTableColumnSortSpecs_GetSortOrder(ImGuiTableColumnSortSpecs *self) { return self->SortOrder; }
void wrap_ImGuiTableColumnSortSpecs_SetSortDirection(ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecsPtr, ImGuiSortDirection v) { ImGuiTableColumnSortSpecsPtr->SortDirection = v; }
ImGuiSortDirection wrap_ImGuiTableColumnSortSpecs_GetSortDirection(ImGuiTableColumnSortSpecs *self) { return self->SortDirection; }
void wrap_ImGuiTableInstanceData_SetTableInstanceID(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, ImGuiID v) { ImGuiTableInstanceDataPtr->TableInstanceID = v; }
ImGuiID wrap_ImGuiTableInstanceData_GetTableInstanceID(ImGuiTableInstanceData *self) { return self->TableInstanceID; }
void wrap_ImGuiTableInstanceData_SetLastOuterHeight(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, float v) { ImGuiTableInstanceDataPtr->LastOuterHeight = v; }
float wrap_ImGuiTableInstanceData_GetLastOuterHeight(ImGuiTableInstanceData *self) { return self->LastOuterHeight; }
void wrap_ImGuiTableInstanceData_SetLastTopHeadersRowHeight(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, float v) { ImGuiTableInstanceDataPtr->LastTopHeadersRowHeight = v; }
float wrap_ImGuiTableInstanceData_GetLastTopHeadersRowHeight(ImGuiTableInstanceData *self) { return self->LastTopHeadersRowHeight; }
void wrap_ImGuiTableInstanceData_SetLastFrozenHeight(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, float v) { ImGuiTableInstanceDataPtr->LastFrozenHeight = v; }
float wrap_ImGuiTableInstanceData_GetLastFrozenHeight(ImGuiTableInstanceData *self) { return self->LastFrozenHeight; }
void wrap_ImGuiTableInstanceData_SetHoveredRowLast(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, int v) { ImGuiTableInstanceDataPtr->HoveredRowLast = v; }
int wrap_ImGuiTableInstanceData_GetHoveredRowLast(ImGuiTableInstanceData *self) { return self->HoveredRowLast; }
void wrap_ImGuiTableInstanceData_SetHoveredRowNext(ImGuiTableInstanceData *ImGuiTableInstanceDataPtr, int v) { ImGuiTableInstanceDataPtr->HoveredRowNext = v; }
int wrap_ImGuiTableInstanceData_GetHoveredRowNext(ImGuiTableInstanceData *self) { return self->HoveredRowNext; }
void wrap_ImGuiTableSettings_SetID(ImGuiTableSettings *ImGuiTableSettingsPtr, ImGuiID v) { ImGuiTableSettingsPtr->ID = v; }
ImGuiID wrap_ImGuiTableSettings_GetID(ImGuiTableSettings *self) { return self->ID; }
void wrap_ImGuiTableSettings_SetSaveFlags(ImGuiTableSettings *ImGuiTableSettingsPtr, ImGuiTableFlags v) { ImGuiTableSettingsPtr->SaveFlags = v; }
ImGuiTableFlags wrap_ImGuiTableSettings_GetSaveFlags(ImGuiTableSettings *self) { return self->SaveFlags; }
void wrap_ImGuiTableSettings_SetRefScale(ImGuiTableSettings *ImGuiTableSettingsPtr, float v) { ImGuiTableSettingsPtr->RefScale = v; }
float wrap_ImGuiTableSettings_GetRefScale(ImGuiTableSettings *self) { return self->RefScale; }
void wrap_ImGuiTableSettings_SetColumnsCount(ImGuiTableSettings *ImGuiTableSettingsPtr, ImGuiTableColumnIdx v) { ImGuiTableSettingsPtr->ColumnsCount = v; }
ImGuiTableColumnIdx wrap_ImGuiTableSettings_GetColumnsCount(ImGuiTableSettings *self) { return self->ColumnsCount; }
void wrap_ImGuiTableSettings_SetColumnsCountMax(ImGuiTableSettings *ImGuiTableSettingsPtr, ImGuiTableColumnIdx v) { ImGuiTableSettingsPtr->ColumnsCountMax = v; }
ImGuiTableColumnIdx wrap_ImGuiTableSettings_GetColumnsCountMax(ImGuiTableSettings *self) { return self->ColumnsCountMax; }
void wrap_ImGuiTableSettings_SetWantApply(ImGuiTableSettings *ImGuiTableSettingsPtr, bool v) { ImGuiTableSettingsPtr->WantApply = v; }
bool wrap_ImGuiTableSettings_GetWantApply(ImGuiTableSettings *self) { return self->WantApply; }
void wrap_ImGuiTableSortSpecs_SetSpecs(ImGuiTableSortSpecs *ImGuiTableSortSpecsPtr, const ImGuiTableColumnSortSpecs* v) { ImGuiTableSortSpecsPtr->Specs = v; }
const ImGuiTableColumnSortSpecs* wrap_ImGuiTableSortSpecs_GetSpecs(ImGuiTableSortSpecs *self) { return self->Specs; }
void wrap_ImGuiTableSortSpecs_SetSpecsCount(ImGuiTableSortSpecs *ImGuiTableSortSpecsPtr, int v) { ImGuiTableSortSpecsPtr->SpecsCount = v; }
int wrap_ImGuiTableSortSpecs_GetSpecsCount(ImGuiTableSortSpecs *self) { return self->SpecsCount; }
void wrap_ImGuiTableSortSpecs_SetSpecsDirty(ImGuiTableSortSpecs *ImGuiTableSortSpecsPtr, bool v) { ImGuiTableSortSpecsPtr->SpecsDirty = v; }
bool wrap_ImGuiTableSortSpecs_GetSpecsDirty(ImGuiTableSortSpecs *self) { return self->SpecsDirty; }
void wrap_ImGuiTableTempData_SetTableIndex(ImGuiTableTempData *ImGuiTableTempDataPtr, int v) { ImGuiTableTempDataPtr->TableIndex = v; }
int wrap_ImGuiTableTempData_GetTableIndex(ImGuiTableTempData *self) { return self->TableIndex; }
void wrap_ImGuiTableTempData_SetLastTimeActive(ImGuiTableTempData *ImGuiTableTempDataPtr, float v) { ImGuiTableTempDataPtr->LastTimeActive = v; }
float wrap_ImGuiTableTempData_GetLastTimeActive(ImGuiTableTempData *self) { return self->LastTimeActive; }
void wrap_ImGuiTableTempData_SetAngledHeadersExtraWidth(ImGuiTableTempData *ImGuiTableTempDataPtr, float v) { ImGuiTableTempDataPtr->AngledHeadersExtraWidth = v; }
float wrap_ImGuiTableTempData_GetAngledHeadersExtraWidth(ImGuiTableTempData *self) { return self->AngledHeadersExtraWidth; }
void wrap_ImGuiTableTempData_SetUserOuterSize(ImGuiTableTempData *ImGuiTableTempDataPtr, ImVec2 v) { ImGuiTableTempDataPtr->UserOuterSize = v; }
ImVec2 wrap_ImGuiTableTempData_GetUserOuterSize(ImGuiTableTempData *self) { return self->UserOuterSize; }
void wrap_ImGuiTableTempData_SetDrawSplitter(ImGuiTableTempData *ImGuiTableTempDataPtr, ImDrawListSplitter v) { ImGuiTableTempDataPtr->DrawSplitter = v; }
ImDrawListSplitter wrap_ImGuiTableTempData_GetDrawSplitter(ImGuiTableTempData *self) { return self->DrawSplitter; }
void wrap_ImGuiTableTempData_SetHostBackupWorkRect(ImGuiTableTempData *ImGuiTableTempDataPtr, ImRect v) { ImGuiTableTempDataPtr->HostBackupWorkRect = v; }
ImRect wrap_ImGuiTableTempData_GetHostBackupWorkRect(ImGuiTableTempData *self) { return self->HostBackupWorkRect; }
void wrap_ImGuiTableTempData_SetHostBackupParentWorkRect(ImGuiTableTempData *ImGuiTableTempDataPtr, ImRect v) { ImGuiTableTempDataPtr->HostBackupParentWorkRect = v; }
ImRect wrap_ImGuiTableTempData_GetHostBackupParentWorkRect(ImGuiTableTempData *self) { return self->HostBackupParentWorkRect; }
void wrap_ImGuiTableTempData_SetHostBackupPrevLineSize(ImGuiTableTempData *ImGuiTableTempDataPtr, ImVec2 v) { ImGuiTableTempDataPtr->HostBackupPrevLineSize = v; }
ImVec2 wrap_ImGuiTableTempData_GetHostBackupPrevLineSize(ImGuiTableTempData *self) { return self->HostBackupPrevLineSize; }
void wrap_ImGuiTableTempData_SetHostBackupCurrLineSize(ImGuiTableTempData *ImGuiTableTempDataPtr, ImVec2 v) { ImGuiTableTempDataPtr->HostBackupCurrLineSize = v; }
ImVec2 wrap_ImGuiTableTempData_GetHostBackupCurrLineSize(ImGuiTableTempData *self) { return self->HostBackupCurrLineSize; }
void wrap_ImGuiTableTempData_SetHostBackupCursorMaxPos(ImGuiTableTempData *ImGuiTableTempDataPtr, ImVec2 v) { ImGuiTableTempDataPtr->HostBackupCursorMaxPos = v; }
ImVec2 wrap_ImGuiTableTempData_GetHostBackupCursorMaxPos(ImGuiTableTempData *self) { return self->HostBackupCursorMaxPos; }
void wrap_ImGuiTableTempData_SetHostBackupColumnsOffset(ImGuiTableTempData *ImGuiTableTempDataPtr, ImVec1 v) { ImGuiTableTempDataPtr->HostBackupColumnsOffset = v; }
ImVec1 wrap_ImGuiTableTempData_GetHostBackupColumnsOffset(ImGuiTableTempData *self) { return self->HostBackupColumnsOffset; }
void wrap_ImGuiTableTempData_SetHostBackupItemWidth(ImGuiTableTempData *ImGuiTableTempDataPtr, float v) { ImGuiTableTempDataPtr->HostBackupItemWidth = v; }
float wrap_ImGuiTableTempData_GetHostBackupItemWidth(ImGuiTableTempData *self) { return self->HostBackupItemWidth; }
void wrap_ImGuiTableTempData_SetHostBackupItemWidthStackSize(ImGuiTableTempData *ImGuiTableTempDataPtr, int v) { ImGuiTableTempDataPtr->HostBackupItemWidthStackSize = v; }
int wrap_ImGuiTableTempData_GetHostBackupItemWidthStackSize(ImGuiTableTempData *self) { return self->HostBackupItemWidthStackSize; }
void wrap_ImGuiTextBuffer_SetBuf(ImGuiTextBuffer *ImGuiTextBufferPtr, ImVector_char v) { ImGuiTextBufferPtr->Buf = v; }
ImVector_char wrap_ImGuiTextBuffer_GetBuf(ImGuiTextBuffer *self) { return self->Buf; }
void wrap_ImGuiTextFilter_SetInputBuf(ImGuiTextFilter *ImGuiTextFilterPtr, char* v) { memcpy(ImGuiTextFilterPtr->InputBuf, v, sizeof(char)*256); }
char* wrap_ImGuiTextFilter_GetInputBuf(ImGuiTextFilter *self) { return self->InputBuf; }
void wrap_ImGuiTextFilter_SetFilters(ImGuiTextFilter *ImGuiTextFilterPtr, ImVector_ImGuiTextRange v) { ImGuiTextFilterPtr->Filters = v; }
ImVector_ImGuiTextRange wrap_ImGuiTextFilter_GetFilters(ImGuiTextFilter *self) { return self->Filters; }
void wrap_ImGuiTextFilter_SetCountGrep(ImGuiTextFilter *ImGuiTextFilterPtr, int v) { ImGuiTextFilterPtr->CountGrep = v; }
int wrap_ImGuiTextFilter_GetCountGrep(ImGuiTextFilter *self) { return self->CountGrep; }
void wrap_ImGuiTextIndex_SetLineOffsets(ImGuiTextIndex *ImGuiTextIndexPtr, ImVector_int v) { ImGuiTextIndexPtr->LineOffsets = v; }
ImVector_int wrap_ImGuiTextIndex_GetLineOffsets(ImGuiTextIndex *self) { return self->LineOffsets; }
void wrap_ImGuiTextIndex_SetEndOffset(ImGuiTextIndex *ImGuiTextIndexPtr, int v) { ImGuiTextIndexPtr->EndOffset = v; }
int wrap_ImGuiTextIndex_GetEndOffset(ImGuiTextIndex *self) { return self->EndOffset; }
void wrap_ImGuiTextRange_SetB(ImGuiTextRange *ImGuiTextRangePtr, const char* v) { ImGuiTextRangePtr->b = v; }
const char* wrap_ImGuiTextRange_GetB(ImGuiTextRange *self) { return self->b; }
void wrap_ImGuiTextRange_SetE(ImGuiTextRange *ImGuiTextRangePtr, const char* v) { ImGuiTextRangePtr->e = v; }
const char* wrap_ImGuiTextRange_GetE(ImGuiTextRange *self) { return self->e; }
void wrap_ImGuiTypingSelectRequest_SetFlags(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, ImGuiTypingSelectFlags v) { ImGuiTypingSelectRequestPtr->Flags = v; }
ImGuiTypingSelectFlags wrap_ImGuiTypingSelectRequest_GetFlags(ImGuiTypingSelectRequest *self) { return self->Flags; }
void wrap_ImGuiTypingSelectRequest_SetSearchBufferLen(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, int v) { ImGuiTypingSelectRequestPtr->SearchBufferLen = v; }
int wrap_ImGuiTypingSelectRequest_GetSearchBufferLen(ImGuiTypingSelectRequest *self) { return self->SearchBufferLen; }
void wrap_ImGuiTypingSelectRequest_SetSearchBuffer(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, const char* v) { ImGuiTypingSelectRequestPtr->SearchBuffer = v; }
const char* wrap_ImGuiTypingSelectRequest_GetSearchBuffer(ImGuiTypingSelectRequest *self) { return self->SearchBuffer; }
void wrap_ImGuiTypingSelectRequest_SetSelectRequest(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, bool v) { ImGuiTypingSelectRequestPtr->SelectRequest = v; }
bool wrap_ImGuiTypingSelectRequest_GetSelectRequest(ImGuiTypingSelectRequest *self) { return self->SelectRequest; }
void wrap_ImGuiTypingSelectRequest_SetSingleCharMode(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, bool v) { ImGuiTypingSelectRequestPtr->SingleCharMode = v; }
bool wrap_ImGuiTypingSelectRequest_GetSingleCharMode(ImGuiTypingSelectRequest *self) { return self->SingleCharMode; }
void wrap_ImGuiTypingSelectRequest_SetSingleCharSize(ImGuiTypingSelectRequest *ImGuiTypingSelectRequestPtr, ImS8 v) { ImGuiTypingSelectRequestPtr->SingleCharSize = v; }
ImS8 wrap_ImGuiTypingSelectRequest_GetSingleCharSize(ImGuiTypingSelectRequest *self) { return self->SingleCharSize; }
void wrap_ImGuiTypingSelectState_SetRequest(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, ImGuiTypingSelectRequest v) { ImGuiTypingSelectStatePtr->Request = v; }
ImGuiTypingSelectRequest wrap_ImGuiTypingSelectState_GetRequest(ImGuiTypingSelectState *self) { return self->Request; }
void wrap_ImGuiTypingSelectState_SetSearchBuffer(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, char* v) { memcpy(ImGuiTypingSelectStatePtr->SearchBuffer, v, sizeof(char)*64); }
char* wrap_ImGuiTypingSelectState_GetSearchBuffer(ImGuiTypingSelectState *self) { return self->SearchBuffer; }
void wrap_ImGuiTypingSelectState_SetFocusScope(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, ImGuiID v) { ImGuiTypingSelectStatePtr->FocusScope = v; }
ImGuiID wrap_ImGuiTypingSelectState_GetFocusScope(ImGuiTypingSelectState *self) { return self->FocusScope; }
void wrap_ImGuiTypingSelectState_SetLastRequestFrame(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, int v) { ImGuiTypingSelectStatePtr->LastRequestFrame = v; }
int wrap_ImGuiTypingSelectState_GetLastRequestFrame(ImGuiTypingSelectState *self) { return self->LastRequestFrame; }
void wrap_ImGuiTypingSelectState_SetLastRequestTime(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, float v) { ImGuiTypingSelectStatePtr->LastRequestTime = v; }
float wrap_ImGuiTypingSelectState_GetLastRequestTime(ImGuiTypingSelectState *self) { return self->LastRequestTime; }
void wrap_ImGuiTypingSelectState_SetSingleCharModeLock(ImGuiTypingSelectState *ImGuiTypingSelectStatePtr, bool v) { ImGuiTypingSelectStatePtr->SingleCharModeLock = v; }
bool wrap_ImGuiTypingSelectState_GetSingleCharModeLock(ImGuiTypingSelectState *self) { return self->SingleCharModeLock; }
void wrap_ImGuiViewport_SetID(ImGuiViewport *ImGuiViewportPtr, ImGuiID v) { ImGuiViewportPtr->ID = v; }
ImGuiID wrap_ImGuiViewport_GetID(ImGuiViewport *self) { return self->ID; }
void wrap_ImGuiViewport_SetFlags(ImGuiViewport *ImGuiViewportPtr, ImGuiViewportFlags v) { ImGuiViewportPtr->Flags = v; }
ImGuiViewportFlags wrap_ImGuiViewport_GetFlags(ImGuiViewport *self) { return self->Flags; }
void wrap_ImGuiViewport_SetPos(ImGuiViewport *ImGuiViewportPtr, ImVec2 v) { ImGuiViewportPtr->Pos = v; }
ImVec2 wrap_ImGuiViewport_GetPos(ImGuiViewport *self) { return self->Pos; }
void wrap_ImGuiViewport_SetSize(ImGuiViewport *ImGuiViewportPtr, ImVec2 v) { ImGuiViewportPtr->Size = v; }
ImVec2 wrap_ImGuiViewport_GetSize(ImGuiViewport *self) { return self->Size; }
void wrap_ImGuiViewport_SetWorkPos(ImGuiViewport *ImGuiViewportPtr, ImVec2 v) { ImGuiViewportPtr->WorkPos = v; }
ImVec2 wrap_ImGuiViewport_GetWorkPos(ImGuiViewport *self) { return self->WorkPos; }
void wrap_ImGuiViewport_SetWorkSize(ImGuiViewport *ImGuiViewportPtr, ImVec2 v) { ImGuiViewportPtr->WorkSize = v; }
ImVec2 wrap_ImGuiViewport_GetWorkSize(ImGuiViewport *self) { return self->WorkSize; }
void wrap_ImGuiViewport_SetDpiScale(ImGuiViewport *ImGuiViewportPtr, float v) { ImGuiViewportPtr->DpiScale = v; }
float wrap_ImGuiViewport_GetDpiScale(ImGuiViewport *self) { return self->DpiScale; }
void wrap_ImGuiViewport_SetParentViewportId(ImGuiViewport *ImGuiViewportPtr, ImGuiID v) { ImGuiViewportPtr->ParentViewportId = v; }
ImGuiID wrap_ImGuiViewport_GetParentViewportId(ImGuiViewport *self) { return self->ParentViewportId; }
void wrap_ImGuiViewport_SetDrawData(ImGuiViewport *ImGuiViewportPtr, ImDrawData* v) { ImGuiViewportPtr->DrawData = v; }
ImDrawData* wrap_ImGuiViewport_GetDrawData(ImGuiViewport *self) { return self->DrawData; }
void wrap_ImGuiViewport_SetRendererUserData(ImGuiViewport *ImGuiViewportPtr, uintptr_t v) { ImGuiViewportPtr->RendererUserData = (void*)v; }
uintptr_t wrap_ImGuiViewport_GetRendererUserData(ImGuiViewport *self) { return (uintptr_t)self->RendererUserData; }
void wrap_ImGuiViewport_SetPlatformUserData(ImGuiViewport *ImGuiViewportPtr, uintptr_t v) { ImGuiViewportPtr->PlatformUserData = (void*)v; }
uintptr_t wrap_ImGuiViewport_GetPlatformUserData(ImGuiViewport *self) { return (uintptr_t)self->PlatformUserData; }
void wrap_ImGuiViewport_SetPlatformHandle(ImGuiViewport *ImGuiViewportPtr, uintptr_t v) { ImGuiViewportPtr->PlatformHandle = (void*)v; }
uintptr_t wrap_ImGuiViewport_GetPlatformHandle(ImGuiViewport *self) { return (uintptr_t)self->PlatformHandle; }
void wrap_ImGuiViewport_SetPlatformHandleRaw(ImGuiViewport *ImGuiViewportPtr, uintptr_t v) { ImGuiViewportPtr->PlatformHandleRaw = (void*)v; }
uintptr_t wrap_ImGuiViewport_GetPlatformHandleRaw(ImGuiViewport *self) { return (uintptr_t)self->PlatformHandleRaw; }
void wrap_ImGuiViewport_SetPlatformWindowCreated(ImGuiViewport *ImGuiViewportPtr, bool v) { ImGuiViewportPtr->PlatformWindowCreated = v; }
bool wrap_ImGuiViewport_GetPlatformWindowCreated(ImGuiViewport *self) { return self->PlatformWindowCreated; }
void wrap_ImGuiViewport_SetPlatformRequestMove(ImGuiViewport *ImGuiViewportPtr, bool v) { ImGuiViewportPtr->PlatformRequestMove = v; }
bool wrap_ImGuiViewport_GetPlatformRequestMove(ImGuiViewport *self) { return self->PlatformRequestMove; }
void wrap_ImGuiViewport_SetPlatformRequestResize(ImGuiViewport *ImGuiViewportPtr, bool v) { ImGuiViewportPtr->PlatformRequestResize = v; }
bool wrap_ImGuiViewport_GetPlatformRequestResize(ImGuiViewport *self) { return self->PlatformRequestResize; }
void wrap_ImGuiViewport_SetPlatformRequestClose(ImGuiViewport *ImGuiViewportPtr, bool v) { ImGuiViewportPtr->PlatformRequestClose = v; }
bool wrap_ImGuiViewport_GetPlatformRequestClose(ImGuiViewport *self) { return self->PlatformRequestClose; }
void wrap_ImGuiViewportP_Set_ImGuiViewport(ImGuiViewportP *ImGuiViewportPPtr, ImGuiViewport v) { ImGuiViewportPPtr->_ImGuiViewport = v; }
ImGuiViewport wrap_ImGuiViewportP_Get_ImGuiViewport(ImGuiViewportP *self) { return self->_ImGuiViewport; }
void wrap_ImGuiViewportP_SetWindow(ImGuiViewportP *ImGuiViewportPPtr, ImGuiWindow* v) { ImGuiViewportPPtr->Window = v; }
ImGuiWindow* wrap_ImGuiViewportP_GetWindow(ImGuiViewportP *self) { return self->Window; }
void wrap_ImGuiViewportP_SetIdx(ImGuiViewportP *ImGuiViewportPPtr, int v) { ImGuiViewportPPtr->Idx = v; }
int wrap_ImGuiViewportP_GetIdx(ImGuiViewportP *self) { return self->Idx; }
void wrap_ImGuiViewportP_SetLastFrameActive(ImGuiViewportP *ImGuiViewportPPtr, int v) { ImGuiViewportPPtr->LastFrameActive = v; }
int wrap_ImGuiViewportP_GetLastFrameActive(ImGuiViewportP *self) { return self->LastFrameActive; }
void wrap_ImGuiViewportP_SetLastFocusedStampCount(ImGuiViewportP *ImGuiViewportPPtr, int v) { ImGuiViewportPPtr->LastFocusedStampCount = v; }
int wrap_ImGuiViewportP_GetLastFocusedStampCount(ImGuiViewportP *self) { return self->LastFocusedStampCount; }
void wrap_ImGuiViewportP_SetLastNameHash(ImGuiViewportP *ImGuiViewportPPtr, ImGuiID v) { ImGuiViewportPPtr->LastNameHash = v; }
ImGuiID wrap_ImGuiViewportP_GetLastNameHash(ImGuiViewportP *self) { return self->LastNameHash; }
void wrap_ImGuiViewportP_SetLastPos(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->LastPos = v; }
ImVec2 wrap_ImGuiViewportP_GetLastPos(ImGuiViewportP *self) { return self->LastPos; }
void wrap_ImGuiViewportP_SetAlpha(ImGuiViewportP *ImGuiViewportPPtr, float v) { ImGuiViewportPPtr->Alpha = v; }
float wrap_ImGuiViewportP_GetAlpha(ImGuiViewportP *self) { return self->Alpha; }
void wrap_ImGuiViewportP_SetLastAlpha(ImGuiViewportP *ImGuiViewportPPtr, float v) { ImGuiViewportPPtr->LastAlpha = v; }
float wrap_ImGuiViewportP_GetLastAlpha(ImGuiViewportP *self) { return self->LastAlpha; }
void wrap_ImGuiViewportP_SetLastFocusedHadNavWindow(ImGuiViewportP *ImGuiViewportPPtr, bool v) { ImGuiViewportPPtr->LastFocusedHadNavWindow = v; }
bool wrap_ImGuiViewportP_GetLastFocusedHadNavWindow(ImGuiViewportP *self) { return self->LastFocusedHadNavWindow; }
void wrap_ImGuiViewportP_SetPlatformMonitor(ImGuiViewportP *ImGuiViewportPPtr, short v) { ImGuiViewportPPtr->PlatformMonitor = v; }
short wrap_ImGuiViewportP_GetPlatformMonitor(ImGuiViewportP *self) { return self->PlatformMonitor; }
void wrap_ImGuiViewportP_SetBgFgDrawListsLastFrame(ImGuiViewportP *ImGuiViewportPPtr, int* v) { memcpy(ImGuiViewportPPtr->BgFgDrawListsLastFrame, v, sizeof(int)*2); }
int* wrap_ImGuiViewportP_GetBgFgDrawListsLastFrame(ImGuiViewportP *self) { return self->BgFgDrawListsLastFrame; }
int cimgui_int_GetAtIdx(int *self, int index) { return self[index]; }
void wrap_ImGuiViewportP_SetBgFgDrawLists(ImGuiViewportP *ImGuiViewportPPtr, ImDrawList** v) { memcpy(ImGuiViewportPPtr->BgFgDrawLists, v, sizeof(ImDrawList*)*2); }
ImDrawList** wrap_ImGuiViewportP_GetBgFgDrawLists(ImGuiViewportP *self) { return self->BgFgDrawLists; }
ImDrawList* cimgui_ImDrawListPtr_GetAtIdx(ImDrawList* *self, int index) { return self[index]; }
void wrap_ImGuiViewportP_SetDrawDataP(ImGuiViewportP *ImGuiViewportPPtr, ImDrawData v) { ImGuiViewportPPtr->DrawDataP = v; }
ImDrawData wrap_ImGuiViewportP_GetDrawDataP(ImGuiViewportP *self) { return self->DrawDataP; }
void wrap_ImGuiViewportP_SetDrawDataBuilder(ImGuiViewportP *ImGuiViewportPPtr, ImDrawDataBuilder v) { ImGuiViewportPPtr->DrawDataBuilder = v; }
ImDrawDataBuilder wrap_ImGuiViewportP_GetDrawDataBuilder(ImGuiViewportP *self) { return self->DrawDataBuilder; }
void wrap_ImGuiViewportP_SetLastPlatformPos(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->LastPlatformPos = v; }
ImVec2 wrap_ImGuiViewportP_GetLastPlatformPos(ImGuiViewportP *self) { return self->LastPlatformPos; }
void wrap_ImGuiViewportP_SetLastPlatformSize(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->LastPlatformSize = v; }
ImVec2 wrap_ImGuiViewportP_GetLastPlatformSize(ImGuiViewportP *self) { return self->LastPlatformSize; }
void wrap_ImGuiViewportP_SetLastRendererSize(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->LastRendererSize = v; }
ImVec2 wrap_ImGuiViewportP_GetLastRendererSize(ImGuiViewportP *self) { return self->LastRendererSize; }
void wrap_ImGuiViewportP_SetWorkOffsetMin(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->WorkOffsetMin = v; }
ImVec2 wrap_ImGuiViewportP_GetWorkOffsetMin(ImGuiViewportP *self) { return self->WorkOffsetMin; }
void wrap_ImGuiViewportP_SetWorkOffsetMax(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->WorkOffsetMax = v; }
ImVec2 wrap_ImGuiViewportP_GetWorkOffsetMax(ImGuiViewportP *self) { return self->WorkOffsetMax; }
void wrap_ImGuiViewportP_SetBuildWorkOffsetMin(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->BuildWorkOffsetMin = v; }
ImVec2 wrap_ImGuiViewportP_GetBuildWorkOffsetMin(ImGuiViewportP *self) { return self->BuildWorkOffsetMin; }
void wrap_ImGuiViewportP_SetBuildWorkOffsetMax(ImGuiViewportP *ImGuiViewportPPtr, ImVec2 v) { ImGuiViewportPPtr->BuildWorkOffsetMax = v; }
ImVec2 wrap_ImGuiViewportP_GetBuildWorkOffsetMax(ImGuiViewportP *self) { return self->BuildWorkOffsetMax; }
void wrap_ImGuiWindow_SetCtx(ImGuiWindow *ImGuiWindowPtr, ImGuiContext* v) { ImGuiWindowPtr->Ctx = v; }
ImGuiContext* wrap_ImGuiWindow_GetCtx(ImGuiWindow *self) { return self->Ctx; }
void wrap_ImGuiWindow_SetName(ImGuiWindow *ImGuiWindowPtr, char* v) { ImGuiWindowPtr->Name = v; }
char* wrap_ImGuiWindow_GetName(ImGuiWindow *self) { return self->Name; }
void wrap_ImGuiWindow_SetID(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->ID = v; }
ImGuiID wrap_ImGuiWindow_GetID(ImGuiWindow *self) { return self->ID; }
void wrap_ImGuiWindow_SetFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiWindowFlags v) { ImGuiWindowPtr->Flags = v; }
ImGuiWindowFlags wrap_ImGuiWindow_GetFlags(ImGuiWindow *self) { return self->Flags; }
void wrap_ImGuiWindow_SetFlagsPreviousFrame(ImGuiWindow *ImGuiWindowPtr, ImGuiWindowFlags v) { ImGuiWindowPtr->FlagsPreviousFrame = v; }
ImGuiWindowFlags wrap_ImGuiWindow_GetFlagsPreviousFrame(ImGuiWindow *self) { return self->FlagsPreviousFrame; }
void wrap_ImGuiWindow_SetChildFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiChildFlags v) { ImGuiWindowPtr->ChildFlags = v; }
ImGuiChildFlags wrap_ImGuiWindow_GetChildFlags(ImGuiWindow *self) { return self->ChildFlags; }
void wrap_ImGuiWindow_SetWindowClass(ImGuiWindow *ImGuiWindowPtr, ImGuiWindowClass v) { ImGuiWindowPtr->WindowClass = v; }
ImGuiWindowClass wrap_ImGuiWindow_GetWindowClass(ImGuiWindow *self) { return self->WindowClass; }
void wrap_ImGuiWindow_SetViewport(ImGuiWindow *ImGuiWindowPtr, ImGuiViewportP* v) { ImGuiWindowPtr->Viewport = v; }
ImGuiViewportP* wrap_ImGuiWindow_GetViewport(ImGuiWindow *self) { return self->Viewport; }
void wrap_ImGuiWindow_SetViewportId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->ViewportId = v; }
ImGuiID wrap_ImGuiWindow_GetViewportId(ImGuiWindow *self) { return self->ViewportId; }
void wrap_ImGuiWindow_SetViewportPos(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ViewportPos = v; }
ImVec2 wrap_ImGuiWindow_GetViewportPos(ImGuiWindow *self) { return self->ViewportPos; }
void wrap_ImGuiWindow_SetViewportAllowPlatformMonitorExtend(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->ViewportAllowPlatformMonitorExtend = v; }
int wrap_ImGuiWindow_GetViewportAllowPlatformMonitorExtend(ImGuiWindow *self) { return self->ViewportAllowPlatformMonitorExtend; }
void wrap_ImGuiWindow_SetPos(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->Pos = v; }
ImVec2 wrap_ImGuiWindow_GetPos(ImGuiWindow *self) { return self->Pos; }
void wrap_ImGuiWindow_SetSize(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->Size = v; }
ImVec2 wrap_ImGuiWindow_GetSize(ImGuiWindow *self) { return self->Size; }
void wrap_ImGuiWindow_SetSizeFull(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->SizeFull = v; }
ImVec2 wrap_ImGuiWindow_GetSizeFull(ImGuiWindow *self) { return self->SizeFull; }
void wrap_ImGuiWindow_SetContentSize(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ContentSize = v; }
ImVec2 wrap_ImGuiWindow_GetContentSize(ImGuiWindow *self) { return self->ContentSize; }
void wrap_ImGuiWindow_SetContentSizeIdeal(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ContentSizeIdeal = v; }
ImVec2 wrap_ImGuiWindow_GetContentSizeIdeal(ImGuiWindow *self) { return self->ContentSizeIdeal; }
void wrap_ImGuiWindow_SetContentSizeExplicit(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ContentSizeExplicit = v; }
ImVec2 wrap_ImGuiWindow_GetContentSizeExplicit(ImGuiWindow *self) { return self->ContentSizeExplicit; }
void wrap_ImGuiWindow_SetWindowPadding(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->WindowPadding = v; }
ImVec2 wrap_ImGuiWindow_GetWindowPadding(ImGuiWindow *self) { return self->WindowPadding; }
void wrap_ImGuiWindow_SetWindowRounding(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->WindowRounding = v; }
float wrap_ImGuiWindow_GetWindowRounding(ImGuiWindow *self) { return self->WindowRounding; }
void wrap_ImGuiWindow_SetWindowBorderSize(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->WindowBorderSize = v; }
float wrap_ImGuiWindow_GetWindowBorderSize(ImGuiWindow *self) { return self->WindowBorderSize; }
void wrap_ImGuiWindow_SetDecoOuterSizeX1(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoOuterSizeX1 = v; }
float wrap_ImGuiWindow_GetDecoOuterSizeX1(ImGuiWindow *self) { return self->DecoOuterSizeX1; }
void wrap_ImGuiWindow_SetDecoOuterSizeY1(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoOuterSizeY1 = v; }
float wrap_ImGuiWindow_GetDecoOuterSizeY1(ImGuiWindow *self) { return self->DecoOuterSizeY1; }
void wrap_ImGuiWindow_SetDecoOuterSizeX2(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoOuterSizeX2 = v; }
float wrap_ImGuiWindow_GetDecoOuterSizeX2(ImGuiWindow *self) { return self->DecoOuterSizeX2; }
void wrap_ImGuiWindow_SetDecoOuterSizeY2(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoOuterSizeY2 = v; }
float wrap_ImGuiWindow_GetDecoOuterSizeY2(ImGuiWindow *self) { return self->DecoOuterSizeY2; }
void wrap_ImGuiWindow_SetDecoInnerSizeX1(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoInnerSizeX1 = v; }
float wrap_ImGuiWindow_GetDecoInnerSizeX1(ImGuiWindow *self) { return self->DecoInnerSizeX1; }
void wrap_ImGuiWindow_SetDecoInnerSizeY1(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->DecoInnerSizeY1 = v; }
float wrap_ImGuiWindow_GetDecoInnerSizeY1(ImGuiWindow *self) { return self->DecoInnerSizeY1; }
void wrap_ImGuiWindow_SetNameBufLen(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->NameBufLen = v; }
int wrap_ImGuiWindow_GetNameBufLen(ImGuiWindow *self) { return self->NameBufLen; }
void wrap_ImGuiWindow_SetMoveId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->MoveId = v; }
ImGuiID wrap_ImGuiWindow_GetMoveId(ImGuiWindow *self) { return self->MoveId; }
void wrap_ImGuiWindow_SetTabId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->TabId = v; }
ImGuiID wrap_ImGuiWindow_GetTabId(ImGuiWindow *self) { return self->TabId; }
void wrap_ImGuiWindow_SetChildId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->ChildId = v; }
ImGuiID wrap_ImGuiWindow_GetChildId(ImGuiWindow *self) { return self->ChildId; }
void wrap_ImGuiWindow_SetScroll(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->Scroll = v; }
ImVec2 wrap_ImGuiWindow_GetScroll(ImGuiWindow *self) { return self->Scroll; }
void wrap_ImGuiWindow_SetScrollMax(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ScrollMax = v; }
ImVec2 wrap_ImGuiWindow_GetScrollMax(ImGuiWindow *self) { return self->ScrollMax; }
void wrap_ImGuiWindow_SetScrollTarget(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ScrollTarget = v; }
ImVec2 wrap_ImGuiWindow_GetScrollTarget(ImGuiWindow *self) { return self->ScrollTarget; }
void wrap_ImGuiWindow_SetScrollTargetCenterRatio(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ScrollTargetCenterRatio = v; }
ImVec2 wrap_ImGuiWindow_GetScrollTargetCenterRatio(ImGuiWindow *self) { return self->ScrollTargetCenterRatio; }
void wrap_ImGuiWindow_SetScrollTargetEdgeSnapDist(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ScrollTargetEdgeSnapDist = v; }
ImVec2 wrap_ImGuiWindow_GetScrollTargetEdgeSnapDist(ImGuiWindow *self) { return self->ScrollTargetEdgeSnapDist; }
void wrap_ImGuiWindow_SetScrollbarSizes(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->ScrollbarSizes = v; }
ImVec2 wrap_ImGuiWindow_GetScrollbarSizes(ImGuiWindow *self) { return self->ScrollbarSizes; }
void wrap_ImGuiWindow_SetScrollbarX(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->ScrollbarX = v; }
bool wrap_ImGuiWindow_GetScrollbarX(ImGuiWindow *self) { return self->ScrollbarX; }
void wrap_ImGuiWindow_SetScrollbarY(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->ScrollbarY = v; }
bool wrap_ImGuiWindow_GetScrollbarY(ImGuiWindow *self) { return self->ScrollbarY; }
void wrap_ImGuiWindow_SetViewportOwned(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->ViewportOwned = v; }
bool wrap_ImGuiWindow_GetViewportOwned(ImGuiWindow *self) { return self->ViewportOwned; }
void wrap_ImGuiWindow_SetActive(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->Active = v; }
bool wrap_ImGuiWindow_GetActive(ImGuiWindow *self) { return self->Active; }
void wrap_ImGuiWindow_SetWasActive(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->WasActive = v; }
bool wrap_ImGuiWindow_GetWasActive(ImGuiWindow *self) { return self->WasActive; }
void wrap_ImGuiWindow_SetWriteAccessed(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->WriteAccessed = v; }
bool wrap_ImGuiWindow_GetWriteAccessed(ImGuiWindow *self) { return self->WriteAccessed; }
void wrap_ImGuiWindow_SetCollapsed(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->Collapsed = v; }
bool wrap_ImGuiWindow_GetCollapsed(ImGuiWindow *self) { return self->Collapsed; }
void wrap_ImGuiWindow_SetWantCollapseToggle(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->WantCollapseToggle = v; }
bool wrap_ImGuiWindow_GetWantCollapseToggle(ImGuiWindow *self) { return self->WantCollapseToggle; }
void wrap_ImGuiWindow_SetSkipItems(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->SkipItems = v; }
bool wrap_ImGuiWindow_GetSkipItems(ImGuiWindow *self) { return self->SkipItems; }
void wrap_ImGuiWindow_SetAppearing(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->Appearing = v; }
bool wrap_ImGuiWindow_GetAppearing(ImGuiWindow *self) { return self->Appearing; }
void wrap_ImGuiWindow_SetHidden(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->Hidden = v; }
bool wrap_ImGuiWindow_GetHidden(ImGuiWindow *self) { return self->Hidden; }
void wrap_ImGuiWindow_SetIsFallbackWindow(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->IsFallbackWindow = v; }
bool wrap_ImGuiWindow_GetIsFallbackWindow(ImGuiWindow *self) { return self->IsFallbackWindow; }
void wrap_ImGuiWindow_SetIsExplicitChild(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->IsExplicitChild = v; }
bool wrap_ImGuiWindow_GetIsExplicitChild(ImGuiWindow *self) { return self->IsExplicitChild; }
void wrap_ImGuiWindow_SetHasCloseButton(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->HasCloseButton = v; }
bool wrap_ImGuiWindow_GetHasCloseButton(ImGuiWindow *self) { return self->HasCloseButton; }
void wrap_ImGuiWindow_SetResizeBorderHovered(ImGuiWindow *ImGuiWindowPtr, signed char v) { ImGuiWindowPtr->ResizeBorderHovered = v; }
signed char wrap_ImGuiWindow_GetResizeBorderHovered(ImGuiWindow *self) { return self->ResizeBorderHovered; }
void wrap_ImGuiWindow_SetResizeBorderHeld(ImGuiWindow *ImGuiWindowPtr, signed char v) { ImGuiWindowPtr->ResizeBorderHeld = v; }
signed char wrap_ImGuiWindow_GetResizeBorderHeld(ImGuiWindow *self) { return self->ResizeBorderHeld; }
void wrap_ImGuiWindow_SetBeginCount(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->BeginCount = v; }
short wrap_ImGuiWindow_GetBeginCount(ImGuiWindow *self) { return self->BeginCount; }
void wrap_ImGuiWindow_SetBeginCountPreviousFrame(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->BeginCountPreviousFrame = v; }
short wrap_ImGuiWindow_GetBeginCountPreviousFrame(ImGuiWindow *self) { return self->BeginCountPreviousFrame; }
void wrap_ImGuiWindow_SetBeginOrderWithinParent(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->BeginOrderWithinParent = v; }
short wrap_ImGuiWindow_GetBeginOrderWithinParent(ImGuiWindow *self) { return self->BeginOrderWithinParent; }
void wrap_ImGuiWindow_SetBeginOrderWithinContext(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->BeginOrderWithinContext = v; }
short wrap_ImGuiWindow_GetBeginOrderWithinContext(ImGuiWindow *self) { return self->BeginOrderWithinContext; }
void wrap_ImGuiWindow_SetFocusOrder(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->FocusOrder = v; }
short wrap_ImGuiWindow_GetFocusOrder(ImGuiWindow *self) { return self->FocusOrder; }
void wrap_ImGuiWindow_SetPopupId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->PopupId = v; }
ImGuiID wrap_ImGuiWindow_GetPopupId(ImGuiWindow *self) { return self->PopupId; }
void wrap_ImGuiWindow_SetAutoFitFramesX(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->AutoFitFramesX = v; }
ImS8 wrap_ImGuiWindow_GetAutoFitFramesX(ImGuiWindow *self) { return self->AutoFitFramesX; }
void wrap_ImGuiWindow_SetAutoFitFramesY(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->AutoFitFramesY = v; }
ImS8 wrap_ImGuiWindow_GetAutoFitFramesY(ImGuiWindow *self) { return self->AutoFitFramesY; }
void wrap_ImGuiWindow_SetAutoFitOnlyGrows(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->AutoFitOnlyGrows = v; }
bool wrap_ImGuiWindow_GetAutoFitOnlyGrows(ImGuiWindow *self) { return self->AutoFitOnlyGrows; }
void wrap_ImGuiWindow_SetAutoPosLastDirection(ImGuiWindow *ImGuiWindowPtr, ImGuiDir v) { ImGuiWindowPtr->AutoPosLastDirection = v; }
ImGuiDir wrap_ImGuiWindow_GetAutoPosLastDirection(ImGuiWindow *self) { return self->AutoPosLastDirection; }
void wrap_ImGuiWindow_SetHiddenFramesCanSkipItems(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->HiddenFramesCanSkipItems = v; }
ImS8 wrap_ImGuiWindow_GetHiddenFramesCanSkipItems(ImGuiWindow *self) { return self->HiddenFramesCanSkipItems; }
void wrap_ImGuiWindow_SetHiddenFramesCannotSkipItems(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->HiddenFramesCannotSkipItems = v; }
ImS8 wrap_ImGuiWindow_GetHiddenFramesCannotSkipItems(ImGuiWindow *self) { return self->HiddenFramesCannotSkipItems; }
void wrap_ImGuiWindow_SetHiddenFramesForRenderOnly(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->HiddenFramesForRenderOnly = v; }
ImS8 wrap_ImGuiWindow_GetHiddenFramesForRenderOnly(ImGuiWindow *self) { return self->HiddenFramesForRenderOnly; }
void wrap_ImGuiWindow_SetDisableInputsFrames(ImGuiWindow *ImGuiWindowPtr, ImS8 v) { ImGuiWindowPtr->DisableInputsFrames = v; }
ImS8 wrap_ImGuiWindow_GetDisableInputsFrames(ImGuiWindow *self) { return self->DisableInputsFrames; }
void wrap_ImGuiWindow_SetSetWindowPosAllowFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiCond v) { ImGuiWindowPtr->SetWindowPosAllowFlags = v; }
ImGuiCond wrap_ImGuiWindow_GetSetWindowPosAllowFlags(ImGuiWindow *self) { return self->SetWindowPosAllowFlags; }
void wrap_ImGuiWindow_SetSetWindowSizeAllowFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiCond v) { ImGuiWindowPtr->SetWindowSizeAllowFlags = v; }
ImGuiCond wrap_ImGuiWindow_GetSetWindowSizeAllowFlags(ImGuiWindow *self) { return self->SetWindowSizeAllowFlags; }
void wrap_ImGuiWindow_SetSetWindowCollapsedAllowFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiCond v) { ImGuiWindowPtr->SetWindowCollapsedAllowFlags = v; }
ImGuiCond wrap_ImGuiWindow_GetSetWindowCollapsedAllowFlags(ImGuiWindow *self) { return self->SetWindowCollapsedAllowFlags; }
void wrap_ImGuiWindow_SetSetWindowDockAllowFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiCond v) { ImGuiWindowPtr->SetWindowDockAllowFlags = v; }
ImGuiCond wrap_ImGuiWindow_GetSetWindowDockAllowFlags(ImGuiWindow *self) { return self->SetWindowDockAllowFlags; }
void wrap_ImGuiWindow_SetSetWindowPosVal(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->SetWindowPosVal = v; }
ImVec2 wrap_ImGuiWindow_GetSetWindowPosVal(ImGuiWindow *self) { return self->SetWindowPosVal; }
void wrap_ImGuiWindow_SetSetWindowPosPivot(ImGuiWindow *ImGuiWindowPtr, ImVec2 v) { ImGuiWindowPtr->SetWindowPosPivot = v; }
ImVec2 wrap_ImGuiWindow_GetSetWindowPosPivot(ImGuiWindow *self) { return self->SetWindowPosPivot; }
void wrap_ImGuiWindow_SetIDStack(ImGuiWindow *ImGuiWindowPtr, ImVector_ImGuiID v) { ImGuiWindowPtr->IDStack = v; }
ImVector_ImGuiID wrap_ImGuiWindow_GetIDStack(ImGuiWindow *self) { return self->IDStack; }
void wrap_ImGuiWindow_SetDC(ImGuiWindow *ImGuiWindowPtr, ImGuiWindowTempData v) { ImGuiWindowPtr->DC = v; }
ImGuiWindowTempData wrap_ImGuiWindow_GetDC(ImGuiWindow *self) { return self->DC; }
void wrap_ImGuiWindow_SetOuterRectClipped(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->OuterRectClipped = v; }
ImRect wrap_ImGuiWindow_GetOuterRectClipped(ImGuiWindow *self) { return self->OuterRectClipped; }
void wrap_ImGuiWindow_SetInnerRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->InnerRect = v; }
ImRect wrap_ImGuiWindow_GetInnerRect(ImGuiWindow *self) { return self->InnerRect; }
void wrap_ImGuiWindow_SetInnerClipRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->InnerClipRect = v; }
ImRect wrap_ImGuiWindow_GetInnerClipRect(ImGuiWindow *self) { return self->InnerClipRect; }
void wrap_ImGuiWindow_SetWorkRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->WorkRect = v; }
ImRect wrap_ImGuiWindow_GetWorkRect(ImGuiWindow *self) { return self->WorkRect; }
void wrap_ImGuiWindow_SetParentWorkRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->ParentWorkRect = v; }
ImRect wrap_ImGuiWindow_GetParentWorkRect(ImGuiWindow *self) { return self->ParentWorkRect; }
void wrap_ImGuiWindow_SetClipRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->ClipRect = v; }
ImRect wrap_ImGuiWindow_GetClipRect(ImGuiWindow *self) { return self->ClipRect; }
void wrap_ImGuiWindow_SetContentRegionRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->ContentRegionRect = v; }
ImRect wrap_ImGuiWindow_GetContentRegionRect(ImGuiWindow *self) { return self->ContentRegionRect; }
void wrap_ImGuiWindow_SetHitTestHoleSize(ImGuiWindow *ImGuiWindowPtr, ImVec2ih v) { ImGuiWindowPtr->HitTestHoleSize = v; }
ImVec2ih wrap_ImGuiWindow_GetHitTestHoleSize(ImGuiWindow *self) { return self->HitTestHoleSize; }
void wrap_ImGuiWindow_SetHitTestHoleOffset(ImGuiWindow *ImGuiWindowPtr, ImVec2ih v) { ImGuiWindowPtr->HitTestHoleOffset = v; }
ImVec2ih wrap_ImGuiWindow_GetHitTestHoleOffset(ImGuiWindow *self) { return self->HitTestHoleOffset; }
void wrap_ImGuiWindow_SetLastFrameActive(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->LastFrameActive = v; }
int wrap_ImGuiWindow_GetLastFrameActive(ImGuiWindow *self) { return self->LastFrameActive; }
void wrap_ImGuiWindow_SetLastFrameJustFocused(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->LastFrameJustFocused = v; }
int wrap_ImGuiWindow_GetLastFrameJustFocused(ImGuiWindow *self) { return self->LastFrameJustFocused; }
void wrap_ImGuiWindow_SetLastTimeActive(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->LastTimeActive = v; }
float wrap_ImGuiWindow_GetLastTimeActive(ImGuiWindow *self) { return self->LastTimeActive; }
void wrap_ImGuiWindow_SetItemWidthDefault(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->ItemWidthDefault = v; }
float wrap_ImGuiWindow_GetItemWidthDefault(ImGuiWindow *self) { return self->ItemWidthDefault; }
void wrap_ImGuiWindow_SetStateStorage(ImGuiWindow *ImGuiWindowPtr, ImGuiStorage v) { ImGuiWindowPtr->StateStorage = v; }
ImGuiStorage wrap_ImGuiWindow_GetStateStorage(ImGuiWindow *self) { return self->StateStorage; }
void wrap_ImGuiWindow_SetColumnsStorage(ImGuiWindow *ImGuiWindowPtr, ImVector_ImGuiOldColumns v) { ImGuiWindowPtr->ColumnsStorage = v; }
ImVector_ImGuiOldColumns wrap_ImGuiWindow_GetColumnsStorage(ImGuiWindow *self) { return self->ColumnsStorage; }
void wrap_ImGuiWindow_SetFontWindowScale(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->FontWindowScale = v; }
float wrap_ImGuiWindow_GetFontWindowScale(ImGuiWindow *self) { return self->FontWindowScale; }
void wrap_ImGuiWindow_SetFontDpiScale(ImGuiWindow *ImGuiWindowPtr, float v) { ImGuiWindowPtr->FontDpiScale = v; }
float wrap_ImGuiWindow_GetFontDpiScale(ImGuiWindow *self) { return self->FontDpiScale; }
void wrap_ImGuiWindow_SetSettingsOffset(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->SettingsOffset = v; }
int wrap_ImGuiWindow_GetSettingsOffset(ImGuiWindow *self) { return self->SettingsOffset; }
void wrap_ImGuiWindow_SetDrawList(ImGuiWindow *ImGuiWindowPtr, ImDrawList* v) { ImGuiWindowPtr->DrawList = v; }
ImDrawList* wrap_ImGuiWindow_GetDrawList(ImGuiWindow *self) { return self->DrawList; }
void wrap_ImGuiWindow_SetDrawListInst(ImGuiWindow *ImGuiWindowPtr, ImDrawList v) { ImGuiWindowPtr->DrawListInst = v; }
ImDrawList wrap_ImGuiWindow_GetDrawListInst(ImGuiWindow *self) { return self->DrawListInst; }
void wrap_ImGuiWindow_SetParentWindow(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->ParentWindow = v; }
ImGuiWindow* wrap_ImGuiWindow_GetParentWindow(ImGuiWindow *self) { return self->ParentWindow; }
void wrap_ImGuiWindow_SetParentWindowInBeginStack(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->ParentWindowInBeginStack = v; }
ImGuiWindow* wrap_ImGuiWindow_GetParentWindowInBeginStack(ImGuiWindow *self) { return self->ParentWindowInBeginStack; }
void wrap_ImGuiWindow_SetRootWindow(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->RootWindow = v; }
ImGuiWindow* wrap_ImGuiWindow_GetRootWindow(ImGuiWindow *self) { return self->RootWindow; }
void wrap_ImGuiWindow_SetRootWindowPopupTree(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->RootWindowPopupTree = v; }
ImGuiWindow* wrap_ImGuiWindow_GetRootWindowPopupTree(ImGuiWindow *self) { return self->RootWindowPopupTree; }
void wrap_ImGuiWindow_SetRootWindowDockTree(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->RootWindowDockTree = v; }
ImGuiWindow* wrap_ImGuiWindow_GetRootWindowDockTree(ImGuiWindow *self) { return self->RootWindowDockTree; }
void wrap_ImGuiWindow_SetRootWindowForTitleBarHighlight(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->RootWindowForTitleBarHighlight = v; }
ImGuiWindow* wrap_ImGuiWindow_GetRootWindowForTitleBarHighlight(ImGuiWindow *self) { return self->RootWindowForTitleBarHighlight; }
void wrap_ImGuiWindow_SetRootWindowForNav(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->RootWindowForNav = v; }
ImGuiWindow* wrap_ImGuiWindow_GetRootWindowForNav(ImGuiWindow *self) { return self->RootWindowForNav; }
void wrap_ImGuiWindow_SetParentWindowForFocusRoute(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->ParentWindowForFocusRoute = v; }
ImGuiWindow* wrap_ImGuiWindow_GetParentWindowForFocusRoute(ImGuiWindow *self) { return self->ParentWindowForFocusRoute; }
void wrap_ImGuiWindow_SetNavLastChildNavWindow(ImGuiWindow *ImGuiWindowPtr, ImGuiWindow* v) { ImGuiWindowPtr->NavLastChildNavWindow = v; }
ImGuiWindow* wrap_ImGuiWindow_GetNavLastChildNavWindow(ImGuiWindow *self) { return self->NavLastChildNavWindow; }
void wrap_ImGuiWindow_SetNavLastIds(ImGuiWindow *ImGuiWindowPtr, ImGuiID* v) { memcpy(ImGuiWindowPtr->NavLastIds, v, sizeof(ImGuiID)*2); }
ImGuiID* wrap_ImGuiWindow_GetNavLastIds(ImGuiWindow *self) { return self->NavLastIds; }
ImGuiID cimgui_ImGuiID_GetAtIdx(ImGuiID *self, int index) { return self[index]; }
void wrap_ImGuiWindow_SetNavRectRel(ImGuiWindow *ImGuiWindowPtr, ImRect* v) { memcpy(ImGuiWindowPtr->NavRectRel, v, sizeof(ImRect)*2); }
ImRect* wrap_ImGuiWindow_GetNavRectRel(ImGuiWindow *self) { return self->NavRectRel; }
ImRect cimgui_ImRect_GetAtIdx(ImRect *self, int index) { return self[index]; }
void wrap_ImGuiWindow_SetNavPreferredScoringPosRel(ImGuiWindow *ImGuiWindowPtr, ImVec2* v) { memcpy(ImGuiWindowPtr->NavPreferredScoringPosRel, v, sizeof(ImVec2)*2); }
ImVec2* wrap_ImGuiWindow_GetNavPreferredScoringPosRel(ImGuiWindow *self) { return self->NavPreferredScoringPosRel; }
void wrap_ImGuiWindow_SetNavRootFocusScopeId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->NavRootFocusScopeId = v; }
ImGuiID wrap_ImGuiWindow_GetNavRootFocusScopeId(ImGuiWindow *self) { return self->NavRootFocusScopeId; }
void wrap_ImGuiWindow_SetMemoryDrawListIdxCapacity(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->MemoryDrawListIdxCapacity = v; }
int wrap_ImGuiWindow_GetMemoryDrawListIdxCapacity(ImGuiWindow *self) { return self->MemoryDrawListIdxCapacity; }
void wrap_ImGuiWindow_SetMemoryDrawListVtxCapacity(ImGuiWindow *ImGuiWindowPtr, int v) { ImGuiWindowPtr->MemoryDrawListVtxCapacity = v; }
int wrap_ImGuiWindow_GetMemoryDrawListVtxCapacity(ImGuiWindow *self) { return self->MemoryDrawListVtxCapacity; }
void wrap_ImGuiWindow_SetMemoryCompacted(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->MemoryCompacted = v; }
bool wrap_ImGuiWindow_GetMemoryCompacted(ImGuiWindow *self) { return self->MemoryCompacted; }
void wrap_ImGuiWindow_SetDockIsActive(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->DockIsActive = v; }
bool wrap_ImGuiWindow_GetDockIsActive(ImGuiWindow *self) { return self->DockIsActive; }
void wrap_ImGuiWindow_SetDockNodeIsVisible(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->DockNodeIsVisible = v; }
bool wrap_ImGuiWindow_GetDockNodeIsVisible(ImGuiWindow *self) { return self->DockNodeIsVisible; }
void wrap_ImGuiWindow_SetDockTabIsVisible(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->DockTabIsVisible = v; }
bool wrap_ImGuiWindow_GetDockTabIsVisible(ImGuiWindow *self) { return self->DockTabIsVisible; }
void wrap_ImGuiWindow_SetDockTabWantClose(ImGuiWindow *ImGuiWindowPtr, bool v) { ImGuiWindowPtr->DockTabWantClose = v; }
bool wrap_ImGuiWindow_GetDockTabWantClose(ImGuiWindow *self) { return self->DockTabWantClose; }
void wrap_ImGuiWindow_SetDockOrder(ImGuiWindow *ImGuiWindowPtr, short v) { ImGuiWindowPtr->DockOrder = v; }
short wrap_ImGuiWindow_GetDockOrder(ImGuiWindow *self) { return self->DockOrder; }
void wrap_ImGuiWindow_SetDockStyle(ImGuiWindow *ImGuiWindowPtr, ImGuiWindowDockStyle v) { ImGuiWindowPtr->DockStyle = v; }
ImGuiWindowDockStyle wrap_ImGuiWindow_GetDockStyle(ImGuiWindow *self) { return self->DockStyle; }
void wrap_ImGuiWindow_SetDockNode(ImGuiWindow *ImGuiWindowPtr, ImGuiDockNode* v) { ImGuiWindowPtr->DockNode = v; }
ImGuiDockNode* wrap_ImGuiWindow_GetDockNode(ImGuiWindow *self) { return self->DockNode; }
void wrap_ImGuiWindow_SetDockNodeAsHost(ImGuiWindow *ImGuiWindowPtr, ImGuiDockNode* v) { ImGuiWindowPtr->DockNodeAsHost = v; }
ImGuiDockNode* wrap_ImGuiWindow_GetDockNodeAsHost(ImGuiWindow *self) { return self->DockNodeAsHost; }
void wrap_ImGuiWindow_SetDockId(ImGuiWindow *ImGuiWindowPtr, ImGuiID v) { ImGuiWindowPtr->DockId = v; }
ImGuiID wrap_ImGuiWindow_GetDockId(ImGuiWindow *self) { return self->DockId; }
void wrap_ImGuiWindow_SetDockTabItemStatusFlags(ImGuiWindow *ImGuiWindowPtr, ImGuiItemStatusFlags v) { ImGuiWindowPtr->DockTabItemStatusFlags = v; }
ImGuiItemStatusFlags wrap_ImGuiWindow_GetDockTabItemStatusFlags(ImGuiWindow *self) { return self->DockTabItemStatusFlags; }
void wrap_ImGuiWindow_SetDockTabItemRect(ImGuiWindow *ImGuiWindowPtr, ImRect v) { ImGuiWindowPtr->DockTabItemRect = v; }
ImRect wrap_ImGuiWindow_GetDockTabItemRect(ImGuiWindow *self) { return self->DockTabItemRect; }
void wrap_ImGuiWindowClass_SetClassId(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiID v) { ImGuiWindowClassPtr->ClassId = v; }
ImGuiID wrap_ImGuiWindowClass_GetClassId(ImGuiWindowClass *self) { return self->ClassId; }
void wrap_ImGuiWindowClass_SetParentViewportId(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiID v) { ImGuiWindowClassPtr->ParentViewportId = v; }
ImGuiID wrap_ImGuiWindowClass_GetParentViewportId(ImGuiWindowClass *self) { return self->ParentViewportId; }
void wrap_ImGuiWindowClass_SetFocusRouteParentWindowId(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiID v) { ImGuiWindowClassPtr->FocusRouteParentWindowId = v; }
ImGuiID wrap_ImGuiWindowClass_GetFocusRouteParentWindowId(ImGuiWindowClass *self) { return self->FocusRouteParentWindowId; }
void wrap_ImGuiWindowClass_SetViewportFlagsOverrideSet(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiViewportFlags v) { ImGuiWindowClassPtr->ViewportFlagsOverrideSet = v; }
ImGuiViewportFlags wrap_ImGuiWindowClass_GetViewportFlagsOverrideSet(ImGuiWindowClass *self) { return self->ViewportFlagsOverrideSet; }
void wrap_ImGuiWindowClass_SetViewportFlagsOverrideClear(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiViewportFlags v) { ImGuiWindowClassPtr->ViewportFlagsOverrideClear = v; }
ImGuiViewportFlags wrap_ImGuiWindowClass_GetViewportFlagsOverrideClear(ImGuiWindowClass *self) { return self->ViewportFlagsOverrideClear; }
void wrap_ImGuiWindowClass_SetTabItemFlagsOverrideSet(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiTabItemFlags v) { ImGuiWindowClassPtr->TabItemFlagsOverrideSet = v; }
ImGuiTabItemFlags wrap_ImGuiWindowClass_GetTabItemFlagsOverrideSet(ImGuiWindowClass *self) { return self->TabItemFlagsOverrideSet; }
void wrap_ImGuiWindowClass_SetDockNodeFlagsOverrideSet(ImGuiWindowClass *ImGuiWindowClassPtr, ImGuiDockNodeFlags v) { ImGuiWindowClassPtr->DockNodeFlagsOverrideSet = v; }
ImGuiDockNodeFlags wrap_ImGuiWindowClass_GetDockNodeFlagsOverrideSet(ImGuiWindowClass *self) { return self->DockNodeFlagsOverrideSet; }
void wrap_ImGuiWindowClass_SetDockingAlwaysTabBar(ImGuiWindowClass *ImGuiWindowClassPtr, bool v) { ImGuiWindowClassPtr->DockingAlwaysTabBar = v; }
bool wrap_ImGuiWindowClass_GetDockingAlwaysTabBar(ImGuiWindowClass *self) { return self->DockingAlwaysTabBar; }
void wrap_ImGuiWindowClass_SetDockingAllowUnclassed(ImGuiWindowClass *ImGuiWindowClassPtr, bool v) { ImGuiWindowClassPtr->DockingAllowUnclassed = v; }
bool wrap_ImGuiWindowClass_GetDockingAllowUnclassed(ImGuiWindowClass *self) { return self->DockingAllowUnclassed; }
void wrap_ImGuiWindowDockStyle_SetColors(ImGuiWindowDockStyle *ImGuiWindowDockStylePtr, ImU32* v) { memcpy(ImGuiWindowDockStylePtr->Colors, v, sizeof(ImU32)*6); }
ImU32* wrap_ImGuiWindowDockStyle_GetColors(ImGuiWindowDockStyle *self) { return self->Colors; }
void wrap_ImGuiWindowSettings_SetID(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImGuiID v) { ImGuiWindowSettingsPtr->ID = v; }
ImGuiID wrap_ImGuiWindowSettings_GetID(ImGuiWindowSettings *self) { return self->ID; }
void wrap_ImGuiWindowSettings_SetPos(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImVec2ih v) { ImGuiWindowSettingsPtr->Pos = v; }
ImVec2ih wrap_ImGuiWindowSettings_GetPos(ImGuiWindowSettings *self) { return self->Pos; }
void wrap_ImGuiWindowSettings_SetSize(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImVec2ih v) { ImGuiWindowSettingsPtr->Size = v; }
ImVec2ih wrap_ImGuiWindowSettings_GetSize(ImGuiWindowSettings *self) { return self->Size; }
void wrap_ImGuiWindowSettings_SetViewportPos(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImVec2ih v) { ImGuiWindowSettingsPtr->ViewportPos = v; }
ImVec2ih wrap_ImGuiWindowSettings_GetViewportPos(ImGuiWindowSettings *self) { return self->ViewportPos; }
void wrap_ImGuiWindowSettings_SetViewportId(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImGuiID v) { ImGuiWindowSettingsPtr->ViewportId = v; }
ImGuiID wrap_ImGuiWindowSettings_GetViewportId(ImGuiWindowSettings *self) { return self->ViewportId; }
void wrap_ImGuiWindowSettings_SetDockId(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImGuiID v) { ImGuiWindowSettingsPtr->DockId = v; }
ImGuiID wrap_ImGuiWindowSettings_GetDockId(ImGuiWindowSettings *self) { return self->DockId; }
void wrap_ImGuiWindowSettings_SetClassId(ImGuiWindowSettings *ImGuiWindowSettingsPtr, ImGuiID v) { ImGuiWindowSettingsPtr->ClassId = v; }
ImGuiID wrap_ImGuiWindowSettings_GetClassId(ImGuiWindowSettings *self) { return self->ClassId; }
void wrap_ImGuiWindowSettings_SetDockOrder(ImGuiWindowSettings *ImGuiWindowSettingsPtr, short v) { ImGuiWindowSettingsPtr->DockOrder = v; }
short wrap_ImGuiWindowSettings_GetDockOrder(ImGuiWindowSettings *self) { return self->DockOrder; }
void wrap_ImGuiWindowSettings_SetCollapsed(ImGuiWindowSettings *ImGuiWindowSettingsPtr, bool v) { ImGuiWindowSettingsPtr->Collapsed = v; }
bool wrap_ImGuiWindowSettings_GetCollapsed(ImGuiWindowSettings *self) { return self->Collapsed; }
void wrap_ImGuiWindowSettings_SetIsChild(ImGuiWindowSettings *ImGuiWindowSettingsPtr, bool v) { ImGuiWindowSettingsPtr->IsChild = v; }
bool wrap_ImGuiWindowSettings_GetIsChild(ImGuiWindowSettings *self) { return self->IsChild; }
void wrap_ImGuiWindowSettings_SetWantApply(ImGuiWindowSettings *ImGuiWindowSettingsPtr, bool v) { ImGuiWindowSettingsPtr->WantApply = v; }
bool wrap_ImGuiWindowSettings_GetWantApply(ImGuiWindowSettings *self) { return self->WantApply; }
void wrap_ImGuiWindowSettings_SetWantDelete(ImGuiWindowSettings *ImGuiWindowSettingsPtr, bool v) { ImGuiWindowSettingsPtr->WantDelete = v; }
bool wrap_ImGuiWindowSettings_GetWantDelete(ImGuiWindowSettings *self) { return self->WantDelete; }
void wrap_ImGuiWindowStackData_SetWindow(ImGuiWindowStackData *ImGuiWindowStackDataPtr, ImGuiWindow* v) { ImGuiWindowStackDataPtr->Window = v; }
ImGuiWindow* wrap_ImGuiWindowStackData_GetWindow(ImGuiWindowStackData *self) { return self->Window; }
void wrap_ImGuiWindowStackData_SetParentLastItemDataBackup(ImGuiWindowStackData *ImGuiWindowStackDataPtr, ImGuiLastItemData v) { ImGuiWindowStackDataPtr->ParentLastItemDataBackup = v; }
ImGuiLastItemData wrap_ImGuiWindowStackData_GetParentLastItemDataBackup(ImGuiWindowStackData *self) { return self->ParentLastItemDataBackup; }
void wrap_ImGuiWindowStackData_SetStackSizesOnBegin(ImGuiWindowStackData *ImGuiWindowStackDataPtr, ImGuiStackSizes v) { ImGuiWindowStackDataPtr->StackSizesOnBegin = v; }
ImGuiStackSizes wrap_ImGuiWindowStackData_GetStackSizesOnBegin(ImGuiWindowStackData *self) { return self->StackSizesOnBegin; }
void wrap_ImGuiWindowTempData_SetCursorPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CursorPos = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCursorPos(ImGuiWindowTempData *self) { return self->CursorPos; }
void wrap_ImGuiWindowTempData_SetCursorPosPrevLine(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CursorPosPrevLine = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCursorPosPrevLine(ImGuiWindowTempData *self) { return self->CursorPosPrevLine; }
void wrap_ImGuiWindowTempData_SetCursorStartPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CursorStartPos = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCursorStartPos(ImGuiWindowTempData *self) { return self->CursorStartPos; }
void wrap_ImGuiWindowTempData_SetCursorMaxPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CursorMaxPos = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCursorMaxPos(ImGuiWindowTempData *self) { return self->CursorMaxPos; }
void wrap_ImGuiWindowTempData_SetIdealMaxPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->IdealMaxPos = v; }
ImVec2 wrap_ImGuiWindowTempData_GetIdealMaxPos(ImGuiWindowTempData *self) { return self->IdealMaxPos; }
void wrap_ImGuiWindowTempData_SetCurrLineSize(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CurrLineSize = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCurrLineSize(ImGuiWindowTempData *self) { return self->CurrLineSize; }
void wrap_ImGuiWindowTempData_SetPrevLineSize(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->PrevLineSize = v; }
ImVec2 wrap_ImGuiWindowTempData_GetPrevLineSize(ImGuiWindowTempData *self) { return self->PrevLineSize; }
void wrap_ImGuiWindowTempData_SetCurrLineTextBaseOffset(ImGuiWindowTempData *ImGuiWindowTempDataPtr, float v) { ImGuiWindowTempDataPtr->CurrLineTextBaseOffset = v; }
float wrap_ImGuiWindowTempData_GetCurrLineTextBaseOffset(ImGuiWindowTempData *self) { return self->CurrLineTextBaseOffset; }
void wrap_ImGuiWindowTempData_SetPrevLineTextBaseOffset(ImGuiWindowTempData *ImGuiWindowTempDataPtr, float v) { ImGuiWindowTempDataPtr->PrevLineTextBaseOffset = v; }
float wrap_ImGuiWindowTempData_GetPrevLineTextBaseOffset(ImGuiWindowTempData *self) { return self->PrevLineTextBaseOffset; }
void wrap_ImGuiWindowTempData_SetIsSameLine(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->IsSameLine = v; }
bool wrap_ImGuiWindowTempData_GetIsSameLine(ImGuiWindowTempData *self) { return self->IsSameLine; }
void wrap_ImGuiWindowTempData_SetIsSetPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->IsSetPos = v; }
bool wrap_ImGuiWindowTempData_GetIsSetPos(ImGuiWindowTempData *self) { return self->IsSetPos; }
void wrap_ImGuiWindowTempData_SetIndent(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec1 v) { ImGuiWindowTempDataPtr->Indent = v; }
ImVec1 wrap_ImGuiWindowTempData_GetIndent(ImGuiWindowTempData *self) { return self->Indent; }
void wrap_ImGuiWindowTempData_SetColumnsOffset(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec1 v) { ImGuiWindowTempDataPtr->ColumnsOffset = v; }
ImVec1 wrap_ImGuiWindowTempData_GetColumnsOffset(ImGuiWindowTempData *self) { return self->ColumnsOffset; }
void wrap_ImGuiWindowTempData_SetGroupOffset(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec1 v) { ImGuiWindowTempDataPtr->GroupOffset = v; }
ImVec1 wrap_ImGuiWindowTempData_GetGroupOffset(ImGuiWindowTempData *self) { return self->GroupOffset; }
void wrap_ImGuiWindowTempData_SetCursorStartPosLossyness(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->CursorStartPosLossyness = v; }
ImVec2 wrap_ImGuiWindowTempData_GetCursorStartPosLossyness(ImGuiWindowTempData *self) { return self->CursorStartPosLossyness; }
void wrap_ImGuiWindowTempData_SetNavLayerCurrent(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiNavLayer v) { ImGuiWindowTempDataPtr->NavLayerCurrent = v; }
ImGuiNavLayer wrap_ImGuiWindowTempData_GetNavLayerCurrent(ImGuiWindowTempData *self) { return self->NavLayerCurrent; }
void wrap_ImGuiWindowTempData_SetNavLayersActiveMask(ImGuiWindowTempData *ImGuiWindowTempDataPtr, short v) { ImGuiWindowTempDataPtr->NavLayersActiveMask = v; }
short wrap_ImGuiWindowTempData_GetNavLayersActiveMask(ImGuiWindowTempData *self) { return self->NavLayersActiveMask; }
void wrap_ImGuiWindowTempData_SetNavLayersActiveMaskNext(ImGuiWindowTempData *ImGuiWindowTempDataPtr, short v) { ImGuiWindowTempDataPtr->NavLayersActiveMaskNext = v; }
short wrap_ImGuiWindowTempData_GetNavLayersActiveMaskNext(ImGuiWindowTempData *self) { return self->NavLayersActiveMaskNext; }
void wrap_ImGuiWindowTempData_SetNavIsScrollPushableX(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->NavIsScrollPushableX = v; }
bool wrap_ImGuiWindowTempData_GetNavIsScrollPushableX(ImGuiWindowTempData *self) { return self->NavIsScrollPushableX; }
void wrap_ImGuiWindowTempData_SetNavHideHighlightOneFrame(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->NavHideHighlightOneFrame = v; }
bool wrap_ImGuiWindowTempData_GetNavHideHighlightOneFrame(ImGuiWindowTempData *self) { return self->NavHideHighlightOneFrame; }
void wrap_ImGuiWindowTempData_SetNavWindowHasScrollY(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->NavWindowHasScrollY = v; }
bool wrap_ImGuiWindowTempData_GetNavWindowHasScrollY(ImGuiWindowTempData *self) { return self->NavWindowHasScrollY; }
void wrap_ImGuiWindowTempData_SetMenuBarAppending(ImGuiWindowTempData *ImGuiWindowTempDataPtr, bool v) { ImGuiWindowTempDataPtr->MenuBarAppending = v; }
bool wrap_ImGuiWindowTempData_GetMenuBarAppending(ImGuiWindowTempData *self) { return self->MenuBarAppending; }
void wrap_ImGuiWindowTempData_SetMenuBarOffset(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVec2 v) { ImGuiWindowTempDataPtr->MenuBarOffset = v; }
ImVec2 wrap_ImGuiWindowTempData_GetMenuBarOffset(ImGuiWindowTempData *self) { return self->MenuBarOffset; }
void wrap_ImGuiWindowTempData_SetMenuColumns(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiMenuColumns v) { ImGuiWindowTempDataPtr->MenuColumns = v; }
ImGuiMenuColumns wrap_ImGuiWindowTempData_GetMenuColumns(ImGuiWindowTempData *self) { return self->MenuColumns; }
void wrap_ImGuiWindowTempData_SetTreeDepth(ImGuiWindowTempData *ImGuiWindowTempDataPtr, int v) { ImGuiWindowTempDataPtr->TreeDepth = v; }
int wrap_ImGuiWindowTempData_GetTreeDepth(ImGuiWindowTempData *self) { return self->TreeDepth; }
void wrap_ImGuiWindowTempData_SetTreeJumpToParentOnPopMask(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImU32 v) { ImGuiWindowTempDataPtr->TreeJumpToParentOnPopMask = v; }
ImU32 wrap_ImGuiWindowTempData_GetTreeJumpToParentOnPopMask(ImGuiWindowTempData *self) { return self->TreeJumpToParentOnPopMask; }
void wrap_ImGuiWindowTempData_SetChildWindows(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVector_ImGuiWindowPtr v) { ImGuiWindowTempDataPtr->ChildWindows = v; }
ImVector_ImGuiWindowPtr wrap_ImGuiWindowTempData_GetChildWindows(ImGuiWindowTempData *self) { return self->ChildWindows; }
void wrap_ImGuiWindowTempData_SetStateStorage(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiStorage* v) { ImGuiWindowTempDataPtr->StateStorage = v; }
ImGuiStorage* wrap_ImGuiWindowTempData_GetStateStorage(ImGuiWindowTempData *self) { return self->StateStorage; }
void wrap_ImGuiWindowTempData_SetCurrentColumns(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiOldColumns* v) { ImGuiWindowTempDataPtr->CurrentColumns = v; }
ImGuiOldColumns* wrap_ImGuiWindowTempData_GetCurrentColumns(ImGuiWindowTempData *self) { return self->CurrentColumns; }
void wrap_ImGuiWindowTempData_SetCurrentTableIdx(ImGuiWindowTempData *ImGuiWindowTempDataPtr, int v) { ImGuiWindowTempDataPtr->CurrentTableIdx = v; }
int wrap_ImGuiWindowTempData_GetCurrentTableIdx(ImGuiWindowTempData *self) { return self->CurrentTableIdx; }
void wrap_ImGuiWindowTempData_SetLayoutType(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiLayoutType v) { ImGuiWindowTempDataPtr->LayoutType = v; }
ImGuiLayoutType wrap_ImGuiWindowTempData_GetLayoutType(ImGuiWindowTempData *self) { return self->LayoutType; }
void wrap_ImGuiWindowTempData_SetParentLayoutType(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImGuiLayoutType v) { ImGuiWindowTempDataPtr->ParentLayoutType = v; }
ImGuiLayoutType wrap_ImGuiWindowTempData_GetParentLayoutType(ImGuiWindowTempData *self) { return self->ParentLayoutType; }
void wrap_ImGuiWindowTempData_SetModalDimBgColor(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImU32 v) { ImGuiWindowTempDataPtr->ModalDimBgColor = v; }
ImU32 wrap_ImGuiWindowTempData_GetModalDimBgColor(ImGuiWindowTempData *self) { return self->ModalDimBgColor; }
void wrap_ImGuiWindowTempData_SetItemWidth(ImGuiWindowTempData *ImGuiWindowTempDataPtr, float v) { ImGuiWindowTempDataPtr->ItemWidth = v; }
float wrap_ImGuiWindowTempData_GetItemWidth(ImGuiWindowTempData *self) { return self->ItemWidth; }
void wrap_ImGuiWindowTempData_SetTextWrapPos(ImGuiWindowTempData *ImGuiWindowTempDataPtr, float v) { ImGuiWindowTempDataPtr->TextWrapPos = v; }
float wrap_ImGuiWindowTempData_GetTextWrapPos(ImGuiWindowTempData *self) { return self->TextWrapPos; }
void wrap_ImGuiWindowTempData_SetItemWidthStack(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVector_float v) { ImGuiWindowTempDataPtr->ItemWidthStack = v; }
ImVector_float wrap_ImGuiWindowTempData_GetItemWidthStack(ImGuiWindowTempData *self) { return self->ItemWidthStack; }
void wrap_ImGuiWindowTempData_SetTextWrapPosStack(ImGuiWindowTempData *ImGuiWindowTempDataPtr, ImVector_float v) { ImGuiWindowTempDataPtr->TextWrapPosStack = v; }
ImVector_float wrap_ImGuiWindowTempData_GetTextWrapPosStack(ImGuiWindowTempData *self) { return self->TextWrapPosStack; }
void wrap_ImRect_SetMin(ImRect *ImRectPtr, ImVec2 v) { ImRectPtr->Min = v; }
void wrap_ImRect_SetMax(ImRect *ImRectPtr, ImVec2 v) { ImRectPtr->Max = v; }
void wrap_ImVec1_SetX(ImVec1 *ImVec1Ptr, float v) { ImVec1Ptr->x = v; }
void wrap_ImVec2_SetX(ImVec2 *ImVec2Ptr, float v) { ImVec2Ptr->x = v; }
void wrap_ImVec2_SetY(ImVec2 *ImVec2Ptr, float v) { ImVec2Ptr->y = v; }
void wrap_ImVec2ih_SetX(ImVec2ih *ImVec2ihPtr, short v) { ImVec2ihPtr->x = v; }
short wrap_ImVec2ih_GetX(ImVec2ih *self) { return self->x; }
void wrap_ImVec2ih_SetY(ImVec2ih *ImVec2ihPtr, short v) { ImVec2ihPtr->y = v; }
short wrap_ImVec2ih_GetY(ImVec2ih *self) { return self->y; }
void wrap_ImVec4_SetX(ImVec4 *ImVec4Ptr, float v) { ImVec4Ptr->x = v; }
void wrap_ImVec4_SetY(ImVec4 *ImVec4Ptr, float v) { ImVec4Ptr->y = v; }
void wrap_ImVec4_SetZ(ImVec4 *ImVec4Ptr, float v) { ImVec4Ptr->z = v; }
void wrap_ImVec4_SetW(ImVec4 *ImVec4Ptr, float v) { ImVec4Ptr->w = v; }
void wrap_STB_TexteditState_SetCursor(STB_TexteditState *STB_TexteditStatePtr, int v) { STB_TexteditStatePtr->cursor = v; }
int wrap_STB_TexteditState_GetCursor(STB_TexteditState *self) { return self->cursor; }
void wrap_STB_TexteditState_SetSelect_start(STB_TexteditState *STB_TexteditStatePtr, int v) { STB_TexteditStatePtr->select_start = v; }
int wrap_STB_TexteditState_GetSelect_start(STB_TexteditState *self) { return self->select_start; }
void wrap_STB_TexteditState_SetSelect_end(STB_TexteditState *STB_TexteditStatePtr, int v) { STB_TexteditStatePtr->select_end = v; }
int wrap_STB_TexteditState_GetSelect_end(STB_TexteditState *self) { return self->select_end; }
void wrap_STB_TexteditState_SetInsert_mode(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->insert_mode = v; }
unsigned char wrap_STB_TexteditState_GetInsert_mode(STB_TexteditState *self) { return self->insert_mode; }
void wrap_STB_TexteditState_SetRow_count_per_page(STB_TexteditState *STB_TexteditStatePtr, int v) { STB_TexteditStatePtr->row_count_per_page = v; }
int wrap_STB_TexteditState_GetRow_count_per_page(STB_TexteditState *self) { return self->row_count_per_page; }
void wrap_STB_TexteditState_SetCursor_at_end_of_line(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->cursor_at_end_of_line = v; }
unsigned char wrap_STB_TexteditState_GetCursor_at_end_of_line(STB_TexteditState *self) { return self->cursor_at_end_of_line; }
void wrap_STB_TexteditState_SetInitialized(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->initialized = v; }
unsigned char wrap_STB_TexteditState_GetInitialized(STB_TexteditState *self) { return self->initialized; }
void wrap_STB_TexteditState_SetHas_preferred_x(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->has_preferred_x = v; }
unsigned char wrap_STB_TexteditState_GetHas_preferred_x(STB_TexteditState *self) { return self->has_preferred_x; }
void wrap_STB_TexteditState_SetSingle_line(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->single_line = v; }
unsigned char wrap_STB_TexteditState_GetSingle_line(STB_TexteditState *self) { return self->single_line; }
void wrap_STB_TexteditState_SetPadding1(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->padding1 = v; }
unsigned char wrap_STB_TexteditState_GetPadding1(STB_TexteditState *self) { return self->padding1; }
void wrap_STB_TexteditState_SetPadding2(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->padding2 = v; }
unsigned char wrap_STB_TexteditState_GetPadding2(STB_TexteditState *self) { return self->padding2; }
void wrap_STB_TexteditState_SetPadding3(STB_TexteditState *STB_TexteditStatePtr, unsigned char v) { STB_TexteditStatePtr->padding3 = v; }
unsigned char wrap_STB_TexteditState_GetPadding3(STB_TexteditState *self) { return self->padding3; }
void wrap_STB_TexteditState_SetPreferred_x(STB_TexteditState *STB_TexteditStatePtr, float v) { STB_TexteditStatePtr->preferred_x = v; }
float wrap_STB_TexteditState_GetPreferred_x(STB_TexteditState *self) { return self->preferred_x; }
void wrap_STB_TexteditState_SetUndostate(STB_TexteditState *STB_TexteditStatePtr, StbUndoState v) { STB_TexteditStatePtr->undostate = v; }
StbUndoState wrap_STB_TexteditState_GetUndostate(STB_TexteditState *self) { return self->undostate; }
void wrap_StbTexteditRow_SetX0(StbTexteditRow *StbTexteditRowPtr, float v) { StbTexteditRowPtr->x0 = v; }
float wrap_StbTexteditRow_GetX0(StbTexteditRow *self) { return self->x0; }
void wrap_StbTexteditRow_SetX1(StbTexteditRow *StbTexteditRowPtr, float v) { StbTexteditRowPtr->x1 = v; }
float wrap_StbTexteditRow_GetX1(StbTexteditRow *self) { return self->x1; }
void wrap_StbTexteditRow_SetBaseline_y_delta(StbTexteditRow *StbTexteditRowPtr, float v) { StbTexteditRowPtr->baseline_y_delta = v; }
float wrap_StbTexteditRow_GetBaseline_y_delta(StbTexteditRow *self) { return self->baseline_y_delta; }
void wrap_StbTexteditRow_SetYmin(StbTexteditRow *StbTexteditRowPtr, float v) { StbTexteditRowPtr->ymin = v; }
float wrap_StbTexteditRow_GetYmin(StbTexteditRow *self) { return self->ymin; }
void wrap_StbTexteditRow_SetYmax(StbTexteditRow *StbTexteditRowPtr, float v) { StbTexteditRowPtr->ymax = v; }
float wrap_StbTexteditRow_GetYmax(StbTexteditRow *self) { return self->ymax; }
void wrap_StbTexteditRow_SetNum_chars(StbTexteditRow *StbTexteditRowPtr, int v) { StbTexteditRowPtr->num_chars = v; }
int wrap_StbTexteditRow_GetNum_chars(StbTexteditRow *self) { return self->num_chars; }
void wrap_StbUndoRecord_SetWhere(StbUndoRecord *StbUndoRecordPtr, int v) { StbUndoRecordPtr->where = v; }
int wrap_StbUndoRecord_GetWhere(StbUndoRecord *self) { return self->where; }
void wrap_StbUndoRecord_SetInsert_length(StbUndoRecord *StbUndoRecordPtr, int v) { StbUndoRecordPtr->insert_length = v; }
int wrap_StbUndoRecord_GetInsert_length(StbUndoRecord *self) { return self->insert_length; }
void wrap_StbUndoRecord_SetDelete_length(StbUndoRecord *StbUndoRecordPtr, int v) { StbUndoRecordPtr->delete_length = v; }
int wrap_StbUndoRecord_GetDelete_length(StbUndoRecord *self) { return self->delete_length; }
void wrap_StbUndoRecord_SetChar_storage(StbUndoRecord *StbUndoRecordPtr, int v) { StbUndoRecordPtr->char_storage = v; }
int wrap_StbUndoRecord_GetChar_storage(StbUndoRecord *self) { return self->char_storage; }
void wrap_StbUndoState_SetUndo_rec(StbUndoState *StbUndoStatePtr, StbUndoRecord* v) { memcpy(StbUndoStatePtr->undo_rec, v, sizeof(StbUndoRecord)*99); }
StbUndoRecord* wrap_StbUndoState_GetUndo_rec(StbUndoState *self) { return self->undo_rec; }
StbUndoRecord cimgui_StbUndoRecord_GetAtIdx(StbUndoRecord *self, int index) { return self[index]; }
void wrap_StbUndoState_SetUndo_char(StbUndoState *StbUndoStatePtr, ImWchar* v) { memcpy(StbUndoStatePtr->undo_char, v, sizeof(ImWchar)*999); }
ImWchar* wrap_StbUndoState_GetUndo_char(StbUndoState *self) { return self->undo_char; }
ImWchar cimgui_ImWchar_GetAtIdx(ImWchar *self, int index) { return self[index]; }
void wrap_StbUndoState_SetUndo_point(StbUndoState *StbUndoStatePtr, short v) { StbUndoStatePtr->undo_point = v; }
short wrap_StbUndoState_GetUndo_point(StbUndoState *self) { return self->undo_point; }
void wrap_StbUndoState_SetRedo_point(StbUndoState *StbUndoStatePtr, short v) { StbUndoStatePtr->redo_point = v; }
short wrap_StbUndoState_GetRedo_point(StbUndoState *self) { return self->redo_point; }
void wrap_StbUndoState_SetUndo_char_point(StbUndoState *StbUndoStatePtr, int v) { StbUndoStatePtr->undo_char_point = v; }
int wrap_StbUndoState_GetUndo_char_point(StbUndoState *self) { return self->undo_char_point; }
void wrap_StbUndoState_SetRedo_char_point(StbUndoState *StbUndoStatePtr, int v) { StbUndoStatePtr->redo_char_point = v; }
int wrap_StbUndoState_GetRedo_char_point(StbUndoState *self) { return self->redo_char_point; }
