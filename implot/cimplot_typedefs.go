// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package implot

// #include <stdlib.h>
// #include <memory.h>
// #include "../imgui/extra_types.h"
// #include "cimplot_wrapper.h"
// #include "cimplot_typedefs.h"
// extern int callbackPlotFormatter0(double, char*, int, void*);
// extern int callbackPlotFormatter1(double, char*, int, void*);
// extern int callbackPlotFormatter2(double, char*, int, void*);
// extern int callbackPlotFormatter3(double, char*, int, void*);
// extern int callbackPlotFormatter4(double, char*, int, void*);
// extern int callbackPlotFormatter5(double, char*, int, void*);
// extern int callbackPlotFormatter6(double, char*, int, void*);
// extern int callbackPlotFormatter7(double, char*, int, void*);
// extern int callbackPlotFormatter8(double, char*, int, void*);
// extern int callbackPlotFormatter9(double, char*, int, void*);
// extern int callbackPlotFormatter10(double, char*, int, void*);
// extern int callbackPlotFormatter11(double, char*, int, void*);
// extern int callbackPlotFormatter12(double, char*, int, void*);
// extern int callbackPlotFormatter13(double, char*, int, void*);
// extern int callbackPlotFormatter14(double, char*, int, void*);
// extern int callbackPlotFormatter15(double, char*, int, void*);
// extern int callbackPlotFormatter16(double, char*, int, void*);
// extern int callbackPlotFormatter17(double, char*, int, void*);
// extern int callbackPlotFormatter18(double, char*, int, void*);
// extern int callbackPlotFormatter19(double, char*, int, void*);
// extern int callbackPlotFormatter20(double, char*, int, void*);
// extern int callbackPlotFormatter21(double, char*, int, void*);
// extern int callbackPlotFormatter22(double, char*, int, void*);
// extern int callbackPlotFormatter23(double, char*, int, void*);
// extern int callbackPlotFormatter24(double, char*, int, void*);
// extern int callbackPlotFormatter25(double, char*, int, void*);
// extern int callbackPlotFormatter26(double, char*, int, void*);
// extern int callbackPlotFormatter27(double, char*, int, void*);
// extern int callbackPlotFormatter28(double, char*, int, void*);
// extern int callbackPlotFormatter29(double, char*, int, void*);
// extern int callbackPlotFormatter30(double, char*, int, void*);
// extern int callbackPlotFormatter31(double, char*, int, void*);
// extern ImPlotPoint callbackPlotGetter0(int, void*);
// extern ImPlotPoint callbackPlotGetter1(int, void*);
// extern ImPlotPoint callbackPlotGetter2(int, void*);
// extern ImPlotPoint callbackPlotGetter3(int, void*);
// extern ImPlotPoint callbackPlotGetter4(int, void*);
// extern ImPlotPoint callbackPlotGetter5(int, void*);
// extern ImPlotPoint callbackPlotGetter6(int, void*);
// extern ImPlotPoint callbackPlotGetter7(int, void*);
// extern ImPlotPoint callbackPlotGetter8(int, void*);
// extern ImPlotPoint callbackPlotGetter9(int, void*);
// extern ImPlotPoint callbackPlotGetter10(int, void*);
// extern ImPlotPoint callbackPlotGetter11(int, void*);
// extern ImPlotPoint callbackPlotGetter12(int, void*);
// extern ImPlotPoint callbackPlotGetter13(int, void*);
// extern ImPlotPoint callbackPlotGetter14(int, void*);
// extern ImPlotPoint callbackPlotGetter15(int, void*);
// extern ImPlotPoint callbackPlotGetter16(int, void*);
// extern ImPlotPoint callbackPlotGetter17(int, void*);
// extern ImPlotPoint callbackPlotGetter18(int, void*);
// extern ImPlotPoint callbackPlotGetter19(int, void*);
// extern ImPlotPoint callbackPlotGetter20(int, void*);
// extern ImPlotPoint callbackPlotGetter21(int, void*);
// extern ImPlotPoint callbackPlotGetter22(int, void*);
// extern ImPlotPoint callbackPlotGetter23(int, void*);
// extern ImPlotPoint callbackPlotGetter24(int, void*);
// extern ImPlotPoint callbackPlotGetter25(int, void*);
// extern ImPlotPoint callbackPlotGetter26(int, void*);
// extern ImPlotPoint callbackPlotGetter27(int, void*);
// extern ImPlotPoint callbackPlotGetter28(int, void*);
// extern ImPlotPoint callbackPlotGetter29(int, void*);
// extern ImPlotPoint callbackPlotGetter30(int, void*);
// extern ImPlotPoint callbackPlotGetter31(int, void*);
// extern double callbackPlotTransform0(double, void*);
// extern double callbackPlotTransform1(double, void*);
// extern double callbackPlotTransform2(double, void*);
// extern double callbackPlotTransform3(double, void*);
// extern double callbackPlotTransform4(double, void*);
// extern double callbackPlotTransform5(double, void*);
// extern double callbackPlotTransform6(double, void*);
// extern double callbackPlotTransform7(double, void*);
// extern double callbackPlotTransform8(double, void*);
// extern double callbackPlotTransform9(double, void*);
// extern double callbackPlotTransform10(double, void*);
// extern double callbackPlotTransform11(double, void*);
// extern double callbackPlotTransform12(double, void*);
// extern double callbackPlotTransform13(double, void*);
// extern double callbackPlotTransform14(double, void*);
// extern double callbackPlotTransform15(double, void*);
// extern double callbackPlotTransform16(double, void*);
// extern double callbackPlotTransform17(double, void*);
// extern double callbackPlotTransform18(double, void*);
// extern double callbackPlotTransform19(double, void*);
// extern double callbackPlotTransform20(double, void*);
// extern double callbackPlotTransform21(double, void*);
// extern double callbackPlotTransform22(double, void*);
// extern double callbackPlotTransform23(double, void*);
// extern double callbackPlotTransform24(double, void*);
// extern double callbackPlotTransform25(double, void*);
// extern double callbackPlotTransform26(double, void*);
// extern double callbackPlotTransform27(double, void*);
// extern double callbackPlotTransform28(double, void*);
// extern double callbackPlotTransform29(double, void*);
// extern double callbackPlotTransform30(double, void*);
// extern double callbackPlotTransform31(double, void*);
import "C"
import (
	"unsafe"

	"github.com/AllenDang/cimgui-go/internal"
)

type FormatterTimeData struct {
	CData *C.Formatter_Time_Data
}

// Handle returns C version of FormatterTimeData and its finalizer func.
func (self *FormatterTimeData) Handle() (result *C.Formatter_Time_Data, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self FormatterTimeData) C() (C.Formatter_Time_Data, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewFormatterTimeDataFromC creates FormatterTimeData from its C pointer.
// SRC ~= *C.Formatter_Time_Data
func NewFormatterTimeDataFromC[SRC any](cvalue SRC) *FormatterTimeData {
	return &FormatterTimeData{CData: internal.ReinterpretCast[*C.Formatter_Time_Data](cvalue)}
}

type PlotAlignmentData struct {
	CData *C.ImPlotAlignmentData
}

// Handle returns C version of PlotAlignmentData and its finalizer func.
func (self *PlotAlignmentData) Handle() (result *C.ImPlotAlignmentData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotAlignmentData) C() (C.ImPlotAlignmentData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotAlignmentDataFromC creates PlotAlignmentData from its C pointer.
// SRC ~= *C.ImPlotAlignmentData
func NewPlotAlignmentDataFromC[SRC any](cvalue SRC) *PlotAlignmentData {
	return &PlotAlignmentData{CData: internal.ReinterpretCast[*C.ImPlotAlignmentData](cvalue)}
}

type PlotAnnotation struct {
	CData *C.ImPlotAnnotation
}

// Handle returns C version of PlotAnnotation and its finalizer func.
func (self *PlotAnnotation) Handle() (result *C.ImPlotAnnotation, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotAnnotation) C() (C.ImPlotAnnotation, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotAnnotationFromC creates PlotAnnotation from its C pointer.
// SRC ~= *C.ImPlotAnnotation
func NewPlotAnnotationFromC[SRC any](cvalue SRC) *PlotAnnotation {
	return &PlotAnnotation{CData: internal.ReinterpretCast[*C.ImPlotAnnotation](cvalue)}
}

type PlotAnnotationCollection struct {
	CData *C.ImPlotAnnotationCollection
}

// Handle returns C version of PlotAnnotationCollection and its finalizer func.
func (self *PlotAnnotationCollection) Handle() (result *C.ImPlotAnnotationCollection, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotAnnotationCollection) C() (C.ImPlotAnnotationCollection, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotAnnotationCollectionFromC creates PlotAnnotationCollection from its C pointer.
// SRC ~= *C.ImPlotAnnotationCollection
func NewPlotAnnotationCollectionFromC[SRC any](cvalue SRC) *PlotAnnotationCollection {
	return &PlotAnnotationCollection{CData: internal.ReinterpretCast[*C.ImPlotAnnotationCollection](cvalue)}
}

type PlotAxis struct {
	CData *C.ImPlotAxis
}

// Handle returns C version of PlotAxis and its finalizer func.
func (self *PlotAxis) Handle() (result *C.ImPlotAxis, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotAxis) C() (C.ImPlotAxis, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotAxisFromC creates PlotAxis from its C pointer.
// SRC ~= *C.ImPlotAxis
func NewPlotAxisFromC[SRC any](cvalue SRC) *PlotAxis {
	return &PlotAxis{CData: internal.ReinterpretCast[*C.ImPlotAxis](cvalue)}
}

type PlotAxisColor struct {
	CData *C.ImPlotAxisColor
}

// Handle returns C version of PlotAxisColor and its finalizer func.
func (self *PlotAxisColor) Handle() (result *C.ImPlotAxisColor, fin func()) {
	return self.CData, func() {}
}

// NewPlotAxisColorFromC creates PlotAxisColor from its C pointer.
// SRC ~= *C.ImPlotAxisColor
func NewPlotAxisColorFromC[SRC any](cvalue SRC) *PlotAxisColor {
	return &PlotAxisColor{CData: internal.ReinterpretCast[*C.ImPlotAxisColor](cvalue)}
}

type PlotColormapData struct {
	CData *C.ImPlotColormapData
}

// Handle returns C version of PlotColormapData and its finalizer func.
func (self *PlotColormapData) Handle() (result *C.ImPlotColormapData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotColormapData) C() (C.ImPlotColormapData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotColormapDataFromC creates PlotColormapData from its C pointer.
// SRC ~= *C.ImPlotColormapData
func NewPlotColormapDataFromC[SRC any](cvalue SRC) *PlotColormapData {
	return &PlotColormapData{CData: internal.ReinterpretCast[*C.ImPlotColormapData](cvalue)}
}

type PlotContext struct {
	CData *C.ImPlotContext
}

// Handle returns C version of PlotContext and its finalizer func.
func (self *PlotContext) Handle() (result *C.ImPlotContext, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotContext) C() (C.ImPlotContext, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotContextFromC creates PlotContext from its C pointer.
// SRC ~= *C.ImPlotContext
func NewPlotContextFromC[SRC any](cvalue SRC) *PlotContext {
	return &PlotContext{CData: internal.ReinterpretCast[*C.ImPlotContext](cvalue)}
}

type PlotDateTimeSpec struct {
	CData *C.ImPlotDateTimeSpec
}

// Handle returns C version of PlotDateTimeSpec and its finalizer func.
func (self *PlotDateTimeSpec) Handle() (result *C.ImPlotDateTimeSpec, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotDateTimeSpec) C() (C.ImPlotDateTimeSpec, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotDateTimeSpecFromC creates PlotDateTimeSpec from its C pointer.
// SRC ~= *C.ImPlotDateTimeSpec
func NewPlotDateTimeSpecFromC[SRC any](cvalue SRC) *PlotDateTimeSpec {
	return &PlotDateTimeSpec{CData: internal.ReinterpretCast[*C.ImPlotDateTimeSpec](cvalue)}
}

type (
	PlotFormatter  func(value float64, buff string, size int32, user_data unsafe.Pointer) int32
	cPlotFormatter func(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int
)

func NewPlotFormatterFromC(cvalue *C.ImPlotFormatter) *PlotFormatter {
	result := poolPlotFormatter.Find(*cvalue)
	return &result
}

func (c PlotFormatter) C() (C.ImPlotFormatter, func()) {
	return poolPlotFormatter.Allocate(c), func() {}
}

func wrapPlotFormatter(cb PlotFormatter, value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	result := cb(float64(value), C.GoString(buff), int32(size), unsafe.Pointer(user_data))

	return C.int(result)
}

//export callbackPlotFormatter0
func callbackPlotFormatter0(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(0), value, buff, size, user_data)
}

//export callbackPlotFormatter1
func callbackPlotFormatter1(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(1), value, buff, size, user_data)
}

//export callbackPlotFormatter2
func callbackPlotFormatter2(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(2), value, buff, size, user_data)
}

//export callbackPlotFormatter3
func callbackPlotFormatter3(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(3), value, buff, size, user_data)
}

//export callbackPlotFormatter4
func callbackPlotFormatter4(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(4), value, buff, size, user_data)
}

//export callbackPlotFormatter5
func callbackPlotFormatter5(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(5), value, buff, size, user_data)
}

//export callbackPlotFormatter6
func callbackPlotFormatter6(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(6), value, buff, size, user_data)
}

//export callbackPlotFormatter7
func callbackPlotFormatter7(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(7), value, buff, size, user_data)
}

//export callbackPlotFormatter8
func callbackPlotFormatter8(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(8), value, buff, size, user_data)
}

//export callbackPlotFormatter9
func callbackPlotFormatter9(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(9), value, buff, size, user_data)
}

//export callbackPlotFormatter10
func callbackPlotFormatter10(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(10), value, buff, size, user_data)
}

//export callbackPlotFormatter11
func callbackPlotFormatter11(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(11), value, buff, size, user_data)
}

//export callbackPlotFormatter12
func callbackPlotFormatter12(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(12), value, buff, size, user_data)
}

//export callbackPlotFormatter13
func callbackPlotFormatter13(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(13), value, buff, size, user_data)
}

//export callbackPlotFormatter14
func callbackPlotFormatter14(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(14), value, buff, size, user_data)
}

//export callbackPlotFormatter15
func callbackPlotFormatter15(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(15), value, buff, size, user_data)
}

//export callbackPlotFormatter16
func callbackPlotFormatter16(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(16), value, buff, size, user_data)
}

//export callbackPlotFormatter17
func callbackPlotFormatter17(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(17), value, buff, size, user_data)
}

//export callbackPlotFormatter18
func callbackPlotFormatter18(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(18), value, buff, size, user_data)
}

//export callbackPlotFormatter19
func callbackPlotFormatter19(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(19), value, buff, size, user_data)
}

//export callbackPlotFormatter20
func callbackPlotFormatter20(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(20), value, buff, size, user_data)
}

//export callbackPlotFormatter21
func callbackPlotFormatter21(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(21), value, buff, size, user_data)
}

//export callbackPlotFormatter22
func callbackPlotFormatter22(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(22), value, buff, size, user_data)
}

//export callbackPlotFormatter23
func callbackPlotFormatter23(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(23), value, buff, size, user_data)
}

//export callbackPlotFormatter24
func callbackPlotFormatter24(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(24), value, buff, size, user_data)
}

//export callbackPlotFormatter25
func callbackPlotFormatter25(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(25), value, buff, size, user_data)
}

//export callbackPlotFormatter26
func callbackPlotFormatter26(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(26), value, buff, size, user_data)
}

//export callbackPlotFormatter27
func callbackPlotFormatter27(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(27), value, buff, size, user_data)
}

//export callbackPlotFormatter28
func callbackPlotFormatter28(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(28), value, buff, size, user_data)
}

//export callbackPlotFormatter29
func callbackPlotFormatter29(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(29), value, buff, size, user_data)
}

//export callbackPlotFormatter30
func callbackPlotFormatter30(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(30), value, buff, size, user_data)
}

//export callbackPlotFormatter31
func callbackPlotFormatter31(value C.double, buff *C.char, size C.int, user_data unsafe.Pointer) C.int {
	return wrapPlotFormatter(poolPlotFormatter.Get(31), value, buff, size, user_data)
}

var poolPlotFormatter *internal.Pool[PlotFormatter, C.ImPlotFormatter]

func init() {
	poolPlotFormatter = internal.NewPool[PlotFormatter, C.ImPlotFormatter](
		C.ImPlotFormatter(C.callbackPlotFormatter0),
		C.ImPlotFormatter(C.callbackPlotFormatter1),
		C.ImPlotFormatter(C.callbackPlotFormatter2),
		C.ImPlotFormatter(C.callbackPlotFormatter3),
		C.ImPlotFormatter(C.callbackPlotFormatter4),
		C.ImPlotFormatter(C.callbackPlotFormatter5),
		C.ImPlotFormatter(C.callbackPlotFormatter6),
		C.ImPlotFormatter(C.callbackPlotFormatter7),
		C.ImPlotFormatter(C.callbackPlotFormatter8),
		C.ImPlotFormatter(C.callbackPlotFormatter9),
		C.ImPlotFormatter(C.callbackPlotFormatter10),
		C.ImPlotFormatter(C.callbackPlotFormatter11),
		C.ImPlotFormatter(C.callbackPlotFormatter12),
		C.ImPlotFormatter(C.callbackPlotFormatter13),
		C.ImPlotFormatter(C.callbackPlotFormatter14),
		C.ImPlotFormatter(C.callbackPlotFormatter15),
		C.ImPlotFormatter(C.callbackPlotFormatter16),
		C.ImPlotFormatter(C.callbackPlotFormatter17),
		C.ImPlotFormatter(C.callbackPlotFormatter18),
		C.ImPlotFormatter(C.callbackPlotFormatter19),
		C.ImPlotFormatter(C.callbackPlotFormatter20),
		C.ImPlotFormatter(C.callbackPlotFormatter21),
		C.ImPlotFormatter(C.callbackPlotFormatter22),
		C.ImPlotFormatter(C.callbackPlotFormatter23),
		C.ImPlotFormatter(C.callbackPlotFormatter24),
		C.ImPlotFormatter(C.callbackPlotFormatter25),
		C.ImPlotFormatter(C.callbackPlotFormatter26),
		C.ImPlotFormatter(C.callbackPlotFormatter27),
		C.ImPlotFormatter(C.callbackPlotFormatter28),
		C.ImPlotFormatter(C.callbackPlotFormatter29),
		C.ImPlotFormatter(C.callbackPlotFormatter30),
		C.ImPlotFormatter(C.callbackPlotFormatter31),
	)
}

func ClearPlotFormatterPool() {
	poolPlotFormatter.Clear()
}

type (
	PlotGetter  func(idx int32, user_data unsafe.Pointer) PlotPoint
	cPlotGetter func(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint
)

func NewPlotGetterFromC(cvalue *C.ImPlotGetter) *PlotGetter {
	result := poolPlotGetter.Find(*cvalue)
	return &result
}

func (c PlotGetter) C() (C.ImPlotGetter, func()) {
	return poolPlotGetter.Allocate(c), func() {}
}

func wrapPlotGetter(cb PlotGetter, idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	result := cb(int32(idx), unsafe.Pointer(user_data))

	return internal.ReinterpretCast[C.ImPlotPoint](result.ToC())
}

//export callbackPlotGetter0
func callbackPlotGetter0(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(0), idx, user_data)
}

//export callbackPlotGetter1
func callbackPlotGetter1(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(1), idx, user_data)
}

//export callbackPlotGetter2
func callbackPlotGetter2(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(2), idx, user_data)
}

//export callbackPlotGetter3
func callbackPlotGetter3(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(3), idx, user_data)
}

//export callbackPlotGetter4
func callbackPlotGetter4(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(4), idx, user_data)
}

//export callbackPlotGetter5
func callbackPlotGetter5(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(5), idx, user_data)
}

//export callbackPlotGetter6
func callbackPlotGetter6(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(6), idx, user_data)
}

//export callbackPlotGetter7
func callbackPlotGetter7(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(7), idx, user_data)
}

//export callbackPlotGetter8
func callbackPlotGetter8(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(8), idx, user_data)
}

//export callbackPlotGetter9
func callbackPlotGetter9(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(9), idx, user_data)
}

//export callbackPlotGetter10
func callbackPlotGetter10(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(10), idx, user_data)
}

//export callbackPlotGetter11
func callbackPlotGetter11(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(11), idx, user_data)
}

//export callbackPlotGetter12
func callbackPlotGetter12(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(12), idx, user_data)
}

//export callbackPlotGetter13
func callbackPlotGetter13(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(13), idx, user_data)
}

//export callbackPlotGetter14
func callbackPlotGetter14(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(14), idx, user_data)
}

//export callbackPlotGetter15
func callbackPlotGetter15(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(15), idx, user_data)
}

//export callbackPlotGetter16
func callbackPlotGetter16(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(16), idx, user_data)
}

//export callbackPlotGetter17
func callbackPlotGetter17(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(17), idx, user_data)
}

//export callbackPlotGetter18
func callbackPlotGetter18(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(18), idx, user_data)
}

//export callbackPlotGetter19
func callbackPlotGetter19(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(19), idx, user_data)
}

//export callbackPlotGetter20
func callbackPlotGetter20(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(20), idx, user_data)
}

//export callbackPlotGetter21
func callbackPlotGetter21(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(21), idx, user_data)
}

//export callbackPlotGetter22
func callbackPlotGetter22(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(22), idx, user_data)
}

//export callbackPlotGetter23
func callbackPlotGetter23(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(23), idx, user_data)
}

//export callbackPlotGetter24
func callbackPlotGetter24(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(24), idx, user_data)
}

//export callbackPlotGetter25
func callbackPlotGetter25(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(25), idx, user_data)
}

//export callbackPlotGetter26
func callbackPlotGetter26(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(26), idx, user_data)
}

//export callbackPlotGetter27
func callbackPlotGetter27(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(27), idx, user_data)
}

//export callbackPlotGetter28
func callbackPlotGetter28(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(28), idx, user_data)
}

//export callbackPlotGetter29
func callbackPlotGetter29(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(29), idx, user_data)
}

//export callbackPlotGetter30
func callbackPlotGetter30(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(30), idx, user_data)
}

//export callbackPlotGetter31
func callbackPlotGetter31(idx C.int, user_data unsafe.Pointer) C.ImPlotPoint {
	return wrapPlotGetter(poolPlotGetter.Get(31), idx, user_data)
}

var poolPlotGetter *internal.Pool[PlotGetter, C.ImPlotGetter]

func init() {
	poolPlotGetter = internal.NewPool[PlotGetter, C.ImPlotGetter](
		C.ImPlotGetter(C.callbackPlotGetter0),
		C.ImPlotGetter(C.callbackPlotGetter1),
		C.ImPlotGetter(C.callbackPlotGetter2),
		C.ImPlotGetter(C.callbackPlotGetter3),
		C.ImPlotGetter(C.callbackPlotGetter4),
		C.ImPlotGetter(C.callbackPlotGetter5),
		C.ImPlotGetter(C.callbackPlotGetter6),
		C.ImPlotGetter(C.callbackPlotGetter7),
		C.ImPlotGetter(C.callbackPlotGetter8),
		C.ImPlotGetter(C.callbackPlotGetter9),
		C.ImPlotGetter(C.callbackPlotGetter10),
		C.ImPlotGetter(C.callbackPlotGetter11),
		C.ImPlotGetter(C.callbackPlotGetter12),
		C.ImPlotGetter(C.callbackPlotGetter13),
		C.ImPlotGetter(C.callbackPlotGetter14),
		C.ImPlotGetter(C.callbackPlotGetter15),
		C.ImPlotGetter(C.callbackPlotGetter16),
		C.ImPlotGetter(C.callbackPlotGetter17),
		C.ImPlotGetter(C.callbackPlotGetter18),
		C.ImPlotGetter(C.callbackPlotGetter19),
		C.ImPlotGetter(C.callbackPlotGetter20),
		C.ImPlotGetter(C.callbackPlotGetter21),
		C.ImPlotGetter(C.callbackPlotGetter22),
		C.ImPlotGetter(C.callbackPlotGetter23),
		C.ImPlotGetter(C.callbackPlotGetter24),
		C.ImPlotGetter(C.callbackPlotGetter25),
		C.ImPlotGetter(C.callbackPlotGetter26),
		C.ImPlotGetter(C.callbackPlotGetter27),
		C.ImPlotGetter(C.callbackPlotGetter28),
		C.ImPlotGetter(C.callbackPlotGetter29),
		C.ImPlotGetter(C.callbackPlotGetter30),
		C.ImPlotGetter(C.callbackPlotGetter31),
	)
}

func ClearPlotGetterPool() {
	poolPlotGetter.Clear()
}

type PlotInputMap struct {
	CData *C.ImPlotInputMap
}

// Handle returns C version of PlotInputMap and its finalizer func.
func (self *PlotInputMap) Handle() (result *C.ImPlotInputMap, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotInputMap) C() (C.ImPlotInputMap, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotInputMapFromC creates PlotInputMap from its C pointer.
// SRC ~= *C.ImPlotInputMap
func NewPlotInputMapFromC[SRC any](cvalue SRC) *PlotInputMap {
	return &PlotInputMap{CData: internal.ReinterpretCast[*C.ImPlotInputMap](cvalue)}
}

type PlotItem struct {
	CData *C.ImPlotItem
}

// Handle returns C version of PlotItem and its finalizer func.
func (self *PlotItem) Handle() (result *C.ImPlotItem, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotItem) C() (C.ImPlotItem, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotItemFromC creates PlotItem from its C pointer.
// SRC ~= *C.ImPlotItem
func NewPlotItemFromC[SRC any](cvalue SRC) *PlotItem {
	return &PlotItem{CData: internal.ReinterpretCast[*C.ImPlotItem](cvalue)}
}

type PlotItemGroup struct {
	CData *C.ImPlotItemGroup
}

// Handle returns C version of PlotItemGroup and its finalizer func.
func (self *PlotItemGroup) Handle() (result *C.ImPlotItemGroup, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotItemGroup) C() (C.ImPlotItemGroup, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotItemGroupFromC creates PlotItemGroup from its C pointer.
// SRC ~= *C.ImPlotItemGroup
func NewPlotItemGroupFromC[SRC any](cvalue SRC) *PlotItemGroup {
	return &PlotItemGroup{CData: internal.ReinterpretCast[*C.ImPlotItemGroup](cvalue)}
}

type PlotLegend struct {
	CData *C.ImPlotLegend
}

// Handle returns C version of PlotLegend and its finalizer func.
func (self *PlotLegend) Handle() (result *C.ImPlotLegend, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotLegend) C() (C.ImPlotLegend, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotLegendFromC creates PlotLegend from its C pointer.
// SRC ~= *C.ImPlotLegend
func NewPlotLegendFromC[SRC any](cvalue SRC) *PlotLegend {
	return &PlotLegend{CData: internal.ReinterpretCast[*C.ImPlotLegend](cvalue)}
}

type PlotNextItemData struct {
	CData *C.ImPlotNextItemData
}

// Handle returns C version of PlotNextItemData and its finalizer func.
func (self *PlotNextItemData) Handle() (result *C.ImPlotNextItemData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotNextItemData) C() (C.ImPlotNextItemData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotNextItemDataFromC creates PlotNextItemData from its C pointer.
// SRC ~= *C.ImPlotNextItemData
func NewPlotNextItemDataFromC[SRC any](cvalue SRC) *PlotNextItemData {
	return &PlotNextItemData{CData: internal.ReinterpretCast[*C.ImPlotNextItemData](cvalue)}
}

type PlotNextPlotData struct {
	CData *C.ImPlotNextPlotData
}

// Handle returns C version of PlotNextPlotData and its finalizer func.
func (self *PlotNextPlotData) Handle() (result *C.ImPlotNextPlotData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotNextPlotData) C() (C.ImPlotNextPlotData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotNextPlotDataFromC creates PlotNextPlotData from its C pointer.
// SRC ~= *C.ImPlotNextPlotData
func NewPlotNextPlotDataFromC[SRC any](cvalue SRC) *PlotNextPlotData {
	return &PlotNextPlotData{CData: internal.ReinterpretCast[*C.ImPlotNextPlotData](cvalue)}
}

type PlotPlot struct {
	CData *C.ImPlotPlot
}

// Handle returns C version of PlotPlot and its finalizer func.
func (self *PlotPlot) Handle() (result *C.ImPlotPlot, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotPlot) C() (C.ImPlotPlot, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotPlotFromC creates PlotPlot from its C pointer.
// SRC ~= *C.ImPlotPlot
func NewPlotPlotFromC[SRC any](cvalue SRC) *PlotPlot {
	return &PlotPlot{CData: internal.ReinterpretCast[*C.ImPlotPlot](cvalue)}
}

type PlotPointError struct {
	CData *C.ImPlotPointError
}

// Handle returns C version of PlotPointError and its finalizer func.
func (self *PlotPointError) Handle() (result *C.ImPlotPointError, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotPointError) C() (C.ImPlotPointError, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotPointErrorFromC creates PlotPointError from its C pointer.
// SRC ~= *C.ImPlotPointError
func NewPlotPointErrorFromC[SRC any](cvalue SRC) *PlotPointError {
	return &PlotPointError{CData: internal.ReinterpretCast[*C.ImPlotPointError](cvalue)}
}

type PlotRange struct {
	CData *C.ImPlotRange
}

// Handle returns C version of PlotRange and its finalizer func.
func (self *PlotRange) Handle() (result *C.ImPlotRange, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotRange) C() (C.ImPlotRange, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotRangeFromC creates PlotRange from its C pointer.
// SRC ~= *C.ImPlotRange
func NewPlotRangeFromC[SRC any](cvalue SRC) *PlotRange {
	return &PlotRange{CData: internal.ReinterpretCast[*C.ImPlotRange](cvalue)}
}

type PlotRect struct {
	CData *C.ImPlotRect
}

// Handle returns C version of PlotRect and its finalizer func.
func (self *PlotRect) Handle() (result *C.ImPlotRect, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotRect) C() (C.ImPlotRect, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotRectFromC creates PlotRect from its C pointer.
// SRC ~= *C.ImPlotRect
func NewPlotRectFromC[SRC any](cvalue SRC) *PlotRect {
	return &PlotRect{CData: internal.ReinterpretCast[*C.ImPlotRect](cvalue)}
}

type PlotStyle struct {
	CData *C.ImPlotStyle
}

// Handle returns C version of PlotStyle and its finalizer func.
func (self *PlotStyle) Handle() (result *C.ImPlotStyle, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotStyle) C() (C.ImPlotStyle, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotStyleFromC creates PlotStyle from its C pointer.
// SRC ~= *C.ImPlotStyle
func NewPlotStyleFromC[SRC any](cvalue SRC) *PlotStyle {
	return &PlotStyle{CData: internal.ReinterpretCast[*C.ImPlotStyle](cvalue)}
}

type PlotSubplot struct {
	CData *C.ImPlotSubplot
}

// Handle returns C version of PlotSubplot and its finalizer func.
func (self *PlotSubplot) Handle() (result *C.ImPlotSubplot, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotSubplot) C() (C.ImPlotSubplot, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotSubplotFromC creates PlotSubplot from its C pointer.
// SRC ~= *C.ImPlotSubplot
func NewPlotSubplotFromC[SRC any](cvalue SRC) *PlotSubplot {
	return &PlotSubplot{CData: internal.ReinterpretCast[*C.ImPlotSubplot](cvalue)}
}

type PlotTag struct {
	CData *C.ImPlotTag
}

// Handle returns C version of PlotTag and its finalizer func.
func (self *PlotTag) Handle() (result *C.ImPlotTag, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotTag) C() (C.ImPlotTag, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotTagFromC creates PlotTag from its C pointer.
// SRC ~= *C.ImPlotTag
func NewPlotTagFromC[SRC any](cvalue SRC) *PlotTag {
	return &PlotTag{CData: internal.ReinterpretCast[*C.ImPlotTag](cvalue)}
}

type PlotTagCollection struct {
	CData *C.ImPlotTagCollection
}

// Handle returns C version of PlotTagCollection and its finalizer func.
func (self *PlotTagCollection) Handle() (result *C.ImPlotTagCollection, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotTagCollection) C() (C.ImPlotTagCollection, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotTagCollectionFromC creates PlotTagCollection from its C pointer.
// SRC ~= *C.ImPlotTagCollection
func NewPlotTagCollectionFromC[SRC any](cvalue SRC) *PlotTagCollection {
	return &PlotTagCollection{CData: internal.ReinterpretCast[*C.ImPlotTagCollection](cvalue)}
}

type PlotTick struct {
	CData *C.ImPlotTick
}

// Handle returns C version of PlotTick and its finalizer func.
func (self *PlotTick) Handle() (result *C.ImPlotTick, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotTick) C() (C.ImPlotTick, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotTickFromC creates PlotTick from its C pointer.
// SRC ~= *C.ImPlotTick
func NewPlotTickFromC[SRC any](cvalue SRC) *PlotTick {
	return &PlotTick{CData: internal.ReinterpretCast[*C.ImPlotTick](cvalue)}
}

type PlotTicker struct {
	CData *C.ImPlotTicker
}

// Handle returns C version of PlotTicker and its finalizer func.
func (self *PlotTicker) Handle() (result *C.ImPlotTicker, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self PlotTicker) C() (C.ImPlotTicker, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewPlotTickerFromC creates PlotTicker from its C pointer.
// SRC ~= *C.ImPlotTicker
func NewPlotTickerFromC[SRC any](cvalue SRC) *PlotTicker {
	return &PlotTicker{CData: internal.ReinterpretCast[*C.ImPlotTicker](cvalue)}
}

type (
	PlotTransform  func(value float64, user_data unsafe.Pointer) float64
	cPlotTransform func(value C.double, user_data unsafe.Pointer) C.double
)

func NewPlotTransformFromC(cvalue *C.ImPlotTransform) *PlotTransform {
	result := poolPlotTransform.Find(*cvalue)
	return &result
}

func (c PlotTransform) C() (C.ImPlotTransform, func()) {
	return poolPlotTransform.Allocate(c), func() {}
}

func wrapPlotTransform(cb PlotTransform, value C.double, user_data unsafe.Pointer) C.double {
	result := cb(float64(value), unsafe.Pointer(user_data))

	return C.double(result)
}

//export callbackPlotTransform0
func callbackPlotTransform0(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(0), value, user_data)
}

//export callbackPlotTransform1
func callbackPlotTransform1(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(1), value, user_data)
}

//export callbackPlotTransform2
func callbackPlotTransform2(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(2), value, user_data)
}

//export callbackPlotTransform3
func callbackPlotTransform3(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(3), value, user_data)
}

//export callbackPlotTransform4
func callbackPlotTransform4(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(4), value, user_data)
}

//export callbackPlotTransform5
func callbackPlotTransform5(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(5), value, user_data)
}

//export callbackPlotTransform6
func callbackPlotTransform6(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(6), value, user_data)
}

//export callbackPlotTransform7
func callbackPlotTransform7(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(7), value, user_data)
}

//export callbackPlotTransform8
func callbackPlotTransform8(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(8), value, user_data)
}

//export callbackPlotTransform9
func callbackPlotTransform9(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(9), value, user_data)
}

//export callbackPlotTransform10
func callbackPlotTransform10(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(10), value, user_data)
}

//export callbackPlotTransform11
func callbackPlotTransform11(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(11), value, user_data)
}

//export callbackPlotTransform12
func callbackPlotTransform12(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(12), value, user_data)
}

//export callbackPlotTransform13
func callbackPlotTransform13(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(13), value, user_data)
}

//export callbackPlotTransform14
func callbackPlotTransform14(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(14), value, user_data)
}

//export callbackPlotTransform15
func callbackPlotTransform15(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(15), value, user_data)
}

//export callbackPlotTransform16
func callbackPlotTransform16(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(16), value, user_data)
}

//export callbackPlotTransform17
func callbackPlotTransform17(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(17), value, user_data)
}

//export callbackPlotTransform18
func callbackPlotTransform18(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(18), value, user_data)
}

//export callbackPlotTransform19
func callbackPlotTransform19(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(19), value, user_data)
}

//export callbackPlotTransform20
func callbackPlotTransform20(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(20), value, user_data)
}

//export callbackPlotTransform21
func callbackPlotTransform21(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(21), value, user_data)
}

//export callbackPlotTransform22
func callbackPlotTransform22(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(22), value, user_data)
}

//export callbackPlotTransform23
func callbackPlotTransform23(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(23), value, user_data)
}

//export callbackPlotTransform24
func callbackPlotTransform24(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(24), value, user_data)
}

//export callbackPlotTransform25
func callbackPlotTransform25(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(25), value, user_data)
}

//export callbackPlotTransform26
func callbackPlotTransform26(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(26), value, user_data)
}

//export callbackPlotTransform27
func callbackPlotTransform27(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(27), value, user_data)
}

//export callbackPlotTransform28
func callbackPlotTransform28(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(28), value, user_data)
}

//export callbackPlotTransform29
func callbackPlotTransform29(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(29), value, user_data)
}

//export callbackPlotTransform30
func callbackPlotTransform30(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(30), value, user_data)
}

//export callbackPlotTransform31
func callbackPlotTransform31(value C.double, user_data unsafe.Pointer) C.double {
	return wrapPlotTransform(poolPlotTransform.Get(31), value, user_data)
}

var poolPlotTransform *internal.Pool[PlotTransform, C.ImPlotTransform]

func init() {
	poolPlotTransform = internal.NewPool[PlotTransform, C.ImPlotTransform](
		C.ImPlotTransform(C.callbackPlotTransform0),
		C.ImPlotTransform(C.callbackPlotTransform1),
		C.ImPlotTransform(C.callbackPlotTransform2),
		C.ImPlotTransform(C.callbackPlotTransform3),
		C.ImPlotTransform(C.callbackPlotTransform4),
		C.ImPlotTransform(C.callbackPlotTransform5),
		C.ImPlotTransform(C.callbackPlotTransform6),
		C.ImPlotTransform(C.callbackPlotTransform7),
		C.ImPlotTransform(C.callbackPlotTransform8),
		C.ImPlotTransform(C.callbackPlotTransform9),
		C.ImPlotTransform(C.callbackPlotTransform10),
		C.ImPlotTransform(C.callbackPlotTransform11),
		C.ImPlotTransform(C.callbackPlotTransform12),
		C.ImPlotTransform(C.callbackPlotTransform13),
		C.ImPlotTransform(C.callbackPlotTransform14),
		C.ImPlotTransform(C.callbackPlotTransform15),
		C.ImPlotTransform(C.callbackPlotTransform16),
		C.ImPlotTransform(C.callbackPlotTransform17),
		C.ImPlotTransform(C.callbackPlotTransform18),
		C.ImPlotTransform(C.callbackPlotTransform19),
		C.ImPlotTransform(C.callbackPlotTransform20),
		C.ImPlotTransform(C.callbackPlotTransform21),
		C.ImPlotTransform(C.callbackPlotTransform22),
		C.ImPlotTransform(C.callbackPlotTransform23),
		C.ImPlotTransform(C.callbackPlotTransform24),
		C.ImPlotTransform(C.callbackPlotTransform25),
		C.ImPlotTransform(C.callbackPlotTransform26),
		C.ImPlotTransform(C.callbackPlotTransform27),
		C.ImPlotTransform(C.callbackPlotTransform28),
		C.ImPlotTransform(C.callbackPlotTransform29),
		C.ImPlotTransform(C.callbackPlotTransform30),
		C.ImPlotTransform(C.callbackPlotTransform31),
	)
}

func ClearPlotTransformPool() {
	poolPlotTransform.Clear()
}
