// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include "cimnodes_wrapper.h"
import "C"
import "unsafe"

type EmulateThreeButtonMouse uintptr

func (data EmulateThreeButtonMouse) handle() *C.EmulateThreeButtonMouse {
	return (*C.EmulateThreeButtonMouse)(unsafe.Pointer(data))
}

func (data EmulateThreeButtonMouse) c() C.EmulateThreeButtonMouse {
	return *(data.handle())
}

func newEmulateThreeButtonMouseFromC(cvalue C.EmulateThreeButtonMouse) EmulateThreeButtonMouse {
	return EmulateThreeButtonMouse(unsafe.Pointer(&cvalue))
}

type NodesIO uintptr

func (data NodesIO) handle() *C.ImNodesIO {
	return (*C.ImNodesIO)(unsafe.Pointer(data))
}

func (data NodesIO) c() C.ImNodesIO {
	return *(data.handle())
}

func newNodesIOFromC(cvalue C.ImNodesIO) NodesIO {
	return NodesIO(unsafe.Pointer(&cvalue))
}

type NodesStyle uintptr

func (data NodesStyle) handle() *C.ImNodesStyle {
	return (*C.ImNodesStyle)(unsafe.Pointer(data))
}

func (data NodesStyle) c() C.ImNodesStyle {
	return *(data.handle())
}

func newNodesStyleFromC(cvalue C.ImNodesStyle) NodesStyle {
	return NodesStyle(unsafe.Pointer(&cvalue))
}

type LinkDetachWithModifierClick uintptr

func (data LinkDetachWithModifierClick) handle() *C.LinkDetachWithModifierClick {
	return (*C.LinkDetachWithModifierClick)(unsafe.Pointer(data))
}

func (data LinkDetachWithModifierClick) c() C.LinkDetachWithModifierClick {
	return *(data.handle())
}

func newLinkDetachWithModifierClickFromC(cvalue C.LinkDetachWithModifierClick) LinkDetachWithModifierClick {
	return LinkDetachWithModifierClick(unsafe.Pointer(&cvalue))
}

type MultipleSelectModifier uintptr

func (data MultipleSelectModifier) handle() *C.MultipleSelectModifier {
	return (*C.MultipleSelectModifier)(unsafe.Pointer(data))
}

func (data MultipleSelectModifier) c() C.MultipleSelectModifier {
	return *(data.handle())
}

func newMultipleSelectModifierFromC(cvalue C.MultipleSelectModifier) MultipleSelectModifier {
	return MultipleSelectModifier(unsafe.Pointer(&cvalue))
}
