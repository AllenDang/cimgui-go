// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.


#include <string.h>
#include "cimcte_wrapper.h"
#include "cimcte_structs_accessor.h"

void wrap_Breakpoint_SetMLine(Breakpoint *BreakpointPtr, int v) { BreakpointPtr->mLine = v; }
int wrap_Breakpoint_GetMLine(Breakpoint *self) { return self->mLine; }
void wrap_Breakpoint_SetMEnabled(Breakpoint *BreakpointPtr, bool v) { BreakpointPtr->mEnabled = v; }
bool wrap_Breakpoint_GetMEnabled(Breakpoint *self) { return self->mEnabled; }
void wrap_Breakpoint_SetMCondition(Breakpoint *BreakpointPtr, string v) { BreakpointPtr->mCondition = v; }
string wrap_Breakpoint_GetMCondition(Breakpoint *self) { return self->mCondition; }
void wrap_Coordinates_SetMLine(Coordinates *CoordinatesPtr, int v) { CoordinatesPtr->mLine = v; }
int wrap_Coordinates_GetMLine(Coordinates *self) { return self->mLine; }
void wrap_Coordinates_SetMColumn(Coordinates *CoordinatesPtr, int v) { CoordinatesPtr->mColumn = v; }
int wrap_Coordinates_GetMColumn(Coordinates *self) { return self->mColumn; }
void wrap_Glyph_SetMChar(Glyph *GlyphPtr, Char v) { GlyphPtr->mChar = v; }
Char wrap_Glyph_GetMChar(Glyph *self) { return self->mChar; }
void wrap_Glyph_SetMColorIndex(Glyph *GlyphPtr, PaletteIndex v) { GlyphPtr->mColorIndex = v; }
PaletteIndex wrap_Glyph_GetMColorIndex(Glyph *self) { return self->mColorIndex; }
void wrap_Glyph_SetMComment(Glyph *GlyphPtr, bool v) { GlyphPtr->mComment = v; }
bool wrap_Glyph_GetMComment(Glyph *self) { return self->mComment; }
void wrap_Glyph_SetMMultiLineComment(Glyph *GlyphPtr, bool v) { GlyphPtr->mMultiLineComment = v; }
bool wrap_Glyph_GetMMultiLineComment(Glyph *self) { return self->mMultiLineComment; }
void wrap_Glyph_SetMPreprocessor(Glyph *GlyphPtr, bool v) { GlyphPtr->mPreprocessor = v; }
bool wrap_Glyph_GetMPreprocessor(Glyph *self) { return self->mPreprocessor; }
void wrap_Identifier_SetMLocation(Identifier *IdentifierPtr, Coordinates v) { IdentifierPtr->mLocation = v; }
Coordinates wrap_Identifier_GetMLocation(Identifier *self) { return self->mLocation; }
void wrap_Identifier_SetMDeclaration(Identifier *IdentifierPtr, string v) { IdentifierPtr->mDeclaration = v; }
string wrap_Identifier_GetMDeclaration(Identifier *self) { return self->mDeclaration; }
void wrap_LanguageDefinition_SetMName(LanguageDefinition *LanguageDefinitionPtr, string v) { LanguageDefinitionPtr->mName = v; }
string wrap_LanguageDefinition_GetMName(LanguageDefinition *self) { return self->mName; }
void wrap_LanguageDefinition_SetMKeywords(LanguageDefinition *LanguageDefinitionPtr, Keywords v) { LanguageDefinitionPtr->mKeywords = v; }
Keywords wrap_LanguageDefinition_GetMKeywords(LanguageDefinition *self) { return self->mKeywords; }
void wrap_LanguageDefinition_SetMIdentifiers(LanguageDefinition *LanguageDefinitionPtr, Identifiers v) { LanguageDefinitionPtr->mIdentifiers = v; }
Identifiers wrap_LanguageDefinition_GetMIdentifiers(LanguageDefinition *self) { return self->mIdentifiers; }
void wrap_LanguageDefinition_SetMPreprocIdentifiers(LanguageDefinition *LanguageDefinitionPtr, Identifiers v) { LanguageDefinitionPtr->mPreprocIdentifiers = v; }
Identifiers wrap_LanguageDefinition_GetMPreprocIdentifiers(LanguageDefinition *self) { return self->mPreprocIdentifiers; }
void wrap_LanguageDefinition_SetMCommentStart(LanguageDefinition *LanguageDefinitionPtr, string v) { LanguageDefinitionPtr->mCommentStart = v; }
string wrap_LanguageDefinition_GetMCommentStart(LanguageDefinition *self) { return self->mCommentStart; }
void wrap_LanguageDefinition_SetMCommentEnd(LanguageDefinition *LanguageDefinitionPtr, string v) { LanguageDefinitionPtr->mCommentEnd = v; }
string wrap_LanguageDefinition_GetMCommentEnd(LanguageDefinition *self) { return self->mCommentEnd; }
void wrap_LanguageDefinition_SetMSingleLineComment(LanguageDefinition *LanguageDefinitionPtr, string v) { LanguageDefinitionPtr->mSingleLineComment = v; }
string wrap_LanguageDefinition_GetMSingleLineComment(LanguageDefinition *self) { return self->mSingleLineComment; }
void wrap_LanguageDefinition_SetMPreprocChar(LanguageDefinition *LanguageDefinitionPtr, char v) { LanguageDefinitionPtr->mPreprocChar = v; }
char wrap_LanguageDefinition_GetMPreprocChar(LanguageDefinition *self) { return self->mPreprocChar; }
void wrap_LanguageDefinition_SetMAutoIndentation(LanguageDefinition *LanguageDefinitionPtr, bool v) { LanguageDefinitionPtr->mAutoIndentation = v; }
bool wrap_LanguageDefinition_GetMAutoIndentation(LanguageDefinition *self) { return self->mAutoIndentation; }
void wrap_LanguageDefinition_SetMTokenize(LanguageDefinition *LanguageDefinitionPtr, TokenizeCallback v) { LanguageDefinitionPtr->mTokenize = v; }
TokenizeCallback wrap_LanguageDefinition_GetMTokenize(LanguageDefinition *self) { return self->mTokenize; }
void wrap_LanguageDefinition_SetMTokenRegexStrings(LanguageDefinition *LanguageDefinitionPtr, TokenRegexStrings v) { LanguageDefinitionPtr->mTokenRegexStrings = v; }
TokenRegexStrings wrap_LanguageDefinition_GetMTokenRegexStrings(LanguageDefinition *self) { return self->mTokenRegexStrings; }
void wrap_LanguageDefinition_SetMCaseSensitive(LanguageDefinition *LanguageDefinitionPtr, bool v) { LanguageDefinitionPtr->mCaseSensitive = v; }
bool wrap_LanguageDefinition_GetMCaseSensitive(LanguageDefinition *self) { return self->mCaseSensitive; }
