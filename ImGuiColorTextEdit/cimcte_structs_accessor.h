// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

#pragma once

#include "cimcte_wrapper.h"

#ifdef __cplusplus
extern "C" {
#endif

extern void wrap_Breakpoint_SetMLine(Breakpoint *BreakpointPtr, int v);
extern int wrap_Breakpoint_GetMLine(Breakpoint *self);
extern void wrap_Breakpoint_SetMEnabled(Breakpoint *BreakpointPtr, bool v);
extern bool wrap_Breakpoint_GetMEnabled(Breakpoint *self);
extern void wrap_Breakpoint_SetMCondition(Breakpoint *BreakpointPtr, string v);
extern string wrap_Breakpoint_GetMCondition(Breakpoint *self);
extern void wrap_Coordinates_SetMLine(Coordinates *CoordinatesPtr, int v);
extern int wrap_Coordinates_GetMLine(Coordinates *self);
extern void wrap_Coordinates_SetMColumn(Coordinates *CoordinatesPtr, int v);
extern int wrap_Coordinates_GetMColumn(Coordinates *self);
extern void wrap_Glyph_SetMChar(Glyph *GlyphPtr, Char v);
extern Char wrap_Glyph_GetMChar(Glyph *self);
extern void wrap_Glyph_SetMColorIndex(Glyph *GlyphPtr, PaletteIndex v);
extern PaletteIndex wrap_Glyph_GetMColorIndex(Glyph *self);
extern void wrap_Glyph_SetMComment(Glyph *GlyphPtr, bool v);
extern bool wrap_Glyph_GetMComment(Glyph *self);
extern void wrap_Glyph_SetMMultiLineComment(Glyph *GlyphPtr, bool v);
extern bool wrap_Glyph_GetMMultiLineComment(Glyph *self);
extern void wrap_Glyph_SetMPreprocessor(Glyph *GlyphPtr, bool v);
extern bool wrap_Glyph_GetMPreprocessor(Glyph *self);
extern void wrap_Identifier_SetMLocation(Identifier *IdentifierPtr, Coordinates v);
extern Coordinates wrap_Identifier_GetMLocation(Identifier *self);
extern void wrap_Identifier_SetMDeclaration(Identifier *IdentifierPtr, string v);
extern string wrap_Identifier_GetMDeclaration(Identifier *self);
extern void wrap_LanguageDefinition_SetMName(LanguageDefinition *LanguageDefinitionPtr, string v);
extern string wrap_LanguageDefinition_GetMName(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMKeywords(LanguageDefinition *LanguageDefinitionPtr, Keywords v);
extern Keywords wrap_LanguageDefinition_GetMKeywords(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMIdentifiers(LanguageDefinition *LanguageDefinitionPtr, Identifiers v);
extern Identifiers wrap_LanguageDefinition_GetMIdentifiers(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMPreprocIdentifiers(LanguageDefinition *LanguageDefinitionPtr, Identifiers v);
extern Identifiers wrap_LanguageDefinition_GetMPreprocIdentifiers(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMCommentStart(LanguageDefinition *LanguageDefinitionPtr, string v);
extern string wrap_LanguageDefinition_GetMCommentStart(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMCommentEnd(LanguageDefinition *LanguageDefinitionPtr, string v);
extern string wrap_LanguageDefinition_GetMCommentEnd(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMSingleLineComment(LanguageDefinition *LanguageDefinitionPtr, string v);
extern string wrap_LanguageDefinition_GetMSingleLineComment(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMPreprocChar(LanguageDefinition *LanguageDefinitionPtr, char v);
extern char wrap_LanguageDefinition_GetMPreprocChar(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMAutoIndentation(LanguageDefinition *LanguageDefinitionPtr, bool v);
extern bool wrap_LanguageDefinition_GetMAutoIndentation(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMTokenize(LanguageDefinition *LanguageDefinitionPtr, TokenizeCallback v);
extern TokenizeCallback wrap_LanguageDefinition_GetMTokenize(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMTokenRegexStrings(LanguageDefinition *LanguageDefinitionPtr, TokenRegexStrings v);
extern TokenRegexStrings wrap_LanguageDefinition_GetMTokenRegexStrings(LanguageDefinition *self);
extern void wrap_LanguageDefinition_SetMCaseSensitive(LanguageDefinition *LanguageDefinitionPtr, bool v);
extern bool wrap_LanguageDefinition_GetMCaseSensitive(LanguageDefinition *self);

#ifdef __cplusplus
}
#endif
