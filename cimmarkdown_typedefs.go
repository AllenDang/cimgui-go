// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include <stdlib.h>
// #include <memory.h>
// #include "extra_types.h"
// #include "cimmarkdown_wrapper.h"
// #include "cimmarkdown_typedefs.h"
import "C"

type Emphasis struct {
	CData *C.Emphasis
}

func (self *Emphasis) handle() (result *C.Emphasis, fin func()) {
	return self.CData, func() {}
}

func (self Emphasis) c() (C.Emphasis, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newEmphasisFromC(cvalue *C.Emphasis) *Emphasis {
	return &Emphasis{CData: cvalue}
}

type Line struct {
	CData *C.Line
}

func (self *Line) handle() (result *C.Line, fin func()) {
	return self.CData, func() {}
}

func (self Line) c() (C.Line, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newLineFromC(cvalue *C.Line) *Line {
	return &Line{CData: cvalue}
}

type Link struct {
	CData *C.Link
}

func (self *Link) handle() (result *C.Link, fin func()) {
	return self.CData, func() {}
}

func (self Link) c() (C.Link, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newLinkFromC(cvalue *C.Link) *Link {
	return &Link{CData: cvalue}
}

type MarkdownConfig struct {
	CData *C.MarkdownConfig
}

func (self *MarkdownConfig) handle() (result *C.MarkdownConfig, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownConfig) c() (C.MarkdownConfig, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownConfigFromC(cvalue *C.MarkdownConfig) *MarkdownConfig {
	return &MarkdownConfig{CData: cvalue}
}

type MarkdownFormatInfo struct {
	CData *C.MarkdownFormatInfo
}

func (self *MarkdownFormatInfo) handle() (result *C.MarkdownFormatInfo, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownFormatInfo) c() (C.MarkdownFormatInfo, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownFormatInfoFromC(cvalue *C.MarkdownFormatInfo) *MarkdownFormatInfo {
	return &MarkdownFormatInfo{CData: cvalue}
}

type MarkdownHeadingFormat struct {
	CData *C.MarkdownHeadingFormat
}

func (self *MarkdownHeadingFormat) handle() (result *C.MarkdownHeadingFormat, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownHeadingFormat) c() (C.MarkdownHeadingFormat, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownHeadingFormatFromC(cvalue *C.MarkdownHeadingFormat) *MarkdownHeadingFormat {
	return &MarkdownHeadingFormat{CData: cvalue}
}

type MarkdownImageData struct {
	CData *C.MarkdownImageData
}

func (self *MarkdownImageData) handle() (result *C.MarkdownImageData, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownImageData) c() (C.MarkdownImageData, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownImageDataFromC(cvalue *C.MarkdownImageData) *MarkdownImageData {
	return &MarkdownImageData{CData: cvalue}
}

type MarkdownLinkCallbackData struct {
	CData *C.MarkdownLinkCallbackData
}

func (self *MarkdownLinkCallbackData) handle() (result *C.MarkdownLinkCallbackData, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownLinkCallbackData) c() (C.MarkdownLinkCallbackData, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownLinkCallbackDataFromC(cvalue *C.MarkdownLinkCallbackData) *MarkdownLinkCallbackData {
	return &MarkdownLinkCallbackData{CData: cvalue}
}

type MarkdownTooltipCallbackData struct {
	CData *C.MarkdownTooltipCallbackData
}

func (self *MarkdownTooltipCallbackData) handle() (result *C.MarkdownTooltipCallbackData, fin func()) {
	return self.CData, func() {}
}

func (self MarkdownTooltipCallbackData) c() (C.MarkdownTooltipCallbackData, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newMarkdownTooltipCallbackDataFromC(cvalue *C.MarkdownTooltipCallbackData) *MarkdownTooltipCallbackData {
	return &MarkdownTooltipCallbackData{CData: cvalue}
}

type TextBlock struct {
	CData *C.TextBlock
}

func (self *TextBlock) handle() (result *C.TextBlock, fin func()) {
	return self.CData, func() {}
}

func (self TextBlock) c() (C.TextBlock, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newTextBlockFromC(cvalue *C.TextBlock) *TextBlock {
	return &TextBlock{CData: cvalue}
}

type TextRegion struct {
	CData *C.TextRegion
}

func (self *TextRegion) handle() (result *C.TextRegion, fin func()) {
	return self.CData, func() {}
}

func (self TextRegion) c() (C.TextRegion, func()) {
	result, fn := self.handle()
	return *result, fn
}

func newTextRegionFromC(cvalue *C.TextRegion) *TextRegion {
	return &TextRegion{CData: cvalue}
}
