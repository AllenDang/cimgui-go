//This file is automatically generated by generator.lua from https://github.com/cimgui/imnodes
//based on imnodes.h file version XXX from https://github.com/Nelarius/imnodes
#include "imgui.h"
#include "imgui_internal.h"
#include "./ImGuiColorTextEdit/TextEditor.h"
#include "cimCTE.h"



CIMGUI_API Breakpoint* Breakpoint_Breakpoint(void)
{
    return IM_NEW(Breakpoint)();
}
CIMGUI_API void Breakpoint_destroy(Breakpoint* self)
{
    IM_DELETE(self);
}
CIMGUI_API Coordinates* Coordinates_Coordinates_Nil(void)
{
    return IM_NEW(Coordinates)();
}
CIMGUI_API void Coordinates_destroy(Coordinates* self)
{
    IM_DELETE(self);
}
CIMGUI_API Coordinates* Coordinates_Coordinates_Int(int aLine,int aColumn)
{
    return IM_NEW(Coordinates)(aLine,aColumn);
}
CIMGUI_API Coordinates Coordinates_Invalid()
{
    return Coordinates::Invalid();
}
CIMGUI_API Glyph* Glyph_Glyph(Char aChar,PaletteIndex aColorIndex)
{
    return IM_NEW(Glyph)(aChar,aColorIndex);
}
CIMGUI_API void Glyph_destroy(Glyph* self)
{
    IM_DELETE(self);
}
CIMGUI_API LanguageDefinition* LanguageDefinition_LanguageDefinition(void)
{
    return IM_NEW(LanguageDefinition)();
}
CIMGUI_API void LanguageDefinition_destroy(LanguageDefinition* self)
{
    IM_DELETE(self);
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_CPlusPlus()
{
    return &LanguageDefinition::CPlusPlus();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_HLSL()
{
    return &LanguageDefinition::HLSL();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_GLSL()
{
    return &LanguageDefinition::GLSL();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_C()
{
    return &LanguageDefinition::C();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_SQL()
{
    return &LanguageDefinition::SQL();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_AngelScript()
{
    return &LanguageDefinition::AngelScript();
}
CIMGUI_API const LanguageDefinition* LanguageDefinition_Lua()
{
    return &LanguageDefinition::Lua();
}
CIMGUI_API TextEditor* TextEditor_TextEditor(void)
{
    return IM_NEW(TextEditor)();
}
CIMGUI_API void TextEditor_destroy(TextEditor* self)
{
    IM_DELETE(self);
}
CIMGUI_API void TextEditor_SetLanguageDefinition(TextEditor* self,const LanguageDefinition aLanguageDef)
{
    return self->SetLanguageDefinition(aLanguageDef);
}
CIMGUI_API const LanguageDefinition* TextEditor_GetLanguageDefinition(TextEditor* self)
{
    return &self->GetLanguageDefinition();
}
CIMGUI_API const Palette* TextEditor_GetPalette(TextEditor* self)
{
    return &self->GetPalette();
}
CIMGUI_API void TextEditor_SetPalette(TextEditor* self,const Palette aValue)
{
    return self->SetPalette(aValue);
}
CIMGUI_API void TextEditor_SetErrorMarkers(TextEditor* self,const ErrorMarkers aMarkers)
{
    return self->SetErrorMarkers(aMarkers);
}
CIMGUI_API void TextEditor_SetBreakpoints(TextEditor* self,const Breakpoints aMarkers)
{
    return self->SetBreakpoints(aMarkers);
}
CIMGUI_API void TextEditor_Render(TextEditor* self,const char* aTitle,const ImVec2 aSize,bool aBorder)
{
    return self->Render(aTitle,aSize,aBorder);
}
CIMGUI_API string TextEditor_GetSelectedText(TextEditor* self)
{
    return self->GetSelectedText();
}
CIMGUI_API string TextEditor_GetCurrentLineText(TextEditor* self)
{
    return self->GetCurrentLineText();
}
CIMGUI_API int TextEditor_GetTotalLines(TextEditor* self)
{
    return self->GetTotalLines();
}
CIMGUI_API bool TextEditor_IsOverwrite(TextEditor* self)
{
    return self->IsOverwrite();
}
CIMGUI_API void TextEditor_SetReadOnly(TextEditor* self,bool aValue)
{
    return self->SetReadOnly(aValue);
}
CIMGUI_API bool TextEditor_IsReadOnly(TextEditor* self)
{
    return self->IsReadOnly();
}
CIMGUI_API bool TextEditor_IsTextChanged(TextEditor* self)
{
    return self->IsTextChanged();
}
CIMGUI_API bool TextEditor_IsCursorPositionChanged(TextEditor* self)
{
    return self->IsCursorPositionChanged();
}
CIMGUI_API bool TextEditor_IsColorizerEnabled(TextEditor* self)
{
    return self->IsColorizerEnabled();
}
CIMGUI_API void TextEditor_SetColorizerEnable(TextEditor* self,bool aValue)
{
    return self->SetColorizerEnable(aValue);
}
CIMGUI_API Coordinates TextEditor_GetCursorPosition(TextEditor* self)
{
    return self->GetCursorPosition();
}
CIMGUI_API void TextEditor_SetCursorPosition(TextEditor* self,const Coordinates aPosition)
{
    return self->SetCursorPosition(aPosition);
}
CIMGUI_API void TextEditor_SetHandleMouseInputs(TextEditor* self,bool aValue)
{
    return self->SetHandleMouseInputs(aValue);
}
CIMGUI_API bool TextEditor_IsHandleMouseInputsEnabled(TextEditor* self)
{
    return self->IsHandleMouseInputsEnabled();
}
CIMGUI_API void TextEditor_SetHandleKeyboardInputs(TextEditor* self,bool aValue)
{
    return self->SetHandleKeyboardInputs(aValue);
}
CIMGUI_API bool TextEditor_IsHandleKeyboardInputsEnabled(TextEditor* self)
{
    return self->IsHandleKeyboardInputsEnabled();
}
CIMGUI_API void TextEditor_SetImGuiChildIgnored(TextEditor* self,bool aValue)
{
    return self->SetImGuiChildIgnored(aValue);
}
CIMGUI_API bool TextEditor_IsImGuiChildIgnored(TextEditor* self)
{
    return self->IsImGuiChildIgnored();
}
CIMGUI_API void TextEditor_SetShowWhitespaces(TextEditor* self,bool aValue)
{
    return self->SetShowWhitespaces(aValue);
}
CIMGUI_API bool TextEditor_IsShowingWhitespaces(TextEditor* self)
{
    return self->IsShowingWhitespaces();
}
CIMGUI_API void TextEditor_SetTabSize(TextEditor* self,int aValue)
{
    return self->SetTabSize(aValue);
}
CIMGUI_API int TextEditor_GetTabSize(TextEditor* self)
{
    return self->GetTabSize();
}
CIMGUI_API void TextEditor_InsertText_std::string(TextEditor* self,const std::string aValue)
{
    return self->InsertText(aValue);
}
CIMGUI_API void TextEditor_InsertText_Str(TextEditor* self,const char* aValue)
{
    return self->InsertText(aValue);
}
CIMGUI_API void TextEditor_MoveUp(TextEditor* self,int aAmount,bool aSelect)
{
    return self->MoveUp(aAmount,aSelect);
}
CIMGUI_API void TextEditor_MoveDown(TextEditor* self,int aAmount,bool aSelect)
{
    return self->MoveDown(aAmount,aSelect);
}
CIMGUI_API void TextEditor_MoveLeft(TextEditor* self,int aAmount,bool aSelect,bool aWordMode)
{
    return self->MoveLeft(aAmount,aSelect,aWordMode);
}
CIMGUI_API void TextEditor_MoveRight(TextEditor* self,int aAmount,bool aSelect,bool aWordMode)
{
    return self->MoveRight(aAmount,aSelect,aWordMode);
}
CIMGUI_API void TextEditor_MoveTop(TextEditor* self,bool aSelect)
{
    return self->MoveTop(aSelect);
}
CIMGUI_API void TextEditor_MoveBottom(TextEditor* self,bool aSelect)
{
    return self->MoveBottom(aSelect);
}
CIMGUI_API void TextEditor_MoveHome(TextEditor* self,bool aSelect)
{
    return self->MoveHome(aSelect);
}
CIMGUI_API void TextEditor_MoveEnd(TextEditor* self,bool aSelect)
{
    return self->MoveEnd(aSelect);
}
CIMGUI_API void TextEditor_SetSelectionStart(TextEditor* self,const Coordinates aPosition)
{
    return self->SetSelectionStart(aPosition);
}
CIMGUI_API void TextEditor_SetSelectionEnd(TextEditor* self,const Coordinates aPosition)
{
    return self->SetSelectionEnd(aPosition);
}
CIMGUI_API void TextEditor_SetSelection(TextEditor* self,const Coordinates aStart,const Coordinates aEnd,SelectionMode aMode)
{
    return self->SetSelection(aStart,aEnd,aMode);
}
CIMGUI_API void TextEditor_SelectWordUnderCursor(TextEditor* self)
{
    return self->SelectWordUnderCursor();
}
CIMGUI_API void TextEditor_SelectAll(TextEditor* self)
{
    return self->SelectAll();
}
CIMGUI_API bool TextEditor_HasSelection(TextEditor* self)
{
    return self->HasSelection();
}
CIMGUI_API void TextEditor_Copy(TextEditor* self)
{
    return self->Copy();
}
CIMGUI_API void TextEditor_Cut(TextEditor* self)
{
    return self->Cut();
}
CIMGUI_API void TextEditor_Paste(TextEditor* self)
{
    return self->Paste();
}
CIMGUI_API void TextEditor_Delete(TextEditor* self)
{
    return self->Delete();
}
CIMGUI_API bool TextEditor_CanUndo(TextEditor* self)
{
    return self->CanUndo();
}
CIMGUI_API bool TextEditor_CanRedo(TextEditor* self)
{
    return self->CanRedo();
}
CIMGUI_API void TextEditor_Undo(TextEditor* self,int aSteps)
{
    return self->Undo(aSteps);
}
CIMGUI_API void TextEditor_Redo(TextEditor* self,int aSteps)
{
    return self->Redo(aSteps);
}
CIMGUI_API const Palette* TextEditor_GetDarkPalette()
{
    return &TextEditor::GetDarkPalette();
}
CIMGUI_API const Palette* TextEditor_GetLightPalette()
{
    return &TextEditor::GetLightPalette();
}
CIMGUI_API const Palette* TextEditor_GetRetroBluePalette()
{
    return &TextEditor::GetRetroBluePalette();
}

////////////////manually generated
CIMGUI_API void TextEditor_SetText(TextEditor* self,const char* aText)
{
    return self->SetText(std::string(aText));
}
CIMGUI_API const char* TextEditor_GetText(TextEditor* self)
{
    return self->GetText().c_str();
}
CIMGUI_API void TextEditor_ImGuiDebugPanel(TextEditor* self,const char* panelName)
{
    return self->ImGuiDebugPanel(std::string(panelName));
}


