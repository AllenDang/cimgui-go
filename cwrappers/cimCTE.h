//This file is automatically generated by generator.lua from https://github.com/cimgui/imnodes
//based on imnodes.h file version XXX from https://github.com/Nelarius/imnodes
#ifndef CIMGUICTE_INCLUDED
#define CIMGUICTE_INCLUDED

#include "cimgui.h"

#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS

typedef struct TextEditor TextEditor;
struct TextEditor
{
};
typedef enum {
  Dark, Light, Mariana, RetroBlue
 }PaletteId;
typedef enum {
  None, Cpp, C, Cs, Python, Lua, Json, Sql, AngelScript, Glsl, Hlsl
 }LanguageDefinitionId;
typedef enum {
  FirstVisibleLine, Centered, LastVisibleLine
 }SetViewAtLineMode;
#else
#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef TextEditor::LanguageDefinitionId LanguageDefinitionId;
typedef TextEditor::PaletteId PaletteId;
typedef TextEditor::SetViewAtLineMode SetViewAtLineMode;
typedef std::vector<std::string> std_vector_std_string;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API TextEditor* TextEditor_TextEditor(void);
CIMGUI_API void TextEditor_destroy(TextEditor* self);
CIMGUI_API void TextEditor_SetReadOnlyEnabled(TextEditor* self,bool aValue);
CIMGUI_API bool TextEditor_IsReadOnlyEnabled(TextEditor* self);
CIMGUI_API void TextEditor_SetAutoIndentEnabled(TextEditor* self,bool aValue);
CIMGUI_API bool TextEditor_IsAutoIndentEnabled(TextEditor* self);
CIMGUI_API void TextEditor_SetShowWhitespacesEnabled(TextEditor* self,bool aValue);
CIMGUI_API bool TextEditor_IsShowWhitespacesEnabled(TextEditor* self);
CIMGUI_API void TextEditor_SetShowLineNumbersEnabled(TextEditor* self,bool aValue);
CIMGUI_API bool TextEditor_IsShowLineNumbersEnabled(TextEditor* self);
CIMGUI_API void TextEditor_SetShortTabsEnabled(TextEditor* self,bool aValue);
CIMGUI_API bool TextEditor_IsShortTabsEnabled(TextEditor* self);
CIMGUI_API int TextEditor_GetLineCount(TextEditor* self);
CIMGUI_API bool TextEditor_IsOverwriteEnabled(TextEditor* self);
CIMGUI_API void TextEditor_SetPalette(TextEditor* self,PaletteId aValue);
CIMGUI_API PaletteId TextEditor_GetPalette(TextEditor* self);
CIMGUI_API void TextEditor_SetLanguageDefinition(TextEditor* self,LanguageDefinitionId aValue);
CIMGUI_API LanguageDefinitionId TextEditor_GetLanguageDefinition(TextEditor* self);
CIMGUI_API const char* TextEditor_GetLanguageDefinitionName(TextEditor* self);
CIMGUI_API void TextEditor_SetTabSize(TextEditor* self,int aValue);
CIMGUI_API int TextEditor_GetTabSize(TextEditor* self);
CIMGUI_API void TextEditor_SetLineSpacing(TextEditor* self,float aValue);
CIMGUI_API float TextEditor_GetLineSpacing(TextEditor* self);
CIMGUI_API void TextEditor_SetDefaultPalette(PaletteId aValue);
CIMGUI_API PaletteId TextEditor_GetDefaultPalette(void);
CIMGUI_API void TextEditor_SelectAll(TextEditor* self);
CIMGUI_API void TextEditor_SelectLine(TextEditor* self,int aLine);
CIMGUI_API void TextEditor_SelectRegion(TextEditor* self,int aStartLine,int aStartChar,int aEndLine,int aEndChar);
CIMGUI_API void TextEditor_SelectNextOccurrenceOf(TextEditor* self,const char* aText,int aTextSize,bool aCaseSensitive);
CIMGUI_API void TextEditor_SelectAllOccurrencesOf(TextEditor* self,const char* aText,int aTextSize,bool aCaseSensitive);
CIMGUI_API bool TextEditor_AnyCursorHasSelection(TextEditor* self);
CIMGUI_API bool TextEditor_AllCursorsHaveSelection(TextEditor* self);
CIMGUI_API void TextEditor_ClearExtraCursors(TextEditor* self);
CIMGUI_API void TextEditor_ClearSelections(TextEditor* self);
CIMGUI_API void TextEditor_SetCursorPosition(TextEditor* self,int aLine,int aCharIndex);
CIMGUI_API void TextEditor_GetCursorPosition(TextEditor* self,int* outLine,int* outColumn);
CIMGUI_API int TextEditor_GetFirstVisibleLine(TextEditor* self);
CIMGUI_API int TextEditor_GetLastVisibleLine(TextEditor* self);
CIMGUI_API void TextEditor_SetViewAtLine(TextEditor* self,int aLine,SetViewAtLineMode aMode);
CIMGUI_API void TextEditor_Copy(TextEditor* self);
CIMGUI_API void TextEditor_Cut(TextEditor* self);
CIMGUI_API void TextEditor_Paste(TextEditor* self);
CIMGUI_API void TextEditor_Undo(TextEditor* self,int aSteps);
CIMGUI_API void TextEditor_Redo(TextEditor* self,int aSteps);
CIMGUI_API bool TextEditor_CanUndo(TextEditor* self);
CIMGUI_API bool TextEditor_CanRedo(TextEditor* self);
CIMGUI_API int TextEditor_GetUndoIndex(TextEditor* self);
CIMGUI_API bool TextEditor_Render(TextEditor* self,const char* aTitle,bool aParentIsFocused,const ImVec2 aSize,bool aBorder);
CIMGUI_API void TextEditor_UnitTests(TextEditor* self);


///////////////manual generated
CIMGUI_API void TextEditor_SetText(TextEditor* self,const char* aText);
CIMGUI_API const char* TextEditor_GetText(TextEditor* self);
CIMGUI_API void TextEditor_ImGuiDebugPanel(TextEditor* self,const char* panelName);
#endif //CIMGUICTE_INCLUDED




