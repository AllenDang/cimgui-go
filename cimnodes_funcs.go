// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include "extra_types.h"
// #include "cimnodes_structs_accessor.h"
// #include "cimnodes_wrapper.h"
import "C"
import "unsafe"

func NewEmulateThreeButtonMouse() EmulateThreeButtonMouse {
	return (EmulateThreeButtonMouse)(unsafe.Pointer(C.EmulateThreeButtonMouse_EmulateThreeButtonMouse()))
}

func (self EmulateThreeButtonMouse) Destroy() {
	C.EmulateThreeButtonMouse_destroy(self.handle())
}

func NewNodesIO() NodesIO {
	return (NodesIO)(unsafe.Pointer(C.ImNodesIO_ImNodesIO()))
}

func (self NodesIO) Destroy() {
	C.ImNodesIO_destroy(self.handle())
}

func NewNodesStyle() NodesStyle {
	return (NodesStyle)(unsafe.Pointer(C.ImNodesStyle_ImNodesStyle()))
}

func (self NodesStyle) Destroy() {
	C.ImNodesStyle_destroy(self.handle())
}

func NewLinkDetachWithModifierClick() LinkDetachWithModifierClick {
	return (LinkDetachWithModifierClick)(unsafe.Pointer(C.LinkDetachWithModifierClick_LinkDetachWithModifierClick()))
}

func (self LinkDetachWithModifierClick) Destroy() {
	C.LinkDetachWithModifierClick_destroy(self.handle())
}

func NewMultipleSelectModifier() MultipleSelectModifier {
	return (MultipleSelectModifier)(unsafe.Pointer(C.MultipleSelectModifier_MultipleSelectModifier()))
}

func (self MultipleSelectModifier) Destroy() {
	C.MultipleSelectModifier_destroy(self.handle())
}

func (self NodesIO) SetEmulateThreeButtonMouse(v EmulateThreeButtonMouse) {
	C.wrap_ImNodesIO_SetEmulateThreeButtonMouse(self.handle(), v.c())
}

func (self NodesIO) EmulateThreeButtonMouse() EmulateThreeButtonMouse {
	return newEmulateThreeButtonMouseFromC(C.wrap_ImNodesIO_GetEmulateThreeButtonMouse(self.handle()))
}

func (self NodesIO) SetLinkDetachWithModifierClick(v LinkDetachWithModifierClick) {
	C.wrap_ImNodesIO_SetLinkDetachWithModifierClick(self.handle(), v.c())
}

func (self NodesIO) LinkDetachWithModifierClick() LinkDetachWithModifierClick {
	return newLinkDetachWithModifierClickFromC(C.wrap_ImNodesIO_GetLinkDetachWithModifierClick(self.handle()))
}

func (self NodesIO) SetMultipleSelectModifier(v MultipleSelectModifier) {
	C.wrap_ImNodesIO_SetMultipleSelectModifier(self.handle(), v.c())
}

func (self NodesIO) MultipleSelectModifier() MultipleSelectModifier {
	return newMultipleSelectModifierFromC(C.wrap_ImNodesIO_GetMultipleSelectModifier(self.handle()))
}

func (self NodesIO) SetAltMouseButton(v int32) {
	C.wrap_ImNodesIO_SetAltMouseButton(self.handle(), C.int(v))
}

func (self NodesIO) AltMouseButton() int {
	return int(C.wrap_ImNodesIO_GetAltMouseButton(self.handle()))
}

func (self NodesIO) SetAutoPanningSpeed(v float32) {
	C.wrap_ImNodesIO_SetAutoPanningSpeed(self.handle(), C.float(v))
}

func (self NodesIO) AutoPanningSpeed() float32 {
	return float32(C.wrap_ImNodesIO_GetAutoPanningSpeed(self.handle()))
}

func (self NodesStyle) SetGridSpacing(v float32) {
	C.wrap_ImNodesStyle_SetGridSpacing(self.handle(), C.float(v))
}

func (self NodesStyle) GridSpacing() float32 {
	return float32(C.wrap_ImNodesStyle_GetGridSpacing(self.handle()))
}

func (self NodesStyle) SetNodeCornerRounding(v float32) {
	C.wrap_ImNodesStyle_SetNodeCornerRounding(self.handle(), C.float(v))
}

func (self NodesStyle) NodeCornerRounding() float32 {
	return float32(C.wrap_ImNodesStyle_GetNodeCornerRounding(self.handle()))
}

func (self NodesStyle) SetNodePadding(v Vec2) {
	C.wrap_ImNodesStyle_SetNodePadding(self.handle(), v.toC())
}

func (self NodesStyle) NodePadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.wrap_ImNodesStyle_GetNodePadding(self.handle()))
	return *out
}

func (self NodesStyle) SetNodeBorderThickness(v float32) {
	C.wrap_ImNodesStyle_SetNodeBorderThickness(self.handle(), C.float(v))
}

func (self NodesStyle) NodeBorderThickness() float32 {
	return float32(C.wrap_ImNodesStyle_GetNodeBorderThickness(self.handle()))
}

func (self NodesStyle) SetLinkThickness(v float32) {
	C.wrap_ImNodesStyle_SetLinkThickness(self.handle(), C.float(v))
}

func (self NodesStyle) LinkThickness() float32 {
	return float32(C.wrap_ImNodesStyle_GetLinkThickness(self.handle()))
}

func (self NodesStyle) SetLinkLineSegmentsPerLength(v float32) {
	C.wrap_ImNodesStyle_SetLinkLineSegmentsPerLength(self.handle(), C.float(v))
}

func (self NodesStyle) LinkLineSegmentsPerLength() float32 {
	return float32(C.wrap_ImNodesStyle_GetLinkLineSegmentsPerLength(self.handle()))
}

func (self NodesStyle) SetLinkHoverDistance(v float32) {
	C.wrap_ImNodesStyle_SetLinkHoverDistance(self.handle(), C.float(v))
}

func (self NodesStyle) LinkHoverDistance() float32 {
	return float32(C.wrap_ImNodesStyle_GetLinkHoverDistance(self.handle()))
}

func (self NodesStyle) SetPinCircleRadius(v float32) {
	C.wrap_ImNodesStyle_SetPinCircleRadius(self.handle(), C.float(v))
}

func (self NodesStyle) PinCircleRadius() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinCircleRadius(self.handle()))
}

func (self NodesStyle) SetPinQuadSideLength(v float32) {
	C.wrap_ImNodesStyle_SetPinQuadSideLength(self.handle(), C.float(v))
}

func (self NodesStyle) PinQuadSideLength() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinQuadSideLength(self.handle()))
}

func (self NodesStyle) SetPinTriangleSideLength(v float32) {
	C.wrap_ImNodesStyle_SetPinTriangleSideLength(self.handle(), C.float(v))
}

func (self NodesStyle) PinTriangleSideLength() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinTriangleSideLength(self.handle()))
}

func (self NodesStyle) SetPinLineThickness(v float32) {
	C.wrap_ImNodesStyle_SetPinLineThickness(self.handle(), C.float(v))
}

func (self NodesStyle) PinLineThickness() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinLineThickness(self.handle()))
}

func (self NodesStyle) SetPinHoverRadius(v float32) {
	C.wrap_ImNodesStyle_SetPinHoverRadius(self.handle(), C.float(v))
}

func (self NodesStyle) PinHoverRadius() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinHoverRadius(self.handle()))
}

func (self NodesStyle) SetPinOffset(v float32) {
	C.wrap_ImNodesStyle_SetPinOffset(self.handle(), C.float(v))
}

func (self NodesStyle) PinOffset() float32 {
	return float32(C.wrap_ImNodesStyle_GetPinOffset(self.handle()))
}

func (self NodesStyle) SetMiniMapPadding(v Vec2) {
	C.wrap_ImNodesStyle_SetMiniMapPadding(self.handle(), v.toC())
}

func (self NodesStyle) MiniMapPadding() Vec2 {
	out := &Vec2{}
	out.fromC(C.wrap_ImNodesStyle_GetMiniMapPadding(self.handle()))
	return *out
}

func (self NodesStyle) SetMiniMapOffset(v Vec2) {
	C.wrap_ImNodesStyle_SetMiniMapOffset(self.handle(), v.toC())
}

func (self NodesStyle) MiniMapOffset() Vec2 {
	out := &Vec2{}
	out.fromC(C.wrap_ImNodesStyle_GetMiniMapOffset(self.handle()))
	return *out
}

func (self NodesStyle) SetFlags(v NodesStyleFlags) {
	C.wrap_ImNodesStyle_SetFlags(self.handle(), C.ImNodesStyleFlags(v))
}

func (self NodesStyle) Flags() NodesStyleFlags {
	return NodesStyleFlags(C.wrap_ImNodesStyle_GetFlags(self.handle()))
}
