// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include "extra_types.h"
// #include "cimnodes_structs_accessor.h"
// #include "cimnodes_wrapper.h"
import "C"

func NewEmulateThreeButtonMouse() EmulateThreeButtonMouse {
	return newEmulateThreeButtonMouseFromC(C.EmulateThreeButtonMouse_EmulateThreeButtonMouse())
}

func (self EmulateThreeButtonMouse) Destroy() {
	selfArg, selfFin := self.handle()
	C.EmulateThreeButtonMouse_destroy(selfArg)

	selfFin()
}

func NewNodesIO() NodesIO {
	return newNodesIOFromC(C.ImNodesIO_ImNodesIO())
}

func (self NodesIO) Destroy() {
	selfArg, selfFin := self.handle()
	C.ImNodesIO_destroy(selfArg)

	selfFin()
}

func NewNodesStyle() NodesStyle {
	return newNodesStyleFromC(C.ImNodesStyle_ImNodesStyle())
}

func (self NodesStyle) Destroy() {
	selfArg, selfFin := self.handle()
	C.ImNodesStyle_destroy(selfArg)

	selfFin()
}

func NewLinkDetachWithModifierClick() LinkDetachWithModifierClick {
	return newLinkDetachWithModifierClickFromC(C.LinkDetachWithModifierClick_LinkDetachWithModifierClick())
}

func (self LinkDetachWithModifierClick) Destroy() {
	selfArg, selfFin := self.handle()
	C.LinkDetachWithModifierClick_destroy(selfArg)

	selfFin()
}

func NewMultipleSelectModifier() MultipleSelectModifier {
	return newMultipleSelectModifierFromC(C.MultipleSelectModifier_MultipleSelectModifier())
}

func (self MultipleSelectModifier) Destroy() {
	selfArg, selfFin := self.handle()
	C.MultipleSelectModifier_destroy(selfArg)

	selfFin()
}

func (self NodesIO) SetEmulateThreeButtonMouse(v EmulateThreeButtonMouse) {
	vArg, vFin := v.c()

	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesIO_SetEmulateThreeButtonMouse(selfArg, vArg)

	vFin()
}

func (self NodesIO) EmulateThreeButtonMouse() EmulateThreeButtonMouse {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()

	result := C.wrap_ImNodesIO_GetEmulateThreeButtonMouse(selfArg)
	return newEmulateThreeButtonMouseFromC(&result)
}

func (self NodesIO) SetLinkDetachWithModifierClick(v LinkDetachWithModifierClick) {
	vArg, vFin := v.c()

	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesIO_SetLinkDetachWithModifierClick(selfArg, vArg)

	vFin()
}

func (self NodesIO) LinkDetachWithModifierClick() LinkDetachWithModifierClick {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()

	result := C.wrap_ImNodesIO_GetLinkDetachWithModifierClick(selfArg)
	return newLinkDetachWithModifierClickFromC(&result)
}

func (self NodesIO) SetMultipleSelectModifier(v MultipleSelectModifier) {
	vArg, vFin := v.c()

	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesIO_SetMultipleSelectModifier(selfArg, vArg)

	vFin()
}

func (self NodesIO) MultipleSelectModifier() MultipleSelectModifier {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()

	result := C.wrap_ImNodesIO_GetMultipleSelectModifier(selfArg)
	return newMultipleSelectModifierFromC(&result)
}

func (self NodesIO) SetAltMouseButton(v int32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesIO_SetAltMouseButton(selfArg, C.int(v))
}

func (self NodesIO) AltMouseButton() int32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImNodesIO_GetAltMouseButton(selfArg))
}

func (self NodesIO) SetAutoPanningSpeed(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesIO_SetAutoPanningSpeed(selfArg, C.float(v))
}

func (self NodesIO) AutoPanningSpeed() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesIO_GetAutoPanningSpeed(selfArg))
}

func (self NodesStyle) SetGridSpacing(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetGridSpacing(selfArg, C.float(v))
}

func (self NodesStyle) GridSpacing() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetGridSpacing(selfArg))
}

func (self NodesStyle) SetNodeCornerRounding(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetNodeCornerRounding(selfArg, C.float(v))
}

func (self NodesStyle) NodeCornerRounding() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetNodeCornerRounding(selfArg))
}

func (self NodesStyle) SetNodePadding(v Vec2) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetNodePadding(selfArg, v.toC())
}

func (self NodesStyle) NodePadding() Vec2 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return *(&Vec2{}).fromC(C.wrap_ImNodesStyle_GetNodePadding(selfArg))
}

func (self NodesStyle) SetNodeBorderThickness(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetNodeBorderThickness(selfArg, C.float(v))
}

func (self NodesStyle) NodeBorderThickness() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetNodeBorderThickness(selfArg))
}

func (self NodesStyle) SetLinkThickness(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetLinkThickness(selfArg, C.float(v))
}

func (self NodesStyle) LinkThickness() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetLinkThickness(selfArg))
}

func (self NodesStyle) SetLinkLineSegmentsPerLength(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetLinkLineSegmentsPerLength(selfArg, C.float(v))
}

func (self NodesStyle) LinkLineSegmentsPerLength() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetLinkLineSegmentsPerLength(selfArg))
}

func (self NodesStyle) SetLinkHoverDistance(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetLinkHoverDistance(selfArg, C.float(v))
}

func (self NodesStyle) LinkHoverDistance() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetLinkHoverDistance(selfArg))
}

func (self NodesStyle) SetPinCircleRadius(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinCircleRadius(selfArg, C.float(v))
}

func (self NodesStyle) PinCircleRadius() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinCircleRadius(selfArg))
}

func (self NodesStyle) SetPinQuadSideLength(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinQuadSideLength(selfArg, C.float(v))
}

func (self NodesStyle) PinQuadSideLength() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinQuadSideLength(selfArg))
}

func (self NodesStyle) SetPinTriangleSideLength(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinTriangleSideLength(selfArg, C.float(v))
}

func (self NodesStyle) PinTriangleSideLength() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinTriangleSideLength(selfArg))
}

func (self NodesStyle) SetPinLineThickness(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinLineThickness(selfArg, C.float(v))
}

func (self NodesStyle) PinLineThickness() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinLineThickness(selfArg))
}

func (self NodesStyle) SetPinHoverRadius(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinHoverRadius(selfArg, C.float(v))
}

func (self NodesStyle) PinHoverRadius() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinHoverRadius(selfArg))
}

func (self NodesStyle) SetPinOffset(v float32) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetPinOffset(selfArg, C.float(v))
}

func (self NodesStyle) PinOffset() float32 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImNodesStyle_GetPinOffset(selfArg))
}

func (self NodesStyle) SetMiniMapPadding(v Vec2) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetMiniMapPadding(selfArg, v.toC())
}

func (self NodesStyle) MiniMapPadding() Vec2 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return *(&Vec2{}).fromC(C.wrap_ImNodesStyle_GetMiniMapPadding(selfArg))
}

func (self NodesStyle) SetMiniMapOffset(v Vec2) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetMiniMapOffset(selfArg, v.toC())
}

func (self NodesStyle) MiniMapOffset() Vec2 {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return *(&Vec2{}).fromC(C.wrap_ImNodesStyle_GetMiniMapOffset(selfArg))
}

func (self NodesStyle) SetFlags(v NodesStyleFlags) {
	selfArg, selfFin := self.handle()
	defer selfFin()
	C.wrap_ImNodesStyle_SetFlags(selfArg, C.ImNodesStyleFlags(v))
}

func (self NodesStyle) Flags() NodesStyleFlags {
	selfArg, selfFin := self.handle()

	defer func() {
		selfFin()
	}()
	return NodesStyleFlags(C.wrap_ImNodesStyle_GetFlags(selfArg))
}
