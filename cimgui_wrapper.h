// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

#pragma once

#include "cimgui/cimgui.h"

#ifdef __cplusplus
extern "C" {
#endif

extern void wrap_ImColor_HSVV(ImColor *pOut,float h,float s,float v,float a);
extern ImColor* wrap_ImColor_ImColor_Float(float r,float g,float b,float a);
extern ImColor* wrap_ImColor_ImColor_Int(int r,int g,int b,int a);
extern ImColor* wrap_ImColor_ImColor_Nil();
extern ImColor* wrap_ImColor_ImColor_U32(ImU32 rgba);
extern ImColor* wrap_ImColor_ImColor_Vec4(const ImVec4 col);
extern void wrap_ImColor_SetHSVV(ImColor* self,float h,float s,float v,float a);
extern void wrap_ImColor_Destroy(ImColor* self);
extern ImTextureID wrap_ImDrawCmd_GetTexID(ImDrawCmd* self);
extern ImDrawCmd* wrap_ImDrawCmd_ImDrawCmd();
extern void wrap_ImDrawCmd_Destroy(ImDrawCmd* self);
extern void wrap_ImDrawData_Clear(ImDrawData* self);
extern void wrap_ImDrawData_DeIndexAllBuffers(ImDrawData* self);
extern ImDrawData* wrap_ImDrawData_ImDrawData();
extern void wrap_ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 fb_scale);
extern void wrap_ImDrawData_Destroy(ImDrawData* self);
extern void wrap_ImDrawListSharedData_Destroy(ImDrawListSharedData* self);
extern void wrap_ImDrawListSplitter_Clear(ImDrawListSplitter* self);
extern void wrap_ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
extern ImDrawListSplitter* wrap_ImDrawListSplitter_ImDrawListSplitter();
extern void wrap_ImDrawListSplitter_Merge(ImDrawListSplitter* self,ImDrawList* draw_list);
extern void wrap_ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
extern void wrap_ImDrawListSplitter_Split(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
extern void wrap_ImDrawListSplitter_Destroy(ImDrawListSplitter* self);
extern void wrap_ImDrawList_AddBezierCubicV(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
extern void wrap_ImDrawList_AddBezierQuadraticV(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments);
extern void wrap_ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
extern void wrap_ImDrawList_AddCircleV(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern void wrap_ImDrawList_AddCircleFilledV(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern void wrap_ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
extern void wrap_ImDrawList_AddDrawCmd(ImDrawList* self);
extern void wrap_ImDrawList_AddImageV(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
extern void wrap_ImDrawList_AddImageQuadV(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
extern void wrap_ImDrawList_AddImageRoundedV(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawFlags flags);
extern void wrap_ImDrawList_AddLineV(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
extern void wrap_ImDrawList_AddNgonV(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern void wrap_ImDrawList_AddNgonFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern void wrap_ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,ImDrawFlags flags,float thickness);
extern void wrap_ImDrawList_AddQuadV(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
extern void wrap_ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
extern void wrap_ImDrawList_AddRectV(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags,float thickness);
extern void wrap_ImDrawList_AddRectFilledV(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags);
extern void wrap_ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
extern void wrap_ImDrawList_AddText_FontPtrV(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,float wrap_width,const ImVec4* cpu_fine_clip_rect);
extern void wrap_ImDrawList_AddText_Vec2V(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin);
extern void wrap_ImDrawList_AddTriangleV(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
extern void wrap_ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
extern void wrap_ImDrawList_ChannelsMerge(ImDrawList* self);
extern void wrap_ImDrawList_ChannelsSetCurrent(ImDrawList* self,int n);
extern void wrap_ImDrawList_ChannelsSplit(ImDrawList* self,int count);
extern ImDrawList* wrap_ImDrawList_CloneOutput(ImDrawList* self);
extern void wrap_ImDrawList_GetClipRectMax(ImVec2 *pOut,ImDrawList* self);
extern void wrap_ImDrawList_GetClipRectMin(ImVec2 *pOut,ImDrawList* self);
extern ImDrawList* wrap_ImDrawList_ImDrawList(const ImDrawListSharedData* shared_data);
extern void wrap_ImDrawList_PathArcToV(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
extern void wrap_ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
extern void wrap_ImDrawList_PathBezierCubicCurveToV(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
extern void wrap_ImDrawList_PathBezierQuadraticCurveToV(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments);
extern void wrap_ImDrawList_PathClear(ImDrawList* self);
extern void wrap_ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
extern void wrap_ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
extern void wrap_ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
extern void wrap_ImDrawList_PathRectV(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawFlags flags);
extern void wrap_ImDrawList_PathStrokeV(ImDrawList* self,ImU32 col,ImDrawFlags flags,float thickness);
extern void wrap_ImDrawList_PopClipRect(ImDrawList* self);
extern void wrap_ImDrawList_PopTextureID(ImDrawList* self);
extern void wrap_ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
extern void wrap_ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
extern void wrap_ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
extern void wrap_ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
extern void wrap_ImDrawList_PrimUnreserve(ImDrawList* self,int idx_count,int vtx_count);
extern void wrap_ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern void wrap_ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
extern void wrap_ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern void wrap_ImDrawList_PushClipRectV(ImDrawList* self,const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern void wrap_ImDrawList_PushClipRectFullScreen(ImDrawList* self);
extern void wrap_ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
extern void wrap_ImDrawList_Destroy(ImDrawList* self);
extern ImFontAtlasCustomRect* wrap_ImFontAtlasCustomRect_ImFontAtlasCustomRect();
extern bool wrap_ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
extern void wrap_ImFontAtlasCustomRect_Destroy(ImFontAtlasCustomRect* self);
extern int wrap_ImFontAtlas_AddCustomRectFontGlyphV(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
extern int wrap_ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,int width,int height);
extern ImFont* wrap_ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern ImFont* wrap_ImFontAtlas_AddFontDefaultV(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern ImFont* wrap_ImFontAtlas_AddFontFromFileTTFV(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTFV(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryCompressedTTFV(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryTTFV(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern bool wrap_ImFontAtlas_Build(ImFontAtlas* self);
extern void wrap_ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
extern void wrap_ImFontAtlas_Clear(ImFontAtlas* self);
extern void wrap_ImFontAtlas_ClearFonts(ImFontAtlas* self);
extern void wrap_ImFontAtlas_ClearInputData(ImFontAtlas* self);
extern void wrap_ImFontAtlas_ClearTexData(ImFontAtlas* self);
extern ImFontAtlasCustomRect* wrap_ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
extern const ImWchar* wrap_ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
extern bool wrap_ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
extern void wrap_ImFontAtlas_GetTexDataAsAlpha8V(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern void wrap_ImFontAtlas_GetTexDataAsRGBA32V(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern ImFontAtlas* wrap_ImFontAtlas_ImFontAtlas();
extern bool wrap_ImFontAtlas_IsBuilt(ImFontAtlas* self);
extern void wrap_ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
extern void wrap_ImFontAtlas_Destroy(ImFontAtlas* self);
extern ImFontConfig* wrap_ImFontConfig_ImFontConfig();
extern void wrap_ImFontConfig_Destroy(ImFontConfig* self);
extern void wrap_ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self,ImWchar c);
extern void wrap_ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
extern void wrap_ImFontGlyphRangesBuilder_AddTextV(ImFontGlyphRangesBuilder* self,const char* text);
extern void wrap_ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
extern void wrap_ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
extern bool wrap_ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern ImFontGlyphRangesBuilder* wrap_ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
extern void wrap_ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern void wrap_ImFontGlyphRangesBuilder_Destroy(ImFontGlyphRangesBuilder* self);
extern void wrap_ImFont_AddGlyph(ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
extern void wrap_ImFont_AddRemapCharV(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
extern void wrap_ImFont_BuildLookupTable(ImFont* self);
extern void wrap_ImFont_CalcTextSizeAV(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char** remaining);
extern const char* wrap_ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,float wrap_width);
extern void wrap_ImFont_ClearOutputData(ImFont* self);
extern const ImFontGlyph* wrap_ImFont_FindGlyph(ImFont* self,ImWchar c);
extern const ImFontGlyph* wrap_ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
extern float wrap_ImFont_GetCharAdvance(ImFont* self,ImWchar c);
extern const char* wrap_ImFont_GetDebugName(ImFont* self);
extern void wrap_ImFont_GrowIndex(ImFont* self,int new_size);
extern ImFont* wrap_ImFont_ImFont();
extern bool wrap_ImFont_IsGlyphRangeUnused(ImFont* self,unsigned int c_begin,unsigned int c_last);
extern bool wrap_ImFont_IsLoaded(ImFont* self);
extern void wrap_ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,ImWchar c);
extern void wrap_ImFont_RenderTextV(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,float wrap_width,bool cpu_fine_clip);
extern void wrap_ImFont_SetGlyphVisible(ImFont* self,ImWchar c,bool visible);
extern void wrap_ImFont_Destroy(ImFont* self);
extern void wrap_ImGuiComboPreviewData_Destroy(ImGuiComboPreviewData* self);
extern void wrap_ImGuiContextHook_Destroy(ImGuiContextHook* self);
extern void wrap_ImGuiContext_Destroy(ImGuiContext* self);
extern void wrap_ImGuiDockContext_Destroy(ImGuiDockContext* self);
extern void wrap_ImGuiIO_AddFocusEvent(ImGuiIO* self,bool focused);
extern void wrap_ImGuiIO_AddInputCharacter(ImGuiIO* self,unsigned int c);
extern void wrap_ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self,ImWchar16 c);
extern void wrap_ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* str);
extern void wrap_ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self,ImGuiKey key,bool down,float v);
extern void wrap_ImGuiIO_AddKeyEvent(ImGuiIO* self,ImGuiKey key,bool down);
extern void wrap_ImGuiIO_AddMouseButtonEvent(ImGuiIO* self,int button,bool down);
extern void wrap_ImGuiIO_AddMousePosEvent(ImGuiIO* self,float x,float y);
extern void wrap_ImGuiIO_AddMouseViewportEvent(ImGuiIO* self,ImGuiID id);
extern void wrap_ImGuiIO_AddMouseWheelEvent(ImGuiIO* self,float wh_x,float wh_y);
extern void wrap_ImGuiIO_ClearInputCharacters(ImGuiIO* self);
extern void wrap_ImGuiIO_ClearInputKeys(ImGuiIO* self);
extern ImGuiIO* wrap_ImGuiIO_ImGuiIO();
extern void wrap_ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self,bool accepting_events);
extern void wrap_ImGuiIO_SetKeyEventNativeDataV(ImGuiIO* self,ImGuiKey key,int native_keycode,int native_scancode,int native_legacy_index);
extern void wrap_ImGuiIO_Destroy(ImGuiIO* self);
extern void wrap_ImGuiInputEvent_Destroy(ImGuiInputEvent* self);
extern void wrap_ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
extern void wrap_ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
extern bool wrap_ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
extern ImGuiInputTextCallbackData* wrap_ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();
extern void wrap_ImGuiInputTextCallbackData_InsertCharsV(ImGuiInputTextCallbackData* self,int pos,const char* text);
extern void wrap_ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
extern void wrap_ImGuiInputTextCallbackData_Destroy(ImGuiInputTextCallbackData* self);
extern void wrap_ImGuiInputTextState_Destroy(ImGuiInputTextState* self);
extern void wrap_ImGuiLastItemData_Destroy(ImGuiLastItemData* self);
extern void wrap_ImGuiListClipperData_Destroy(ImGuiListClipperData* self);
extern void wrap_ImGuiListClipper_BeginV(ImGuiListClipper* self,int items_count,float items_height);
extern void wrap_ImGuiListClipper_End(ImGuiListClipper* self);
extern void wrap_ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self,int item_min,int item_max);
extern ImGuiListClipper* wrap_ImGuiListClipper_ImGuiListClipper();
extern bool wrap_ImGuiListClipper_Step(ImGuiListClipper* self);
extern void wrap_ImGuiListClipper_Destroy(ImGuiListClipper* self);
extern void wrap_ImGuiMenuColumns_Destroy(ImGuiMenuColumns* self);
extern void wrap_ImGuiMetricsConfig_Destroy(ImGuiMetricsConfig* self);
extern void wrap_ImGuiNavItemData_Destroy(ImGuiNavItemData* self);
extern void wrap_ImGuiNextItemData_Destroy(ImGuiNextItemData* self);
extern void wrap_ImGuiNextWindowData_Destroy(ImGuiNextWindowData* self);
extern void wrap_ImGuiOldColumnData_Destroy(ImGuiOldColumnData* self);
extern void wrap_ImGuiOldColumns_Destroy(ImGuiOldColumns* self);
extern ImGuiOnceUponAFrame* wrap_ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();
extern void wrap_ImGuiOnceUponAFrame_Destroy(ImGuiOnceUponAFrame* self);
extern void wrap_ImGuiPayload_Clear(ImGuiPayload* self);
extern ImGuiPayload* wrap_ImGuiPayload_ImGuiPayload();
extern bool wrap_ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
extern bool wrap_ImGuiPayload_IsDelivery(ImGuiPayload* self);
extern bool wrap_ImGuiPayload_IsPreview(ImGuiPayload* self);
extern void wrap_ImGuiPayload_Destroy(ImGuiPayload* self);
extern ImGuiPlatformIO* wrap_ImGuiPlatformIO_ImGuiPlatformIO();
extern void wrap_ImGuiPlatformIO_Destroy(ImGuiPlatformIO* self);
extern ImGuiPlatformImeData* wrap_ImGuiPlatformImeData_ImGuiPlatformImeData();
extern void wrap_ImGuiPlatformImeData_Destroy(ImGuiPlatformImeData* self);
extern ImGuiPlatformMonitor* wrap_ImGuiPlatformMonitor_ImGuiPlatformMonitor();
extern void wrap_ImGuiPlatformMonitor_Destroy(ImGuiPlatformMonitor* self);
extern void wrap_ImGuiPopupData_Destroy(ImGuiPopupData* self);
extern void wrap_ImGuiPtrOrIndex_Destroy(ImGuiPtrOrIndex* self);
extern void wrap_ImGuiSettingsHandler_Destroy(ImGuiSettingsHandler* self);
extern void wrap_ImGuiStackLevelInfo_Destroy(ImGuiStackLevelInfo* self);
extern void wrap_ImGuiStackSizes_Destroy(ImGuiStackSizes* self);
extern void wrap_ImGuiStackTool_Destroy(ImGuiStackTool* self);
extern void wrap_ImGuiStyleMod_Destroy(ImGuiStyleMod* self);
extern ImGuiStyle* wrap_ImGuiStyle_ImGuiStyle();
extern void wrap_ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
extern void wrap_ImGuiStyle_Destroy(ImGuiStyle* self);
extern void wrap_ImGuiTabBar_Destroy(ImGuiTabBar* self);
extern void wrap_ImGuiTabItem_Destroy(ImGuiTabItem* self);
extern void wrap_ImGuiTableColumnSettings_Destroy(ImGuiTableColumnSettings* self);
extern ImGuiTableColumnSortSpecs* wrap_ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs();
extern void wrap_ImGuiTableColumnSortSpecs_Destroy(ImGuiTableColumnSortSpecs* self);
extern void wrap_ImGuiTableColumn_Destroy(ImGuiTableColumn* self);
extern void wrap_ImGuiTableInstanceData_Destroy(ImGuiTableInstanceData* self);
extern void wrap_ImGuiTableSettings_Destroy(ImGuiTableSettings* self);
extern ImGuiTableSortSpecs* wrap_ImGuiTableSortSpecs_ImGuiTableSortSpecs();
extern void wrap_ImGuiTableSortSpecs_Destroy(ImGuiTableSortSpecs* self);
extern void wrap_ImGuiTableTempData_Destroy(ImGuiTableTempData* self);
extern ImGuiTextBuffer* wrap_ImGuiTextBuffer_ImGuiTextBuffer();
extern void wrap_ImGuiTextBuffer_AppendV(ImGuiTextBuffer* self,const char* str,const char* str_end);
extern void wrap_ImGuiTextBuffer_Appendf(ImGuiTextBuffer* self,const char* fmt);
extern const char* wrap_ImGuiTextBuffer_Begin(ImGuiTextBuffer* self);
extern const char* wrap_ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
extern void wrap_ImGuiTextBuffer_Clear(ImGuiTextBuffer* self);
extern void wrap_ImGuiTextBuffer_Destroy(ImGuiTextBuffer* self);
extern bool wrap_ImGuiTextBuffer_Empty(ImGuiTextBuffer* self);
extern const char* wrap_ImGuiTextBuffer_End(ImGuiTextBuffer* self);
extern void wrap_ImGuiTextBuffer_Reserve(ImGuiTextBuffer* self,int capacity);
extern int wrap_ImGuiTextBuffer_Size(ImGuiTextBuffer* self);
extern void wrap_ImGuiTextFilter_Build(ImGuiTextFilter* self);
extern void wrap_ImGuiTextFilter_Clear(ImGuiTextFilter* self);
extern bool wrap_ImGuiTextFilter_DrawV(ImGuiTextFilter* self,const char* label,float width);
extern ImGuiTextFilter* wrap_ImGuiTextFilter_ImGuiTextFilter(const char* default_filter);
extern bool wrap_ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
extern bool wrap_ImGuiTextFilter_PassFilterV(ImGuiTextFilter* self,const char* text);
extern void wrap_ImGuiTextFilter_Destroy(ImGuiTextFilter* self);
extern void wrap_ImGuiViewport_GetCenter(ImVec2 *pOut,ImGuiViewport* self);
extern void wrap_ImGuiViewport_GetWorkCenter(ImVec2 *pOut,ImGuiViewport* self);
extern ImGuiViewport* wrap_ImGuiViewport_ImGuiViewport();
extern void wrap_ImGuiViewport_Destroy(ImGuiViewport* self);
extern ImGuiWindowClass* wrap_ImGuiWindowClass_ImGuiWindowClass();
extern void wrap_ImGuiWindowClass_Destroy(ImGuiWindowClass* self);
extern void wrap_ImGuiWindowSettings_Destroy(ImGuiWindowSettings* self);
extern void wrap_ImRect_Destroy(ImRect* self);
extern void wrap_ImVec1_Destroy(ImVec1* self);
extern ImVec2* wrap_ImVec2_ImVec2_Float(float _x,float _y);
extern ImVec2* wrap_ImVec2_ImVec2_Nil();
extern void wrap_ImVec2_Destroy(ImVec2* self);
extern void wrap_ImVec2ih_Destroy(ImVec2ih* self);
extern ImVec4* wrap_ImVec4_ImVec4_Float(float _x,float _y,float _z,float _w);
extern ImVec4* wrap_ImVec4_ImVec4_Nil();
extern void wrap_ImVec4_Destroy(ImVec4* self);
extern const ImGuiPayload* wrap_igAcceptDragDropPayloadV(const char* type,ImGuiDragDropFlags flags);
extern void wrap_igAlignTextToFramePadding();
extern bool wrap_igArrowButton(const char* str_id,ImGuiDir dir);
extern bool wrap_igBeginV(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern bool wrap_igBeginChildFrameV(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
extern bool wrap_igBeginChild_IDV(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
extern bool wrap_igBeginChild_StrV(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
extern bool wrap_igBeginComboV(const char* label,const char* preview_value,ImGuiComboFlags flags);
extern void wrap_igBeginDisabledV(bool disabled);
extern bool wrap_igBeginDragDropSourceV(ImGuiDragDropFlags flags);
extern bool wrap_igBeginDragDropTarget();
extern void wrap_igBeginGroup();
extern bool wrap_igBeginListBoxV(const char* label,const ImVec2 size);
extern bool wrap_igBeginMainMenuBar();
extern bool wrap_igBeginMenuV(const char* label,bool enabled);
extern bool wrap_igBeginMenuBar();
extern bool wrap_igBeginPopupV(const char* str_id,ImGuiWindowFlags flags);
extern bool wrap_igBeginPopupContextItemV(const char* str_id,ImGuiPopupFlags popup_flags);
extern bool wrap_igBeginPopupContextVoidV(const char* str_id,ImGuiPopupFlags popup_flags);
extern bool wrap_igBeginPopupContextWindowV(const char* str_id,ImGuiPopupFlags popup_flags);
extern bool wrap_igBeginPopupModalV(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern bool wrap_igBeginTabBarV(const char* str_id,ImGuiTabBarFlags flags);
extern bool wrap_igBeginTabItemV(const char* label,bool* p_open,ImGuiTabItemFlags flags);
extern bool wrap_igBeginTableV(const char* str_id,int column,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
extern void wrap_igBeginTooltip();
extern void wrap_igBullet();
extern void wrap_igBulletText(const char* fmt);
extern bool wrap_igButtonV(const char* label,const ImVec2 size);
extern float wrap_igCalcItemWidth();
extern void wrap_igCalcTextSizeV(ImVec2 *pOut,const char* text,bool hide_text_after_double_hash,float wrap_width);
extern bool wrap_igCheckbox(const char* label,bool* v);
extern bool wrap_igCheckboxFlags_IntPtr(const char* label,int* flags,int flags_value);
extern bool wrap_igCheckboxFlags_UintPtr(const char* label,unsigned int* flags,unsigned int flags_value);
extern void wrap_igCloseCurrentPopup();
extern bool wrap_igCollapsingHeader_BoolPtrV(const char* label,bool* p_visible,ImGuiTreeNodeFlags flags);
extern bool wrap_igCollapsingHeader_TreeNodeFlagsV(const char* label,ImGuiTreeNodeFlags flags);
extern bool wrap_igColorButtonV(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,const ImVec2 size);
extern ImU32 wrap_igColorConvertFloat4ToU32(const ImVec4 in);
extern void wrap_igColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b);
extern void wrap_igColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v);
extern void wrap_igColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in);
extern bool wrap_igColorEdit3V(const char* label,float col[3],ImGuiColorEditFlags flags);
extern bool wrap_igColorEdit4V(const char* label,float col[4],ImGuiColorEditFlags flags);
extern bool wrap_igColorPicker3V(const char* label,float col[3],ImGuiColorEditFlags flags);
extern bool wrap_igColorPicker4V(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
extern void wrap_igColumnsV(int count,const char* id,bool border);
extern bool wrap_igCombo_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
extern bool wrap_igCombo_StrV(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
extern bool wrap_igCombo_Str_arrV(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
extern ImGuiContext* wrap_igCreateContextV(ImFontAtlas* shared_font_atlas);
extern bool wrap_igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
extern void wrap_igDebugTextEncoding(const char* text);
extern void wrap_igDestroyContextV(ImGuiContext* ctx);
extern void wrap_igDestroyPlatformWindows();
extern ImGuiID wrap_igDockSpaceV(ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern ImGuiID wrap_igDockSpaceOverViewportV(const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern bool wrap_igDragFloatV(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragFloat2V(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragFloat3V(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragFloat4V(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragFloatRange2V(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern bool wrap_igDragIntV(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragInt2V(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragInt3V(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragInt4V(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragIntRange2V(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern bool wrap_igDragScalarV(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igDragScalarNV(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void wrap_igDummy(const ImVec2 size);
extern void wrap_igEnd();
extern void wrap_igEndChild();
extern void wrap_igEndChildFrame();
extern void wrap_igEndCombo();
extern void wrap_igEndDisabled();
extern void wrap_igEndDragDropSource();
extern void wrap_igEndDragDropTarget();
extern void wrap_igEndFrame();
extern void wrap_igEndGroup();
extern void wrap_igEndListBox();
extern void wrap_igEndMainMenuBar();
extern void wrap_igEndMenu();
extern void wrap_igEndMenuBar();
extern void wrap_igEndPopup();
extern void wrap_igEndTabBar();
extern void wrap_igEndTabItem();
extern void wrap_igEndTable();
extern void wrap_igEndTooltip();
extern ImGuiViewport* wrap_igFindViewportByID(ImGuiID id);
extern ImGuiViewport* wrap_igFindViewportByPlatformHandle(void* platform_handle);
extern ImDrawList* wrap_igGetBackgroundDrawList_Nil();
extern ImDrawList* wrap_igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport);
extern const char* wrap_igGetClipboardText();
extern ImU32 wrap_igGetColorU32_ColV(ImGuiCol idx,float alpha_mul);
extern ImU32 wrap_igGetColorU32_U32(ImU32 col);
extern ImU32 wrap_igGetColorU32_Vec4(const ImVec4 col);
extern int wrap_igGetColumnIndex();
extern float wrap_igGetColumnOffsetV(int column_index);
extern float wrap_igGetColumnWidthV(int column_index);
extern int wrap_igGetColumnsCount();
extern void wrap_igGetContentRegionAvail(ImVec2 *pOut);
extern void wrap_igGetContentRegionMax(ImVec2 *pOut);
extern ImGuiContext* wrap_igGetCurrentContext();
extern void wrap_igGetCursorPos(ImVec2 *pOut);
extern float wrap_igGetCursorPosX();
extern float wrap_igGetCursorPosY();
extern void wrap_igGetCursorScreenPos(ImVec2 *pOut);
extern void wrap_igGetCursorStartPos(ImVec2 *pOut);
extern const ImGuiPayload* wrap_igGetDragDropPayload();
extern ImDrawData* wrap_igGetDrawData();
extern ImDrawListSharedData* wrap_igGetDrawListSharedData();
extern ImFont* wrap_igGetFont();
extern float wrap_igGetFontSize();
extern void wrap_igGetFontTexUvWhitePixel(ImVec2 *pOut);
extern ImDrawList* wrap_igGetForegroundDrawList_Nil();
extern ImDrawList* wrap_igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);
extern int wrap_igGetFrameCount();
extern float wrap_igGetFrameHeight();
extern float wrap_igGetFrameHeightWithSpacing();
extern ImGuiID wrap_igGetID_Ptr(const void* ptr_id);
extern ImGuiID wrap_igGetID_Str(const char* str_id);
extern ImGuiID wrap_igGetID_StrStr(const char* str_id_begin,const char* str_id_end);
extern ImGuiIO* wrap_igGetIO();
extern void wrap_igGetItemRectMax(ImVec2 *pOut);
extern void wrap_igGetItemRectMin(ImVec2 *pOut);
extern void wrap_igGetItemRectSize(ImVec2 *pOut);
extern int wrap_igGetKeyIndex(ImGuiKey key);
extern const char* wrap_igGetKeyName(ImGuiKey key);
extern int wrap_igGetKeyPressedAmount(ImGuiKey key,float repeat_delay,float rate);
extern ImGuiViewport* wrap_igGetMainViewport();
extern int wrap_igGetMouseClickedCount(ImGuiMouseButton button);
extern ImGuiMouseCursor wrap_igGetMouseCursor();
extern void wrap_igGetMouseDragDeltaV(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
extern void wrap_igGetMousePos(ImVec2 *pOut);
extern void wrap_igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut);
extern ImGuiPlatformIO* wrap_igGetPlatformIO();
extern float wrap_igGetScrollMaxX();
extern float wrap_igGetScrollMaxY();
extern float wrap_igGetScrollX();
extern float wrap_igGetScrollY();
extern ImGuiStyle* wrap_igGetStyle();
extern const char* wrap_igGetStyleColorName(ImGuiCol idx);
extern const ImVec4* wrap_igGetStyleColorVec4(ImGuiCol idx);
extern float wrap_igGetTextLineHeight();
extern float wrap_igGetTextLineHeightWithSpacing();
extern double wrap_igGetTime();
extern float wrap_igGetTreeNodeToLabelSpacing();
extern const char* wrap_igGetVersion();
extern void wrap_igGetWindowContentRegionMax(ImVec2 *pOut);
extern void wrap_igGetWindowContentRegionMin(ImVec2 *pOut);
extern ImGuiID wrap_igGetWindowDockID();
extern float wrap_igGetWindowDpiScale();
extern ImDrawList* wrap_igGetWindowDrawList();
extern float wrap_igGetWindowHeight();
extern void wrap_igGetWindowPos(ImVec2 *pOut);
extern void wrap_igGetWindowSize(ImVec2 *pOut);
extern ImGuiViewport* wrap_igGetWindowViewport();
extern float wrap_igGetWindowWidth();
extern void wrap_igImageV(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
extern bool wrap_igImageButtonV(const char* str_id,ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 bg_col,const ImVec4 tint_col);
extern void wrap_igIndentV(float indent_w);
extern bool wrap_igInputDoubleV(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputFloatV(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputFloat2V(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputFloat3V(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputFloat4V(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputIntV(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
extern bool wrap_igInputInt2V(const char* label,int v[2],ImGuiInputTextFlags flags);
extern bool wrap_igInputInt3V(const char* label,int v[3],ImGuiInputTextFlags flags);
extern bool wrap_igInputInt4V(const char* label,int v[4],ImGuiInputTextFlags flags);
extern bool wrap_igInputScalarV(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputScalarNV(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern bool wrap_igInputTextV(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern bool wrap_igInputTextMultilineV(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern bool wrap_igInputTextWithHintV(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern bool wrap_igInvisibleButtonV(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
extern bool wrap_igIsAnyItemActive();
extern bool wrap_igIsAnyItemFocused();
extern bool wrap_igIsAnyItemHovered();
extern bool wrap_igIsAnyMouseDown();
extern bool wrap_igIsItemActivated();
extern bool wrap_igIsItemActive();
extern bool wrap_igIsItemClickedV(ImGuiMouseButton mouse_button);
extern bool wrap_igIsItemDeactivated();
extern bool wrap_igIsItemDeactivatedAfterEdit();
extern bool wrap_igIsItemEdited();
extern bool wrap_igIsItemFocused();
extern bool wrap_igIsItemHoveredV(ImGuiHoveredFlags flags);
extern bool wrap_igIsItemToggledOpen();
extern bool wrap_igIsItemVisible();
extern bool wrap_igIsKeyDown(ImGuiKey key);
extern bool wrap_igIsKeyPressedV(ImGuiKey key,bool repeat);
extern bool wrap_igIsKeyReleased(ImGuiKey key);
extern bool wrap_igIsMouseClickedV(ImGuiMouseButton button,bool repeat);
extern bool wrap_igIsMouseDoubleClicked(ImGuiMouseButton button);
extern bool wrap_igIsMouseDown(ImGuiMouseButton button);
extern bool wrap_igIsMouseDraggingV(ImGuiMouseButton button,float lock_threshold);
extern bool wrap_igIsMouseHoveringRectV(const ImVec2 r_min,const ImVec2 r_max,bool clip);
extern bool wrap_igIsMousePosValidV(const ImVec2* mouse_pos);
extern bool wrap_igIsMouseReleased(ImGuiMouseButton button);
extern bool wrap_igIsPopupOpen_StrV(const char* str_id,ImGuiPopupFlags flags);
extern bool wrap_igIsRectVisible_Nil(const ImVec2 size);
extern bool wrap_igIsRectVisible_Vec2(const ImVec2 rect_min,const ImVec2 rect_max);
extern bool wrap_igIsWindowAppearing();
extern bool wrap_igIsWindowCollapsed();
extern bool wrap_igIsWindowDocked();
extern bool wrap_igIsWindowFocusedV(ImGuiFocusedFlags flags);
extern bool wrap_igIsWindowHoveredV(ImGuiHoveredFlags flags);
extern void wrap_igLabelText(const char* label,const char* fmt);
extern bool wrap_igListBox_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
extern bool wrap_igListBox_Str_arrV(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
extern void wrap_igLoadIniSettingsFromDisk(const char* ini_filename);
extern void wrap_igLoadIniSettingsFromMemoryV(const char* ini_data,size_t ini_size);
extern void wrap_igLogButtons();
extern void wrap_igLogFinish();
extern void wrap_igLogText(const char* fmt);
extern void wrap_igLogToClipboardV(int auto_open_depth);
extern void wrap_igLogToFileV(int auto_open_depth,const char* filename);
extern void wrap_igLogToTTYV(int auto_open_depth);
extern void* wrap_igMemAlloc(size_t size);
extern void wrap_igMemFree(void* ptr);
extern bool wrap_igMenuItem_BoolV(const char* label,const char* shortcut,bool selected,bool enabled);
extern bool wrap_igMenuItem_BoolPtrV(const char* label,const char* shortcut,bool* p_selected,bool enabled);
extern void wrap_igNewFrame();
extern void wrap_igNewLine();
extern void wrap_igNextColumn();
extern void wrap_igOpenPopupOnItemClickV(const char* str_id,ImGuiPopupFlags popup_flags);
extern void wrap_igOpenPopup_IDV(ImGuiID id,ImGuiPopupFlags popup_flags);
extern void wrap_igOpenPopup_StrV(const char* str_id,ImGuiPopupFlags popup_flags);
extern void wrap_igPlotHistogram_FloatPtrV(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern void wrap_igPlotHistogram_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern void wrap_igPlotLines_FloatPtrV(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern void wrap_igPlotLines_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern void wrap_igPopAllowKeyboardFocus();
extern void wrap_igPopButtonRepeat();
extern void wrap_igPopClipRect();
extern void wrap_igPopFont();
extern void wrap_igPopID();
extern void wrap_igPopItemWidth();
extern void wrap_igPopStyleColorV(int count);
extern void wrap_igPopStyleVarV(int count);
extern void wrap_igPopTextWrapPos();
extern void wrap_igProgressBarV(float fraction,const ImVec2 size_arg,const char* overlay);
extern void wrap_igPushAllowKeyboardFocus(bool allow_keyboard_focus);
extern void wrap_igPushButtonRepeat(bool repeat);
extern void wrap_igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern void wrap_igPushFont(ImFont* font);
extern void wrap_igPushID_Int(int int_id);
extern void wrap_igPushID_Ptr(const void* ptr_id);
extern void wrap_igPushID_Str(const char* str_id);
extern void wrap_igPushID_StrStr(const char* str_id_begin,const char* str_id_end);
extern void wrap_igPushItemWidth(float item_width);
extern void wrap_igPushStyleColor_U32(ImGuiCol idx,ImU32 col);
extern void wrap_igPushStyleColor_Vec4(ImGuiCol idx,const ImVec4 col);
extern void wrap_igPushStyleVar_Float(ImGuiStyleVar idx,float val);
extern void wrap_igPushStyleVar_Vec2(ImGuiStyleVar idx,const ImVec2 val);
extern void wrap_igPushTextWrapPosV(float wrap_local_pos_x);
extern bool wrap_igRadioButton_Bool(const char* label,bool active);
extern bool wrap_igRadioButton_IntPtr(const char* label,int* v,int v_button);
extern void wrap_igRender();
extern void wrap_igRenderPlatformWindowsDefaultV(void* platform_render_arg,void* renderer_render_arg);
extern void wrap_igResetMouseDragDeltaV(ImGuiMouseButton button);
extern void wrap_igSameLineV(float offset_from_start_x,float spacing);
extern void wrap_igSaveIniSettingsToDisk(const char* ini_filename);
extern const char* wrap_igSaveIniSettingsToMemoryV(size_t* out_ini_size);
extern bool wrap_igSelectable_BoolV(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern bool wrap_igSelectable_BoolPtrV(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern void wrap_igSeparator();
extern void wrap_igSetClipboardText(const char* text);
extern void wrap_igSetColorEditOptions(ImGuiColorEditFlags flags);
extern void wrap_igSetColumnOffset(int column_index,float offset_x);
extern void wrap_igSetColumnWidth(int column_index,float width);
extern void wrap_igSetCurrentContext(ImGuiContext* ctx);
extern void wrap_igSetCursorPos(const ImVec2 local_pos);
extern void wrap_igSetCursorPosX(float local_x);
extern void wrap_igSetCursorPosY(float local_y);
extern void wrap_igSetCursorScreenPos(const ImVec2 pos);
extern bool wrap_igSetDragDropPayloadV(const char* type,const void* data,size_t sz,ImGuiCond cond);
extern void wrap_igSetItemAllowOverlap();
extern void wrap_igSetItemDefaultFocus();
extern void wrap_igSetKeyboardFocusHereV(int offset);
extern void wrap_igSetMouseCursor(ImGuiMouseCursor cursor_type);
extern void wrap_igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
extern void wrap_igSetNextFrameWantCaptureMouse(bool want_capture_mouse);
extern void wrap_igSetNextItemOpenV(bool is_open,ImGuiCond cond);
extern void wrap_igSetNextItemWidth(float item_width);
extern void wrap_igSetNextWindowBgAlpha(float alpha);
extern void wrap_igSetNextWindowClass(const ImGuiWindowClass* window_class);
extern void wrap_igSetNextWindowCollapsedV(bool collapsed,ImGuiCond cond);
extern void wrap_igSetNextWindowContentSize(const ImVec2 size);
extern void wrap_igSetNextWindowDockIDV(ImGuiID dock_id,ImGuiCond cond);
extern void wrap_igSetNextWindowFocus();
extern void wrap_igSetNextWindowPosV(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
extern void wrap_igSetNextWindowSizeV(const ImVec2 size,ImGuiCond cond);
extern void wrap_igSetNextWindowSizeConstraintsV(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
extern void wrap_igSetNextWindowViewport(ImGuiID viewport_id);
extern void wrap_igSetScrollFromPosX_FloatV(float local_x,float center_x_ratio);
extern void wrap_igSetScrollFromPosY_FloatV(float local_y,float center_y_ratio);
extern void wrap_igSetScrollHereXV(float center_x_ratio);
extern void wrap_igSetScrollHereYV(float center_y_ratio);
extern void wrap_igSetScrollX_Float(float scroll_x);
extern void wrap_igSetScrollY_Float(float scroll_y);
extern void wrap_igSetTabItemClosed(const char* tab_or_docked_window_label);
extern void wrap_igSetTooltip(const char* fmt);
extern void wrap_igSetWindowCollapsed_BoolV(bool collapsed,ImGuiCond cond);
extern void wrap_igSetWindowCollapsed_StrV(const char* name,bool collapsed,ImGuiCond cond);
extern void wrap_igSetWindowFocus_Nil();
extern void wrap_igSetWindowFocus_Str(const char* name);
extern void wrap_igSetWindowFontScale(float scale);
extern void wrap_igSetWindowPos_StrV(const char* name,const ImVec2 pos,ImGuiCond cond);
extern void wrap_igSetWindowPos_Vec2V(const ImVec2 pos,ImGuiCond cond);
extern void wrap_igSetWindowSize_StrV(const char* name,const ImVec2 size,ImGuiCond cond);
extern void wrap_igSetWindowSize_Vec2V(const ImVec2 size,ImGuiCond cond);
extern void wrap_igShowAboutWindowV(bool* p_open);
extern void wrap_igShowDebugLogWindowV(bool* p_open);
extern void wrap_igShowDemoWindowV(bool* p_open);
extern void wrap_igShowFontSelector(const char* label);
extern void wrap_igShowMetricsWindowV(bool* p_open);
extern void wrap_igShowStackToolWindowV(bool* p_open);
extern void wrap_igShowStyleEditorV(ImGuiStyle* ref);
extern bool wrap_igShowStyleSelector(const char* label);
extern void wrap_igShowUserGuide();
extern bool wrap_igSliderAngleV(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderFloatV(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderFloat2V(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderFloat3V(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderFloat4V(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderIntV(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderInt2V(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderInt3V(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderInt4V(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderScalarV(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSliderScalarNV(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igSmallButton(const char* label);
extern void wrap_igSpacing();
extern void wrap_igStyleColorsClassicV(ImGuiStyle* dst);
extern void wrap_igStyleColorsDarkV(ImGuiStyle* dst);
extern void wrap_igStyleColorsLightV(ImGuiStyle* dst);
extern bool wrap_igTabItemButtonV(const char* label,ImGuiTabItemFlags flags);
extern int wrap_igTableGetColumnCount();
extern ImGuiTableColumnFlags wrap_igTableGetColumnFlagsV(int column_n);
extern int wrap_igTableGetColumnIndex();
extern const char* wrap_igTableGetColumnName_IntV(int column_n);
extern int wrap_igTableGetRowIndex();
extern ImGuiTableSortSpecs* wrap_igTableGetSortSpecs();
extern void wrap_igTableHeader(const char* label);
extern void wrap_igTableHeadersRow();
extern bool wrap_igTableNextColumn();
extern void wrap_igTableNextRowV(ImGuiTableRowFlags row_flags,float min_row_height);
extern void wrap_igTableSetBgColorV(ImGuiTableBgTarget target,ImU32 color,int column_n);
extern void wrap_igTableSetColumnEnabled(int column_n,bool v);
extern bool wrap_igTableSetColumnIndex(int column_n);
extern void wrap_igTableSetupColumnV(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id);
extern void wrap_igTableSetupScrollFreeze(int cols,int rows);
extern void wrap_igText(const char* fmt);
extern void wrap_igTextColored(const ImVec4 col,const char* fmt);
extern void wrap_igTextDisabled(const char* fmt);
extern void wrap_igTextUnformattedV(const char* text);
extern void wrap_igTextWrapped(const char* fmt);
extern bool wrap_igTreeNodeEx_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt);
extern bool wrap_igTreeNodeEx_StrV(const char* label,ImGuiTreeNodeFlags flags);
extern bool wrap_igTreeNodeEx_StrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt);
extern bool wrap_igTreeNode_Ptr(const void* ptr_id,const char* fmt);
extern bool wrap_igTreeNode_Str(const char* label);
extern bool wrap_igTreeNode_StrStr(const char* str_id,const char* fmt);
extern void wrap_igTreePop();
extern void wrap_igTreePush_PtrV(const void* ptr_id);
extern void wrap_igTreePush_Str(const char* str_id);
extern void wrap_igUnindentV(float indent_w);
extern void wrap_igUpdatePlatformWindows();
extern bool wrap_igVSliderFloatV(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igVSliderIntV(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern bool wrap_igVSliderScalarV(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void wrap_igValue_Bool(const char* prefix,bool b);
extern void wrap_igValue_FloatV(const char* prefix,float v,const char* float_format);
extern void wrap_igValue_Int(const char* prefix,int v);
extern void wrap_igValue_Uint(const char* prefix,unsigned int v);
extern void wrap_ImColor_HSV(ImColor* pOut,float h,float s,float v);
extern void wrap_ImColor_SetHSV(ImColor* self,float h,float s,float v);
extern void wrap_ImDrawList_AddBezierCubic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
extern void wrap_ImDrawList_AddBezierQuadratic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
extern void wrap_ImDrawList_AddCircle(ImDrawList* self,const ImVec2 center,float radius,ImU32 col);
extern void wrap_ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col);
extern void wrap_ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max);
extern void wrap_ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4);
extern void wrap_ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding);
extern void wrap_ImDrawList_AddLine(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col);
extern void wrap_ImDrawList_AddNgon(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern void wrap_ImDrawList_AddQuad(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
extern void wrap_ImDrawList_AddRect(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col);
extern void wrap_ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col);
extern void wrap_ImDrawList_AddText_FontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin);
extern void wrap_ImDrawList_AddText_Vec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin);
extern void wrap_ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
extern void wrap_ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max);
extern void wrap_ImDrawList_PathBezierCubicCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4);
extern void wrap_ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3);
extern void wrap_ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max);
extern void wrap_ImDrawList_PathStroke(ImDrawList* self,ImU32 col);
extern void wrap_ImDrawList_PushClipRect(ImDrawList* self,const ImVec2 clip_rect_min,const ImVec2 clip_rect_max);
extern int wrap_ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x);
extern ImFont* wrap_ImFontAtlas_AddFontDefault(ImFontAtlas* self);
extern ImFont* wrap_ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels);
extern ImFont* wrap_ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels);
extern void wrap_ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height);
extern void wrap_ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height);
extern void wrap_ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self,const char* text);
extern void wrap_ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src);
extern void wrap_ImFont_CalcTextSizeA(ImVec2* pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin);
extern void wrap_ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin);
extern void wrap_ImGuiIO_SetKeyEventNativeData(ImGuiIO* self,ImGuiKey key,int native_keycode,int native_scancode);
extern void wrap_ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self,int pos,const char* text);
extern void wrap_ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count);
extern void wrap_ImGuiTextBuffer_Append(ImGuiTextBuffer* self,const char* str);
extern bool wrap_ImGuiTextFilter_Draw(ImGuiTextFilter* self);
extern bool wrap_ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text);
extern const ImGuiPayload* wrap_igAcceptDragDropPayload(const char* type);
extern bool wrap_igBegin(const char* name);
extern bool wrap_igBeginChildFrame(ImGuiID id,const ImVec2 size);
extern bool wrap_igBeginChild_ID(ImGuiID id);
extern bool wrap_igBeginChild_Str(const char* str_id);
extern bool wrap_igBeginCombo(const char* label,const char* preview_value);
extern void wrap_igBeginDisabled();
extern bool wrap_igBeginDragDropSource();
extern bool wrap_igBeginListBox(const char* label);
extern bool wrap_igBeginMenu(const char* label);
extern bool wrap_igBeginPopup(const char* str_id);
extern bool wrap_igBeginPopupContextItem();
extern bool wrap_igBeginPopupContextVoid();
extern bool wrap_igBeginPopupContextWindow();
extern bool wrap_igBeginPopupModal(const char* name);
extern bool wrap_igBeginTabBar(const char* str_id);
extern bool wrap_igBeginTabItem(const char* label);
extern bool wrap_igBeginTable(const char* str_id,int column);
extern bool wrap_igButton(const char* label);
extern void wrap_igCalcTextSize(ImVec2* pOut,const char* text);
extern bool wrap_igCollapsingHeader_BoolPtr(const char* label,bool* p_visible);
extern bool wrap_igCollapsingHeader_TreeNodeFlags(const char* label);
extern bool wrap_igColorButton(const char* desc_id,const ImVec4 col);
extern bool wrap_igColorEdit3(const char* label,float col[3]);
extern bool wrap_igColorEdit4(const char* label,float col[4]);
extern bool wrap_igColorPicker3(const char* label,float col[3]);
extern bool wrap_igColorPicker4(const char* label,float col[4]);
extern void wrap_igColumns();
extern bool wrap_igCombo_Str(const char* label,int* current_item,const char* items_separated_by_zeros);
extern bool wrap_igCombo_Str_arr(const char* label,int* current_item,const char* const items[],int items_count);
extern ImGuiContext* wrap_igCreateContext();
extern void wrap_igDestroyContext();
extern ImGuiID wrap_igDockSpace(ImGuiID id);
extern ImGuiID wrap_igDockSpaceOverViewport();
extern bool wrap_igDragFloat(const char* label,float* v);
extern bool wrap_igDragFloat2(const char* label,float v[2]);
extern bool wrap_igDragFloat3(const char* label,float v[3]);
extern bool wrap_igDragFloat4(const char* label,float v[4]);
extern bool wrap_igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max);
extern bool wrap_igDragInt(const char* label,int* v);
extern bool wrap_igDragInt2(const char* label,int v[2]);
extern bool wrap_igDragInt3(const char* label,int v[3]);
extern bool wrap_igDragInt4(const char* label,int v[4]);
extern bool wrap_igDragIntRange2(const char* label,int* v_current_min,int* v_current_max);
extern bool wrap_igDragScalar(const char* label,ImGuiDataType data_type,void* p_data);
extern bool wrap_igDragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components);
extern ImU32 wrap_igGetColorU32_Col(ImGuiCol idx);
extern float wrap_igGetColumnOffset();
extern float wrap_igGetColumnWidth();
extern void wrap_igGetMouseDragDelta(ImVec2* pOut);
extern void wrap_igImage(ImTextureID user_texture_id,const ImVec2 size);
extern bool wrap_igImageButton(const char* str_id,ImTextureID user_texture_id,const ImVec2 size);
extern void wrap_igIndent();
extern bool wrap_igInputDouble(const char* label,double* v);
extern bool wrap_igInputFloat(const char* label,float* v);
extern bool wrap_igInputFloat2(const char* label,float v[2]);
extern bool wrap_igInputFloat3(const char* label,float v[3]);
extern bool wrap_igInputFloat4(const char* label,float v[4]);
extern bool wrap_igInputInt(const char* label,int* v);
extern bool wrap_igInputInt2(const char* label,int v[2]);
extern bool wrap_igInputInt3(const char* label,int v[3]);
extern bool wrap_igInputInt4(const char* label,int v[4]);
extern bool wrap_igInputScalar(const char* label,ImGuiDataType data_type,void* p_data);
extern bool wrap_igInputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components);
extern bool wrap_igInputText(const char* label,char* buf,size_t buf_size);
extern bool wrap_igInputTextMultiline(const char* label,char* buf,size_t buf_size);
extern bool wrap_igInputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size);
extern bool wrap_igInvisibleButton(const char* str_id,const ImVec2 size);
extern bool wrap_igIsItemClicked();
extern bool wrap_igIsItemHovered();
extern bool wrap_igIsKeyPressed(ImGuiKey key);
extern bool wrap_igIsMouseClicked(ImGuiMouseButton button);
extern bool wrap_igIsMouseDragging(ImGuiMouseButton button);
extern bool wrap_igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max);
extern bool wrap_igIsMousePosValid();
extern bool wrap_igIsPopupOpen_Str(const char* str_id);
extern bool wrap_igIsWindowFocused();
extern bool wrap_igIsWindowHovered();
extern bool wrap_igListBox_Str_arr(const char* label,int* current_item,const char* const items[],int items_count);
extern void wrap_igLoadIniSettingsFromMemory(const char* ini_data);
extern void wrap_igLogToClipboard();
extern void wrap_igLogToFile();
extern void wrap_igLogToTTY();
extern bool wrap_igMenuItem_Bool(const char* label);
extern bool wrap_igMenuItem_BoolPtr(const char* label,const char* shortcut,bool* p_selected);
extern void wrap_igOpenPopupOnItemClick();
extern void wrap_igOpenPopup_ID(ImGuiID id);
extern void wrap_igOpenPopup_Str(const char* str_id);
extern void wrap_igPlotHistogram_FloatPtr(const char* label,const float* values,int values_count);
extern void wrap_igPlotLines_FloatPtr(const char* label,const float* values,int values_count);
extern void wrap_igPopStyleColor();
extern void wrap_igPopStyleVar();
extern void wrap_igProgressBar(float fraction);
extern void wrap_igPushTextWrapPos();
extern void wrap_igRenderPlatformWindowsDefault();
extern void wrap_igResetMouseDragDelta();
extern void wrap_igSameLine();
extern const char* wrap_igSaveIniSettingsToMemory();
extern bool wrap_igSelectable_Bool(const char* label);
extern bool wrap_igSelectable_BoolPtr(const char* label,bool* p_selected);
extern bool wrap_igSetDragDropPayload(const char* type,const void* data,size_t sz);
extern void wrap_igSetKeyboardFocusHere();
extern void wrap_igSetNextItemOpen(bool is_open);
extern void wrap_igSetNextWindowCollapsed(bool collapsed);
extern void wrap_igSetNextWindowDockID(ImGuiID dock_id);
extern void wrap_igSetNextWindowPos(const ImVec2 pos);
extern void wrap_igSetNextWindowSize(const ImVec2 size);
extern void wrap_igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max);
extern void wrap_igSetScrollFromPosX_Float(float local_x);
extern void wrap_igSetScrollFromPosY_Float(float local_y);
extern void wrap_igSetScrollHereX();
extern void wrap_igSetScrollHereY();
extern void wrap_igSetWindowCollapsed_Bool(bool collapsed);
extern void wrap_igSetWindowCollapsed_Str(const char* name,bool collapsed);
extern void wrap_igSetWindowPos_Str(const char* name,const ImVec2 pos);
extern void wrap_igSetWindowPos_Vec2(const ImVec2 pos);
extern void wrap_igSetWindowSize_Str(const char* name,const ImVec2 size);
extern void wrap_igSetWindowSize_Vec2(const ImVec2 size);
extern void wrap_igShowAboutWindow();
extern void wrap_igShowDebugLogWindow();
extern void wrap_igShowDemoWindow();
extern void wrap_igShowMetricsWindow();
extern void wrap_igShowStackToolWindow();
extern void wrap_igShowStyleEditor();
extern bool wrap_igSliderAngle(const char* label,float* v_rad);
extern bool wrap_igSliderFloat(const char* label,float* v,float v_min,float v_max);
extern bool wrap_igSliderFloat2(const char* label,float v[2],float v_min,float v_max);
extern bool wrap_igSliderFloat3(const char* label,float v[3],float v_min,float v_max);
extern bool wrap_igSliderFloat4(const char* label,float v[4],float v_min,float v_max);
extern bool wrap_igSliderInt(const char* label,int* v,int v_min,int v_max);
extern bool wrap_igSliderInt2(const char* label,int v[2],int v_min,int v_max);
extern bool wrap_igSliderInt3(const char* label,int v[3],int v_min,int v_max);
extern bool wrap_igSliderInt4(const char* label,int v[4],int v_min,int v_max);
extern bool wrap_igSliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max);
extern bool wrap_igSliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max);
extern void wrap_igStyleColorsClassic();
extern void wrap_igStyleColorsDark();
extern void wrap_igStyleColorsLight();
extern bool wrap_igTabItemButton(const char* label);
extern ImGuiTableColumnFlags wrap_igTableGetColumnFlags();
extern const char* wrap_igTableGetColumnName_Int();
extern void wrap_igTableNextRow();
extern void wrap_igTableSetBgColor(ImGuiTableBgTarget target,ImU32 color);
extern void wrap_igTableSetupColumn(const char* label);
extern void wrap_igTextUnformatted(const char* text);
extern bool wrap_igTreeNodeEx_Str(const char* label);
extern void wrap_igTreePush_Ptr();
extern void wrap_igUnindent();
extern bool wrap_igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max);
extern bool wrap_igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max);
extern bool wrap_igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max);
extern void wrap_igValue_Float(const char* prefix,float v);

#ifdef __cplusplus
}
#endif
