#pragma once

#include "cimgui/cimgui.h"

#ifdef __cplusplus
extern "C" {
#endif

extern void DrawListSplitter_Merge(ImDrawListSplitter* self,ImDrawList* draw_list);
extern void EndMenu();
extern bool Payload_IsDelivery(ImGuiPayload* self);
extern float GetScrollMaxY();
extern void DestroyContext(ImGuiContext* ctx);
extern void SetNextWindowFocus();
extern bool ColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
extern bool IsAnyItemFocused();
extern void DrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
extern void TabBar_Destroy(ImGuiTabBar* self);
extern bool FontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
extern void FontAtlas_Destroy(ImFontAtlas* self);
extern void ShowFontSelector(const char* label);
extern bool SliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
extern void Context_Destroy(ImGuiContext* self);
extern void SetNextItemOpen(bool is_open,ImGuiCond cond);
extern bool BeginTabBar(const char* str_id,ImGuiTabBarFlags flags);
extern void PtrOrIndex_Destroy(ImGuiPtrOrIndex* self);
extern void SetWindowSize_Vec2(const ImVec2 size,ImGuiCond cond);
extern void SetWindowSize_Str(const char* name,const ImVec2 size,ImGuiCond cond);
extern int TableGetRowIndex();
extern void TextBuffer_Appendf(ImGuiTextBuffer* self,const char* fmt);
extern bool DragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void LoadIniSettingsFromMemory(const char* ini_data,size_t ini_size);
extern void Style_Destroy(ImGuiStyle* self);
extern void TableInstanceData_Destroy(ImGuiTableInstanceData* self);
extern bool SliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void DrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
extern bool BeginTable(const char* str_id,int column,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
extern bool IsItemFocused();
extern void ResetMouseDragDelta(ImGuiMouseButton button);
extern void DrawList_ChannelsMerge(ImDrawList* self);
extern float GetColumnWidth(int column_index);
extern void DrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
extern void EndDisabled();
extern bool IsItemActivated();
extern float GetDrawCursorPosX();
extern void IO_AddMouseViewportEvent(ImGuiIO* self,ImGuiID id);
extern void LogToFile(int auto_open_depth,const char* filename);
extern const ImWchar* FontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
extern bool InputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
extern void TableSettings_Destroy(ImGuiTableSettings* self);
extern void BeginGroup();
extern void EndChildFrame();
extern void DrawList_PathArcToFast(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
extern void Font_SetGlyphVisible(ImFont* self,ImWchar c,bool visible);
extern void SetScrollFromPosX_Float(float local_x,float center_x_ratio);
extern void Font_BuildLookupTable(ImFont* self);
extern ImU32 GetColorU32_Col(ImGuiCol idx,float alpha_mul);
extern ImU32 GetColorU32_Vec4(const ImVec4 col);
extern ImU32 GetColorU32_U32(ImU32 col);
extern bool IsMouseClicked(ImGuiMouseButton button,bool repeat);
extern const char* Font_GetDebugName(ImFont* self);
extern void TextDisabled(const char* fmt);
extern void DrawList_AddDrawCmd(ImDrawList* self);
extern void GetContentRegionMax(ImVec2 *pOut);
extern ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas);
extern float GetFrameHeightWithSpacing();
extern void SetColumnOffset(int column_index,float offset_x);
extern void DrawList_PopClipRect(ImDrawList* self);
extern void IO_ClearInputKeys(ImGuiIO* self);
extern void TextFilter_Clear(ImGuiTextFilter* self);
extern void Color_Destroy(ImColor* self);
extern void SetWindowCollapsed_Bool(bool collapsed,ImGuiCond cond);
extern void SetWindowCollapsed_Str(const char* name,bool collapsed,ImGuiCond cond);
extern bool ListBox_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
extern bool ListBox_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
extern int TableGetColumnIndex();
extern void UpdatePlatformWindows();
extern void TableTempData_Destroy(ImGuiTableTempData* self);
extern ImDrawList* GetForegroundDrawList_Nil();
extern ImDrawList* GetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);
extern void IO_AddInputCharactersUTF8(ImGuiIO* self,const char* str);
extern void DrawList_GetClipRectMax(ImVec2 *pOut,ImDrawList* self);
extern bool Payload_IsDataType(ImGuiPayload* self,const char* type);
extern float GetWindowHeight();
extern void DrawList_AddNgonFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern bool CheckboxFlags_IntPtr(const char* label,int* flags,int flags_value);
extern bool CheckboxFlags_UintPtr(const char* label,unsigned int* flags,unsigned int flags_value);
extern void EndTabItem();
extern void DrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
extern ImGuiViewport* FindViewportByID(ImGuiID id);
extern bool FontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern ImGuiTableSortSpecs* TableSortSpecs_ImGuiTableSortSpecs();
extern void InputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
extern bool IsItemVisible();
extern void DrawListSplitter_Clear(ImDrawListSplitter* self);
extern ImFont* FontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern void ShowUserGuide();
extern float GetScrollY();
extern bool IsMouseDragging(ImGuiMouseButton button,float lock_threshold);
extern bool Checkbox(const char* label,bool* v);
extern void EndTabBar();
extern void Font_CalcTextSizeA(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char** remaining);
extern bool BeginPopupContextVoid(const char* str_id,ImGuiPopupFlags popup_flags);
extern bool InputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
extern void FontAtlas_ClearTexData(ImFontAtlas* self);
extern void ProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
extern void PushButtonRepeat(bool repeat);
extern ImGuiInputTextCallbackData* InputTextCallbackData_ImGuiInputTextCallbackData();
extern void StyleMod_Destroy(ImGuiStyleMod* self);
extern void EndDragDropTarget();
extern void GetDrawCursorStartPos(ImVec2 *pOut);
extern void FontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
extern void EndCombo();
extern void Vec4_Destroy(ImVec4* self);
extern bool BeginPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags);
extern float GetScrollMaxX();
extern bool IsItemHovered(ImGuiHoveredFlags flags);
extern void OldColumnData_Destroy(ImGuiOldColumnData* self);
extern bool InputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern void StyleColorsClassic(ImGuiStyle* dst);
extern void OldColumns_Destroy(ImGuiOldColumns* self);
extern double GetTime();
extern void Value_Bool(const char* prefix,bool b);
extern void Value_Int(const char* prefix,int v);
extern void Value_Uint(const char* prefix,unsigned int v);
extern void Value_Float(const char* prefix,float v,const char* float_format);
extern void IO_ClearInputCharacters(ImGuiIO* self);
extern void SetScrollY_Float(float scroll_y);
extern bool ShowStyleSelector(const char* label);
extern ImGuiTextFilter* TextFilter_ImGuiTextFilter(const char* default_filter);
extern bool DragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void SetColorEditOptions(ImGuiColorEditFlags flags);
extern void Font_RenderChar(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,ImWchar c);
extern void IO_AddMousePosEvent(ImGuiIO* self,float x,float y);
extern void DrawList_PathBezierCubicCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
extern void FontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
extern ImDrawData* GetDrawData();
extern void StyleColorsLight(ImGuiStyle* dst);
extern bool IsKeyPressed(ImGuiKey key,bool repeat);
extern void OpenPopupOnItemClick(const char* str_id,ImGuiPopupFlags popup_flags);
extern bool DragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void SetKeyboardFocusHere(int offset);
extern void Font_AddGlyph(ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
extern ImGuiPlatformIO* PlatformIO_ImGuiPlatformIO();
extern void DrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
extern void IO_Destroy(ImGuiIO* self);
extern bool BeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
extern void SetNextWindowBgAlpha(float alpha);
extern void DrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
extern void Font_ClearOutputData(ImFont* self);
extern void PlatformMonitor_Destroy(ImGuiPlatformMonitor* self);
extern void Vec1_Destroy(ImVec1* self);
extern ImFont* GetFont();
extern void FontAtlasCustomRect_Destroy(ImFontAtlasCustomRect* self);
extern bool SetDragDropPayload(const char* type,const void* data,size_t sz,ImGuiCond cond);
extern ImGuiIO* IO_ImGuiIO();
extern bool IsWindowFocused(ImGuiFocusedFlags flags);
extern void SetDrawCursorScreenPos(const ImVec2 pos);
extern void TextWrapped(const char* fmt);
extern void CloseCurrentPopup();
extern int GetColumnIndex();
extern const char* GetClipboardText();
extern bool MenuItem_Bool(const char* label,const char* shortcut,bool selected,bool enabled);
extern bool MenuItem_BoolPtr(const char* label,const char* shortcut,bool* p_selected,bool enabled);
extern void DrawList_PathClear(ImDrawList* self);
extern void IO_SetAppAcceptingEvents(ImGuiIO* self,bool accepting_events);
extern const char* TextBuffer_Begin(ImGuiTextBuffer* self);
extern bool IsItemActive();
extern void InputTextState_Destroy(ImGuiInputTextState* self);
extern void TabItem_Destroy(ImGuiTabItem* self);
extern void TableSetupScrollFreeze(int cols,int rows);
extern void SameLine(float offset_from_start_x,float spacing);
extern void SaveIniSettingsToDisk(const char* ini_filename);
extern void SetNextWindowCollapsed(bool collapsed,ImGuiCond cond);
extern bool DebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
extern ImGuiViewport* GetWindowViewport();
extern bool TextFilter_IsActive(ImGuiTextFilter* self);
extern float GetFontSize();
extern void Font_RenderText(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,float wrap_width,bool cpu_fine_clip);
extern float GetWindowDpiScale();
extern void TextBuffer_Reserve(ImGuiTextBuffer* self,int capacity);
extern bool InputInt2(const char* label,int v[2],ImGuiInputTextFlags flags);
extern void DrawData_DeIndexAllBuffers(ImDrawData* self);
extern void Font_Destroy(ImFont* self);
extern void GetMousePos(ImVec2 *pOut);
extern bool SliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void DrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
extern void DrawList_PushClipRect(ImDrawList* self,const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern void LogToClipboard(int auto_open_depth);
extern bool SliderInt3(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void DrawCmd_Destroy(ImDrawCmd* self);
extern bool Payload_IsPreview(ImGuiPayload* self);
extern void InputTextCallbackData_Destroy(ImGuiInputTextCallbackData* self);
extern void GetWindowContentRegionMin(ImVec2 *pOut);
extern void PopButtonRepeat();
extern void IO_AddKeyAnalogEvent(ImGuiIO* self,ImGuiKey key,bool down,float v);
extern void ShowDemoWindow(bool* p_open);
extern void TextBuffer_Clear(ImGuiTextBuffer* self);
extern void FontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern void Bullet();
extern ImDrawListSharedData* GetDrawListSharedData();
extern void* MemAlloc(size_t size);
extern void DrawList_AddCircleFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern ImFontConfig* FontConfig_ImFontConfig();
extern void OnceUponAFrame_Destroy(ImGuiOnceUponAFrame* self);
extern bool VSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void AlignTextToFramePadding();
extern ImFont* FontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern void NextWindowData_Destroy(ImGuiNextWindowData* self);
extern bool VSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern float GetDrawCursorPosY();
extern void NextColumn();
extern void StyleColorsDark(ImGuiStyle* dst);
extern void PopClipRect();
extern ImGuiListClipper* ListClipper_ImGuiListClipper();
extern void SetTabItemClosed(const char* tab_or_docked_window_label);
extern ImGuiOnceUponAFrame* OnceUponAFrame_ImGuiOnceUponAFrame();
extern bool BeginTabItem(const char* label,bool* p_open,ImGuiTabItemFlags flags);
extern bool DragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern ImGuiID GetWindowDockID();
extern bool InputFloat4(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags);
extern void FontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
extern bool IsWindowAppearing();
extern bool TableNextColumn();
extern float CalcItemWidth();
extern bool IsAnyItemHovered();
extern void SetWindowFontScale(float scale);
extern bool InputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern bool IsItemDeactivatedAfterEdit();
extern void DrawList_GetClipRectMin(ImVec2 *pOut,ImDrawList* self);
extern void DrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
extern const ImGuiPayload* GetDragDropPayload();
extern void GetMousePosOnOpeningCurrentPopup(ImVec2 *pOut);
extern void DrawList_AddBezierCubic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
extern void TextBuffer_Destroy(ImGuiTextBuffer* self);
extern int TextBuffer_Size(ImGuiTextBuffer* self);
extern void GetWindowPos(ImVec2 *pOut);
extern void SetDrawCursorPos(const ImVec2 local_pos);
extern void IO_AddInputCharacter(ImGuiIO* self,unsigned int c);
extern void InputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
extern bool IsPopupOpen_Str(const char* str_id,ImGuiPopupFlags flags);
extern void DrawList_AddRect(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags,float thickness);
extern ImFontAtlasCustomRect* FontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
extern void DrawList_AddCircle(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern bool BeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
extern void SetDrawCursorPosX(float local_x);
extern void TextBuffer_Append(ImGuiTextBuffer* self,const char* str,const char* str_end);
extern int GetKeyPressedAmount(ImGuiKey key,float repeat_delay,float rate);
extern void MetricsConfig_Destroy(ImGuiMetricsConfig* self);
extern bool BeginMenu(const char* label,bool enabled);
extern bool IsMouseDown(ImGuiMouseButton button);
extern ImGuiPlatformImeData* PlatformImeData_ImGuiPlatformImeData();
extern void Viewport_GetWorkCenter(ImVec2 *pOut,ImGuiViewport* self);
extern void Indent(float indent_w);
extern void PushAllowKeyboardFocus(bool allow_keyboard_focus);
extern void PushStyleVar_Float(ImGuiStyleVar idx,float val);
extern void PushStyleVar_Vec2(ImGuiStyleVar idx,const ImVec2 val);
extern void FontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
extern void WindowClass_Destroy(ImGuiWindowClass* self);
extern bool InputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
extern void PushItemWidth(float item_width);
extern void SetColumnWidth(int column_index,float width);
extern void StackLevelInfo_Destroy(ImGuiStackLevelInfo* self);
extern void SetMouseCursor(ImGuiMouseCursor cursor_type);
extern void FontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern const char* GetKeyName(ImGuiKey key);
extern void IO_AddMouseWheelEvent(ImGuiIO* self,float wh_x,float wh_y);
extern void EndPopup();
extern bool IsAnyItemActive();
extern void PlatformIO_Destroy(ImGuiPlatformIO* self);
extern bool BeginPopupModal(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern const char* GetStyleColorName(ImGuiCol idx);
extern void DrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern void Text(const char* fmt);
extern float GetWindowWidth();
extern void DrawList_PrimUnreserve(ImDrawList* self,int idx_count,int vtx_count);
extern void TextFilter_Destroy(ImGuiTextFilter* self);
extern bool BeginDragDropSource(ImGuiDragDropFlags flags);
extern bool IsMousePosValid(const ImVec2* mouse_pos);
extern void DrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
extern ImFont* FontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
extern void DrawList_AddRectFilled(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags);
extern void NavItemData_Destroy(ImGuiNavItemData* self);
extern void PushStyleColor_U32(ImGuiCol idx,ImU32 col);
extern void PushStyleColor_Vec4(ImGuiCol idx,const ImVec4 col);
extern void ListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self,int item_min,int item_max);
extern void DrawListSplitter_Split(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
extern void Unindent(float indent_w);
extern void PopStyleVar(int count);
extern void EndTable();
extern void GetFontTexUvWhitePixel(ImVec2 *pOut);
extern bool DragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern bool BeginMenuBar();
extern void GetItemRectMax(ImVec2 *pOut);
extern bool TabItemButton(const char* label,ImGuiTabItemFlags flags);
extern void DrawData_Clear(ImDrawData* self);
extern const ImWchar* FontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
extern void FontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self,ImWchar c);
extern void ColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b);
extern void GetWindowContentRegionMax(ImVec2 *pOut);
extern ImFontAtlas* FontAtlas_ImFontAtlas();
extern void FontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self,const char* text);
extern void PushFont(ImFont* font);
extern void SetNextFrameWantCaptureMouse(bool want_capture_mouse);
extern void SetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
extern void DrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawFlags flags);
extern void InputEvent_Destroy(ImGuiInputEvent* self);
extern void ListClipper_End(ImGuiListClipper* self);
extern int GetKeyIndex(ImGuiKey key);
extern float GetTreeNodeToLabelSpacing();
extern void IO_AddInputCharacterUTF16(ImGuiIO* self,ImWchar16 c);
extern void EndTooltip();
extern bool RadioButton_Bool(const char* label,bool active);
extern bool RadioButton_IntPtr(const char* label,int* v,int v_button);
extern void DebugTextEncoding(const char* text);
extern void SetNextWindowSize(const ImVec2 size,ImGuiCond cond);
extern float Font_GetCharAdvance(ImFont* self,ImWchar c);
extern bool ArrowButton(const char* str_id,ImGuiDir dir);
extern void GetDrawCursorScreenPos(ImVec2 *pOut);
extern bool SliderInt4(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern const char* TextBuffer_End(ImGuiTextBuffer* self);
extern bool BeginListBox(const char* label,const ImVec2 size);
extern ImFontAtlasCustomRect* FontAtlasCustomRect_ImFontAtlasCustomRect();
extern const ImWchar* FontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
extern void NextItemData_Destroy(ImGuiNextItemData* self);
extern void PushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern bool TableSetColumnIndex(int column_n);
extern bool SliderInt2(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void Font_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
extern void Vec2ih_Destroy(ImVec2ih* self);
extern ImGuiMouseCursor GetMouseCursor();
extern void TableHeadersRow();
extern bool InputInt3(const char* label,int v[3],ImGuiInputTextFlags flags);
extern void SetScrollHereX(float center_x_ratio);
extern void WindowSettings_Destroy(ImGuiWindowSettings* self);
extern bool IsAnyMouseDown();
extern void EndMainMenuBar();
extern void LogToTTY(int auto_open_depth);
extern void DrawList_PushClipRectFullScreen(ImDrawList* self);
extern bool Font_IsGlyphRangeUnused(ImFont* self,unsigned int c_begin,unsigned int c_last);
extern void DrawListSharedData_Destroy(ImDrawListSharedData* self);
extern int GetFrameCount();
extern int FontAtlas_AddCustomRectRegular(ImFontAtlas* self,int width,int height);
extern void ColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in);
extern bool IsMouseReleased(ImGuiMouseButton button);
extern bool InputInt4(const char* label,int v[4],ImGuiInputTextFlags flags);
extern void SetNextWindowViewport(ImGuiID viewport_id);
extern void Spacing();
extern void PopFont();
extern void ShowStackToolWindow(bool* p_open);
extern void DrawList_PathStroke(ImDrawList* self,ImU32 col,ImDrawFlags flags,float thickness);
extern void IO_AddFocusEvent(ImGuiIO* self,bool focused);
extern void TableSetBgColor(ImGuiTableBgTarget target,ImU32 color,int column_n);
extern const ImWchar* FontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
extern ImDrawList* GetBackgroundDrawList_Nil();
extern ImDrawList* GetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport);
extern bool IsKeyReleased(ImGuiKey key);
extern void SetCurrentContext(ImGuiContext* ctx);
extern bool InvisibleButton(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
extern bool IsItemDeactivated();
extern void DockContext_Destroy(ImGuiDockContext* self);
extern void Columns(int count,const char* id,bool border);
extern void EndDragDropSource();
extern ImGuiWindowClass* WindowClass_ImGuiWindowClass();
extern void Render();
extern void TableHeader(const char* label);
extern void TableSetupColumn(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id);
extern void FontAtlas_ClearInputData(ImFontAtlas* self);
extern bool IsWindowHovered(ImGuiHoveredFlags flags);
extern void ListClipper_Destroy(ImGuiListClipper* self);
extern bool Combo_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
extern bool Combo_Str(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
extern bool Combo_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
extern bool ImageButton(const char* str_id,ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 bg_col,const ImVec4 tint_col);
extern bool InputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern void FontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern void LastItemData_Destroy(ImGuiLastItemData* self);
extern void Style_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
extern void DrawList_AddTriangle(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
extern bool DragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void Color_SetHSV(ImColor* self,float h,float s,float v,float a);
extern void DrawList_ChannelsSplit(ImDrawList* self,int count);
extern bool IsItemClicked(ImGuiMouseButton mouse_button);
extern ImFont* FontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern bool InputFloat2(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags);
extern void DrawList_AddLine(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
extern void ListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
extern void DrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
extern bool BeginMainMenuBar();
extern bool ColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags);
extern void GetDrawCursorPos(ImVec2 *pOut);
extern void MenuColumns_Destroy(ImGuiMenuColumns* self);
extern bool BeginPopup(const char* str_id,ImGuiWindowFlags flags);
extern bool TreeNodeEx_Str(const char* label,ImGuiTreeNodeFlags flags);
extern bool TreeNodeEx_StrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt);
extern bool TreeNodeEx_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt);
extern void SetWindowFocus_Nil();
extern void SetWindowFocus_Str(const char* name);
extern bool FontAtlas_IsBuilt(ImFontAtlas* self);
extern void EndChild();
extern void PlotHistogram_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern void PlotHistogram_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern const ImWchar* FontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
extern void DrawList_AddPolyline(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,ImDrawFlags flags,float thickness);
extern void RenderPlatformWindowsDefault(void* platform_render_arg,void* renderer_render_arg);
extern void ShowStyleEditor(ImGuiStyle* ref);
extern void DrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
extern void DrawList_PathFillConvex(ImDrawList* self,ImU32 col);
extern bool SliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void TextUnformatted(const char* text);
extern const ImWchar* FontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
extern void GetMouseDragDelta(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
extern void SetNextWindowClass(const ImGuiWindowClass* window_class);
extern void FontConfig_Destroy(ImFontConfig* self);
extern void InputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self,int pos,const char* text);
extern ImU32 ColorConvertFloat4ToU32(const ImVec4 in);
extern void Font_GrowIndex(ImFont* self,int new_size);
extern void Separator();
extern bool SliderInt(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void PlatformImeData_Destroy(ImGuiPlatformImeData* self);
extern void ColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v);
extern void DrawList_ChannelsSetCurrent(ImDrawList* self,int n);
extern ImDrawList* DrawList_ImDrawList(const ImDrawListSharedData* shared_data);
extern bool IsRectVisible_Nil(const ImVec2 size);
extern bool IsRectVisible_Vec2(const ImVec2 rect_min,const ImVec2 rect_max);
extern void End();
extern void EndListBox();
extern void ShowDebugLogWindow(bool* p_open);
extern ImGuiTableColumnSortSpecs* TableColumnSortSpecs_ImGuiTableColumnSortSpecs();
extern bool InputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern void SetDrawCursorPosY(float local_y);
extern void TableNextRow(ImGuiTableRowFlags row_flags,float min_row_height);
extern const ImFontGlyph* Font_FindGlyphNoFallback(ImFont* self,ImWchar c);
extern bool DragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern ImGuiIO* GetIO();
extern void SetScrollX_Float(float scroll_x);
extern bool IsKeyDown(ImGuiKey key);
extern void NewFrame();
extern void Rect_Destroy(ImRect* self);
extern bool VSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void ListClipperData_Destroy(ImGuiListClipperData* self);
extern ImGuiViewport* GetMainViewport();
extern bool IsWindowDocked();
extern void DrawList_Destroy(ImDrawList* self);
extern ImDrawList* GetWindowDrawList();
extern void SetItemDefaultFocus();
extern bool Begin(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern ImGuiTableSortSpecs* TableGetSortSpecs();
extern void PopID();
extern bool SliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern bool TextBuffer_Empty(ImGuiTextBuffer* self);
extern void OpenPopup_Str(const char* str_id,ImGuiPopupFlags popup_flags);
extern void OpenPopup_ID(ImGuiID id,ImGuiPopupFlags popup_flags);
extern bool DragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern const ImVec4* GetStyleColorVec4(ImGuiCol idx);
extern void DrawListSplitter_Destroy(ImDrawListSplitter* self);
extern ImTextureID DrawCmd_GetTexID(ImDrawCmd* self);
extern void IO_SetKeyEventNativeData(ImGuiIO* self,ImGuiKey key,int native_keycode,int native_scancode,int native_legacy_index);
extern void TableColumn_Destroy(ImGuiTableColumn* self);
extern void LogText(const char* fmt);
extern void SetNextWindowDockID(ImGuiID dock_id,ImGuiCond cond);
extern float GetTextLineHeightWithSpacing();
extern bool IsMouseDoubleClicked(ImGuiMouseButton button);
extern void DrawList_AddBezierQuadratic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments);
extern void DrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
extern void GetWindowSize(ImVec2 *pOut);
extern void Vec2_Destroy(ImVec2* self);
extern bool DragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void ShowMetricsWindow(bool* p_open);
extern void DrawData_ScaleClipRects(ImDrawData* self,const ImVec2 fb_scale);
extern void TextColored(const ImVec4 col,const char* fmt);
extern ImGuiTextBuffer* TextBuffer_ImGuiTextBuffer();
extern const char* SaveIniSettingsToMemory(size_t* out_ini_size);
extern void PlotLines_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern void PlotLines_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern void Color_HSV(ImColor *pOut,float h,float s,float v,float a);
extern bool ColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags);
extern void DrawList_PathArcTo(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
extern bool Selectable_Bool(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern bool Selectable_BoolPtr(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern const ImGuiPayload* AcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
extern bool InputFloat3(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags);
extern bool InputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
extern bool SliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void DrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
extern void IO_AddKeyEvent(ImGuiIO* self,ImGuiKey key,bool down);
extern ImGuiID DockSpace(ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern void Dummy(const ImVec2 size);
extern ImGuiID GetID_Str(const char* str_id);
extern ImGuiID GetID_StrStr(const char* str_id_begin,const char* str_id_end);
extern ImGuiID GetID_Ptr(const void* ptr_id);
extern void PopStyleColor(int count);
extern void ComboPreviewData_Destroy(ImGuiComboPreviewData* self);
extern void EndGroup();
extern void DrawList_AddQuad(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
extern int FontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
extern void TreePop();
extern bool DragScalar(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void GetItemRectMin(ImVec2 *pOut);
extern bool BeginChild_Str(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
extern bool BeginChild_ID(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
extern void Image(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
extern bool SmallButton(const char* label);
extern ImFontGlyphRangesBuilder* FontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
extern const char* Font_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,float wrap_width);
extern ImGuiPayload* Payload_ImGuiPayload();
extern void TableColumnSettings_Destroy(ImGuiTableColumnSettings* self);
extern void EndFrame();
extern void DrawList_AddQuadFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
extern void DrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern bool SliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern void DrawList_AddNgon(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern const ImWchar* FontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
extern void PopupData_Destroy(ImGuiPopupData* self);
extern bool CollapsingHeader_TreeNodeFlags(const char* label,ImGuiTreeNodeFlags flags);
extern bool CollapsingHeader_BoolPtr(const char* label,bool* p_visible,ImGuiTreeNodeFlags flags);
extern bool DragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern void SetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
extern void TableColumnSortSpecs_Destroy(ImGuiTableColumnSortSpecs* self);
extern bool IsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,bool clip);
extern void InputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
extern const char* TextBuffer_c_str(ImGuiTextBuffer* self);
extern ImGuiContext* GetCurrentContext();
extern void SetScrollFromPosY_Float(float local_y,float center_y_ratio);
extern void ShowAboutWindow(bool* p_open);
extern void PushTextWrapPos(float wrap_local_pos_x);
extern const ImFontGlyph* Font_FindGlyph(ImFont* self,ImWchar c);
extern void TableSortSpecs_Destroy(ImGuiTableSortSpecs* self);
extern bool BeginPopupContextWindow(const char* str_id,ImGuiPopupFlags popup_flags);
extern void SetItemAllowOverlap();
extern ImVec2* Vec2_ImVec2_Nil();
extern ImVec2* Vec2_ImVec2_Float(float _x,float _y);
extern void TreePush_Str(const char* str_id);
extern void TreePush_Ptr(const void* ptr_id);
extern void SetTooltip(const char* fmt);
extern bool ColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,const ImVec2 size);
extern void DestroyPlatformWindows();
extern void FontGlyphRangesBuilder_Destroy(ImFontGlyphRangesBuilder* self);
extern void IO_AddMouseButtonEvent(ImGuiIO* self,int button,bool down);
extern void Viewport_Destroy(ImGuiViewport* self);
extern void Payload_Clear(ImGuiPayload* self);
extern float GetTextLineHeight();
extern ImGuiTableColumnFlags TableGetColumnFlags(int column_n);
extern ImColor* Color_ImColor_Nil();
extern ImColor* Color_ImColor_Float(float r,float g,float b,float a);
extern ImColor* Color_ImColor_Vec4(const ImVec4 col);
extern ImColor* Color_ImColor_Int(int r,int g,int b,int a);
extern ImColor* Color_ImColor_U32(ImU32 rgba);
extern void DrawData_Destroy(ImDrawData* self);
extern bool IsItemEdited();
extern void DrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
extern void TextFilter_Build(ImGuiTextFilter* self);
extern void EndMenuBar();
extern ImGuiStyle* Style_ImGuiStyle();
extern void DrawList_AddText_Vec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin);
extern void DrawList_AddText_FontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,float wrap_width,const ImVec4* cpu_fine_clip_rect);
extern void FontAtlas_CalcCustomRectUV(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
extern void FontAtlas_Clear(ImFontAtlas* self);
extern void PushID_Str(const char* str_id);
extern void PushID_StrStr(const char* str_id_begin,const char* str_id_end);
extern void PushID_Ptr(const void* ptr_id);
extern void PushID_Int(int int_id);
extern int TableGetColumnCount();
extern ImGuiID DockSpaceOverViewport(const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern void GetItemRectSize(ImVec2 *pOut);
extern bool TextFilter_PassFilter(ImGuiTextFilter* self,const char* text);
extern void Viewport_GetCenter(ImVec2 *pOut,ImGuiViewport* self);
extern void LogButtons();
extern ImDrawCmd* DrawCmd_ImDrawCmd();
extern bool FontAtlas_Build(ImFontAtlas* self);
extern const ImWchar* FontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
extern void SetNextItemWidth(float item_width);
extern bool Button(const char* label,const ImVec2 size);
extern bool Font_IsLoaded(ImFont* self);
extern void LogFinish();
extern void SetWindowPos_Vec2(const ImVec2 pos,ImGuiCond cond);
extern void SetWindowPos_Str(const char* name,const ImVec2 pos,ImGuiCond cond);
extern void SetClipboardText(const char* text);
extern ImGuiStyle* GetStyle();
extern void FontAtlas_ClearFonts(ImFontAtlas* self);
extern void PopItemWidth();
extern bool TextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
extern void ContextHook_Destroy(ImGuiContextHook* self);
extern int GetMouseClickedCount(ImGuiMouseButton button);
extern const char* GetVersion();
extern void BeginDisabled(bool disabled);
extern ImGuiPlatformIO* GetPlatformIO();
extern void MemFree(void* ptr);
extern void SetNextWindowContentSize(const ImVec2 size);
extern ImDrawListSplitter* DrawListSplitter_ImDrawListSplitter();
extern ImFont* Font_ImFont();
extern bool ListClipper_Step(ImGuiListClipper* self);
extern void SettingsHandler_Destroy(ImGuiSettingsHandler* self);
extern ImVec4* Vec4_ImVec4_Nil();
extern ImVec4* Vec4_ImVec4_Float(float _x,float _y,float _z,float _w);
extern void DrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
extern ImFont* FontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern void LoadIniSettingsFromDisk(const char* ini_filename);
extern void PopAllowKeyboardFocus();
extern ImGuiViewport* Viewport_ImGuiViewport();
extern bool IsItemToggledOpen();
extern bool BeginDragDropTarget();
extern void DrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
extern void BulletText(const char* fmt);
extern void CalcTextSize(ImVec2 *pOut,const char* text,bool hide_text_after_double_hash,float wrap_width);
extern void StackSizes_Destroy(ImGuiStackSizes* self);
extern float GetColumnOffset(int column_index);
extern void TableSetColumnEnabled(int column_n,bool v);
extern float GetScrollX();
extern bool InputScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern void DrawList_PopTextureID(ImDrawList* self);
extern void SetScrollHereY(float center_y_ratio);
extern int GetColumnsCount();
extern bool TreeNode_Str(const char* label);
extern bool TreeNode_StrStr(const char* str_id,const char* fmt);
extern bool TreeNode_Ptr(const void* ptr_id,const char* fmt);
extern void GetContentRegionAvail(ImVec2 *pOut);
extern ImGuiViewport* FindViewportByPlatformHandle(void* platform_handle);
extern void LabelText(const char* label,const char* fmt);
extern void DrawList_PathBezierQuadraticCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments);
extern bool FontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
extern bool IsWindowCollapsed();
extern void NewLine();
extern bool DragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern void StackTool_Destroy(ImGuiStackTool* self);
extern ImDrawList* DrawList_CloneOutput(ImDrawList* self);
extern void Payload_Destroy(ImGuiPayload* self);
extern bool ColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags);
extern void PopTextWrapPos();
extern void BeginTooltip();
extern const char* TableGetColumnName_Int(int column_n);
extern void DrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawFlags flags);
extern ImFont* FontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern ImDrawData* DrawData_ImDrawData();
extern ImGuiPlatformMonitor* PlatformMonitor_ImGuiPlatformMonitor();
extern float GetFrameHeight();

#ifdef __cplusplus
}
#endif
