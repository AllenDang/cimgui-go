// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

import (
	"github.com/AllenDang/cimgui-go/internal/datautils"
)

// #include <stdlib.h>
// #include <memory.h>
// #include "../imgui/extra_types.h"
// #include "cimmarkdown_wrapper.h"
// #include "cimmarkdown_typedefs.h"
import "C"

type Emphasis struct {
	CData *C.Emphasis
}

// Handle returns C version of Emphasis and its finalizer func.
func (self *Emphasis) Handle() (result *C.Emphasis, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Emphasis) C() (C.Emphasis, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmphasisFromC creates Emphasis from its C pointer.
// SRC ~= *C.Emphasis
func NewEmphasisFromC[SRC any](cvalue SRC) *Emphasis {
	return &Emphasis{CData: datautils.ConvertCTypes[*C.Emphasis](cvalue)}
}

type Line struct {
	CData *C.Line
}

// Handle returns C version of Line and its finalizer func.
func (self *Line) Handle() (result *C.Line, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Line) C() (C.Line, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewLineFromC creates Line from its C pointer.
// SRC ~= *C.Line
func NewLineFromC[SRC any](cvalue SRC) *Line {
	return &Line{CData: datautils.ConvertCTypes[*C.Line](cvalue)}
}

type Link struct {
	CData *C.Link
}

// Handle returns C version of Link and its finalizer func.
func (self *Link) Handle() (result *C.Link, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Link) C() (C.Link, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewLinkFromC creates Link from its C pointer.
// SRC ~= *C.Link
func NewLinkFromC[SRC any](cvalue SRC) *Link {
	return &Link{CData: datautils.ConvertCTypes[*C.Link](cvalue)}
}

type MarkdownConfig struct {
	CData *C.MarkdownConfig
}

// Handle returns C version of MarkdownConfig and its finalizer func.
func (self *MarkdownConfig) Handle() (result *C.MarkdownConfig, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownConfig) C() (C.MarkdownConfig, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownConfigFromC creates MarkdownConfig from its C pointer.
// SRC ~= *C.MarkdownConfig
func NewMarkdownConfigFromC[SRC any](cvalue SRC) *MarkdownConfig {
	return &MarkdownConfig{CData: datautils.ConvertCTypes[*C.MarkdownConfig](cvalue)}
}

type MarkdownFormatInfo struct {
	CData *C.MarkdownFormatInfo
}

// Handle returns C version of MarkdownFormatInfo and its finalizer func.
func (self *MarkdownFormatInfo) Handle() (result *C.MarkdownFormatInfo, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownFormatInfo) C() (C.MarkdownFormatInfo, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownFormatInfoFromC creates MarkdownFormatInfo from its C pointer.
// SRC ~= *C.MarkdownFormatInfo
func NewMarkdownFormatInfoFromC[SRC any](cvalue SRC) *MarkdownFormatInfo {
	return &MarkdownFormatInfo{CData: datautils.ConvertCTypes[*C.MarkdownFormatInfo](cvalue)}
}

type MarkdownHeadingFormat struct {
	CData *C.MarkdownHeadingFormat
}

// Handle returns C version of MarkdownHeadingFormat and its finalizer func.
func (self *MarkdownHeadingFormat) Handle() (result *C.MarkdownHeadingFormat, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownHeadingFormat) C() (C.MarkdownHeadingFormat, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownHeadingFormatFromC creates MarkdownHeadingFormat from its C pointer.
// SRC ~= *C.MarkdownHeadingFormat
func NewMarkdownHeadingFormatFromC[SRC any](cvalue SRC) *MarkdownHeadingFormat {
	return &MarkdownHeadingFormat{CData: datautils.ConvertCTypes[*C.MarkdownHeadingFormat](cvalue)}
}

type MarkdownImageData struct {
	CData *C.MarkdownImageData
}

// Handle returns C version of MarkdownImageData and its finalizer func.
func (self *MarkdownImageData) Handle() (result *C.MarkdownImageData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownImageData) C() (C.MarkdownImageData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownImageDataFromC creates MarkdownImageData from its C pointer.
// SRC ~= *C.MarkdownImageData
func NewMarkdownImageDataFromC[SRC any](cvalue SRC) *MarkdownImageData {
	return &MarkdownImageData{CData: datautils.ConvertCTypes[*C.MarkdownImageData](cvalue)}
}

type MarkdownLinkCallbackData struct {
	CData *C.MarkdownLinkCallbackData
}

// Handle returns C version of MarkdownLinkCallbackData and its finalizer func.
func (self *MarkdownLinkCallbackData) Handle() (result *C.MarkdownLinkCallbackData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownLinkCallbackData) C() (C.MarkdownLinkCallbackData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownLinkCallbackDataFromC creates MarkdownLinkCallbackData from its C pointer.
// SRC ~= *C.MarkdownLinkCallbackData
func NewMarkdownLinkCallbackDataFromC[SRC any](cvalue SRC) *MarkdownLinkCallbackData {
	return &MarkdownLinkCallbackData{CData: datautils.ConvertCTypes[*C.MarkdownLinkCallbackData](cvalue)}
}

type MarkdownTooltipCallbackData struct {
	CData *C.MarkdownTooltipCallbackData
}

// Handle returns C version of MarkdownTooltipCallbackData and its finalizer func.
func (self *MarkdownTooltipCallbackData) Handle() (result *C.MarkdownTooltipCallbackData, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MarkdownTooltipCallbackData) C() (C.MarkdownTooltipCallbackData, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewMarkdownTooltipCallbackDataFromC creates MarkdownTooltipCallbackData from its C pointer.
// SRC ~= *C.MarkdownTooltipCallbackData
func NewMarkdownTooltipCallbackDataFromC[SRC any](cvalue SRC) *MarkdownTooltipCallbackData {
	return &MarkdownTooltipCallbackData{CData: datautils.ConvertCTypes[*C.MarkdownTooltipCallbackData](cvalue)}
}

type TextBlock struct {
	CData *C.TextBlock
}

// Handle returns C version of TextBlock and its finalizer func.
func (self *TextBlock) Handle() (result *C.TextBlock, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self TextBlock) C() (C.TextBlock, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewTextBlockFromC creates TextBlock from its C pointer.
// SRC ~= *C.TextBlock
func NewTextBlockFromC[SRC any](cvalue SRC) *TextBlock {
	return &TextBlock{CData: datautils.ConvertCTypes[*C.TextBlock](cvalue)}
}

type TextRegion struct {
	CData *C.TextRegion
}

// Handle returns C version of TextRegion and its finalizer func.
func (self *TextRegion) Handle() (result *C.TextRegion, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self TextRegion) C() (C.TextRegion, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewTextRegionFromC creates TextRegion from its C pointer.
// SRC ~= *C.TextRegion
func NewTextRegionFromC[SRC any](cvalue SRC) *TextRegion {
	return &TextRegion{CData: datautils.ConvertCTypes[*C.TextRegion](cvalue)}
}
