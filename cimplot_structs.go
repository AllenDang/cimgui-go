// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imgui

// #include <stdlib.h>
// #include <memory.h>
// #include "extra_types.h"
// #include "cimplot_wrapper.h"
import "C"
import "unsafe"

type FormatterTimeData struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self FormatterTimeData) handle() (result *C.Formatter_Time_Data, releaseFn func()) {
	result = (*C.Formatter_Time_Data)(self.data)
	return result, func() {}
}

func (self FormatterTimeData) c() (result C.Formatter_Time_Data, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newFormatterTimeDataFromC(cvalue *C.Formatter_Time_Data) *FormatterTimeData {
	result := new(FormatterTimeData)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotAlignmentData struct {
	Fieldertical bool
	FieldadA     float32
	FieldadB     float32
	FieldadAMax  float32
	FieldadBMax  float32
}

func (self PlotAlignmentData) handle() (result *C.ImPlotAlignmentData, releaseFn func()) {
	result = new(C.ImPlotAlignmentData)
	Fieldertical := self.Fieldertical

	result.Vertical = C.bool(Fieldertical)
	FieldadA := self.FieldadA

	result.PadA = C.float(FieldadA)
	FieldadB := self.FieldadB

	result.PadB = C.float(FieldadB)
	FieldadAMax := self.FieldadAMax

	result.PadAMax = C.float(FieldadAMax)
	FieldadBMax := self.FieldadBMax

	result.PadBMax = C.float(FieldadBMax)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotAlignmentData) c() (result C.ImPlotAlignmentData, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotAlignmentDataFromC(cvalue *C.ImPlotAlignmentData) *PlotAlignmentData {
	result := new(PlotAlignmentData)
	result.Fieldertical = cvalue.Vertical == C.bool(true)
	result.FieldadA = float32(cvalue.PadA)
	result.FieldadB = float32(cvalue.PadB)
	result.FieldadAMax = float32(cvalue.PadAMax)
	result.FieldadBMax = float32(cvalue.PadBMax)
	return result
}

type PlotAnnotation struct {
	Fieldos        Vec2
	Fieldffset     Vec2
	FieldolorBg    uint32
	FieldolorFg    uint32
	FieldextOffset int32
	Fieldlamp      bool
}

func (self PlotAnnotation) handle() (result *C.ImPlotAnnotation, releaseFn func()) {
	result = new(C.ImPlotAnnotation)
	Fieldos := self.Fieldos

	result.Pos = Fieldos.toC()
	Fieldffset := self.Fieldffset

	result.Offset = Fieldffset.toC()
	FieldolorBg := self.FieldolorBg

	result.ColorBg = C.ImU32(FieldolorBg)
	FieldolorFg := self.FieldolorFg

	result.ColorFg = C.ImU32(FieldolorFg)
	FieldextOffset := self.FieldextOffset

	result.TextOffset = C.int(FieldextOffset)
	Fieldlamp := self.Fieldlamp

	result.Clamp = C.bool(Fieldlamp)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotAnnotation) c() (result C.ImPlotAnnotation, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotAnnotationFromC(cvalue *C.ImPlotAnnotation) *PlotAnnotation {
	result := new(PlotAnnotation)
	result.Fieldos = *(&Vec2{}).fromC(cvalue.Pos)
	result.Fieldffset = *(&Vec2{}).fromC(cvalue.Offset)
	result.FieldolorBg = uint32(cvalue.ColorBg)
	result.FieldolorFg = uint32(cvalue.ColorFg)
	result.FieldextOffset = int32(cvalue.TextOffset)
	result.Fieldlamp = cvalue.Clamp == C.bool(true)
	return result
}

type PlotAnnotationCollection struct {
	Fieldnnotations Vector[*PlotAnnotation]
	FieldextBuffer  TextBuffer
	Fieldize        int32
}

func (self PlotAnnotationCollection) handle() (result *C.ImPlotAnnotationCollection, releaseFn func()) {
	result = new(C.ImPlotAnnotationCollection)
	Fieldnnotations := self.Fieldnnotations
	FieldnnotationsData := Fieldnnotations.Data
	FieldnnotationsDataArg, FieldnnotationsDataFin := FieldnnotationsData.handle()
	FieldnnotationsVecArg := new(C.ImVector_ImPlotAnnotation)
	FieldnnotationsVecArg.Size = C.int(Fieldnnotations.Size)
	FieldnnotationsVecArg.Capacity = C.int(Fieldnnotations.Capacity)
	FieldnnotationsVecArg.Data = FieldnnotationsDataArg

	result.Annotations = *FieldnnotationsVecArg
	FieldextBuffer := self.FieldextBuffer
	FieldextBufferArg, FieldextBufferFin := FieldextBuffer.c()
	result.TextBuffer = FieldextBufferArg
	Fieldize := self.Fieldize

	result.Size = C.int(Fieldize)
	releaseFn = func() {
		FieldnnotationsDataFin()
		FieldextBufferFin()
	}
	return result, releaseFn
}

func (self PlotAnnotationCollection) c() (result C.ImPlotAnnotationCollection, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotAnnotationCollectionFromC(cvalue *C.ImPlotAnnotationCollection) *PlotAnnotationCollection {
	result := new(PlotAnnotationCollection)
	result.Fieldnnotations = newVectorFromC(cvalue.Annotations.Size, cvalue.Annotations.Capacity, newPlotAnnotationFromC(cvalue.Annotations.Data))
	result.FieldextBuffer = *newTextBufferFromC(cvalue.TextBuffer)

	result.Fieldize = int32(cvalue.Size)
	return result
}

type PlotAxis struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotAxis) handle() (result *C.ImPlotAxis, releaseFn func()) {
	result = (*C.ImPlotAxis)(self.data)
	return result, func() {}
}

func (self PlotAxis) c() (result C.ImPlotAxis, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotAxisFromC(cvalue *C.ImPlotAxis) *PlotAxis {
	result := new(PlotAxis)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotColormapData struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotColormapData) handle() (result *C.ImPlotColormapData, releaseFn func()) {
	result = (*C.ImPlotColormapData)(self.data)
	return result, func() {}
}

func (self PlotColormapData) c() (result C.ImPlotColormapData, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotColormapDataFromC(cvalue *C.ImPlotColormapData) *PlotColormapData {
	result := new(PlotColormapData)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotContext struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotContext) handle() (result *C.ImPlotContext, releaseFn func()) {
	result = (*C.ImPlotContext)(self.data)
	return result, func() {}
}

func (self PlotContext) c() (result C.ImPlotContext, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotContextFromC(cvalue *C.ImPlotContext) *PlotContext {
	result := new(PlotContext)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotDateTimeSpec struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotDateTimeSpec) handle() (result *C.ImPlotDateTimeSpec, releaseFn func()) {
	result = (*C.ImPlotDateTimeSpec)(self.data)
	return result, func() {}
}

func (self PlotDateTimeSpec) c() (result C.ImPlotDateTimeSpec, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotDateTimeSpecFromC(cvalue *C.ImPlotDateTimeSpec) *PlotDateTimeSpec {
	result := new(PlotDateTimeSpec)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotInputMap struct {
	Fieldan           MouseButton
	FieldanMod        int32
	Fieldit           MouseButton
	Fieldelect        MouseButton
	FieldelectCancel  MouseButton
	FieldelectMod     int32
	FieldelectHorzMod int32
	FieldelectVertMod int32
	Fieldenu          MouseButton
	FieldverrideMod   int32
	FieldoomMod       int32
	FieldoomRate      float32
}

func (self PlotInputMap) handle() (result *C.ImPlotInputMap, releaseFn func()) {
	result = new(C.ImPlotInputMap)
	Fieldan := self.Fieldan

	result.Pan = C.ImGuiMouseButton(Fieldan)
	FieldanMod := self.FieldanMod

	result.PanMod = C.int(FieldanMod)
	Fieldit := self.Fieldit

	result.Fit = C.ImGuiMouseButton(Fieldit)
	Fieldelect := self.Fieldelect

	result.Select = C.ImGuiMouseButton(Fieldelect)
	FieldelectCancel := self.FieldelectCancel

	result.SelectCancel = C.ImGuiMouseButton(FieldelectCancel)
	FieldelectMod := self.FieldelectMod

	result.SelectMod = C.int(FieldelectMod)
	FieldelectHorzMod := self.FieldelectHorzMod

	result.SelectHorzMod = C.int(FieldelectHorzMod)
	FieldelectVertMod := self.FieldelectVertMod

	result.SelectVertMod = C.int(FieldelectVertMod)
	Fieldenu := self.Fieldenu

	result.Menu = C.ImGuiMouseButton(Fieldenu)
	FieldverrideMod := self.FieldverrideMod

	result.OverrideMod = C.int(FieldverrideMod)
	FieldoomMod := self.FieldoomMod

	result.ZoomMod = C.int(FieldoomMod)
	FieldoomRate := self.FieldoomRate

	result.ZoomRate = C.float(FieldoomRate)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotInputMap) c() (result C.ImPlotInputMap, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotInputMapFromC(cvalue *C.ImPlotInputMap) *PlotInputMap {
	result := new(PlotInputMap)
	result.Fieldan = MouseButton(cvalue.Pan)
	result.FieldanMod = int32(cvalue.PanMod)
	result.Fieldit = MouseButton(cvalue.Fit)
	result.Fieldelect = MouseButton(cvalue.Select)
	result.FieldelectCancel = MouseButton(cvalue.SelectCancel)
	result.FieldelectMod = int32(cvalue.SelectMod)
	result.FieldelectHorzMod = int32(cvalue.SelectHorzMod)
	result.FieldelectVertMod = int32(cvalue.SelectVertMod)
	result.Fieldenu = MouseButton(cvalue.Menu)
	result.FieldverrideMod = int32(cvalue.OverrideMod)
	result.FieldoomMod = int32(cvalue.ZoomMod)
	result.FieldoomRate = float32(cvalue.ZoomRate)
	return result
}

type PlotItem struct {
	FieldD              ID
	Fieldolor           uint32
	FieldegendHoverRect Rect
	FieldameOffset      int32
	Fieldhow            bool
	FieldegendHovered   bool
	FieldeenThisFrame   bool
}

func (self PlotItem) handle() (result *C.ImPlotItem, releaseFn func()) {
	result = new(C.ImPlotItem)
	FieldD := self.FieldD

	result.ID = C.ImGuiID(FieldD)
	Fieldolor := self.Fieldolor

	result.Color = C.ImU32(Fieldolor)
	FieldegendHoverRect := self.FieldegendHoverRect

	result.LegendHoverRect = FieldegendHoverRect.toC()
	FieldameOffset := self.FieldameOffset

	result.NameOffset = C.int(FieldameOffset)
	Fieldhow := self.Fieldhow

	result.Show = C.bool(Fieldhow)
	FieldegendHovered := self.FieldegendHovered

	result.LegendHovered = C.bool(FieldegendHovered)
	FieldeenThisFrame := self.FieldeenThisFrame

	result.SeenThisFrame = C.bool(FieldeenThisFrame)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotItem) c() (result C.ImPlotItem, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotItemFromC(cvalue *C.ImPlotItem) *PlotItem {
	result := new(PlotItem)
	result.FieldD = ID(cvalue.ID)
	result.Fieldolor = uint32(cvalue.Color)
	result.FieldegendHoverRect = *(&Rect{}).fromC(cvalue.LegendHoverRect)
	result.FieldameOffset = int32(cvalue.NameOffset)
	result.Fieldhow = cvalue.Show == C.bool(true)
	result.FieldegendHovered = cvalue.LegendHovered == C.bool(true)
	result.FieldeenThisFrame = cvalue.SeenThisFrame == C.bool(true)
	return result
}

type PlotItemGroup struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotItemGroup) handle() (result *C.ImPlotItemGroup, releaseFn func()) {
	result = (*C.ImPlotItemGroup)(self.data)
	return result, func() {}
}

func (self PlotItemGroup) c() (result C.ImPlotItemGroup, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotItemGroupFromC(cvalue *C.ImPlotItemGroup) *PlotItemGroup {
	result := new(PlotItemGroup)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotLegend struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotLegend) handle() (result *C.ImPlotLegend, releaseFn func()) {
	result = (*C.ImPlotLegend)(self.data)
	return result, func() {}
}

func (self PlotLegend) c() (result C.ImPlotLegend, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotLegendFromC(cvalue *C.ImPlotLegend) *PlotLegend {
	result := new(PlotLegend)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotNextItemData struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotNextItemData) handle() (result *C.ImPlotNextItemData, releaseFn func()) {
	result = (*C.ImPlotNextItemData)(self.data)
	return result, func() {}
}

func (self PlotNextItemData) c() (result C.ImPlotNextItemData, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotNextItemDataFromC(cvalue *C.ImPlotNextItemData) *PlotNextItemData {
	result := new(PlotNextItemData)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotNextPlotData struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotNextPlotData) handle() (result *C.ImPlotNextPlotData, releaseFn func()) {
	result = (*C.ImPlotNextPlotData)(self.data)
	return result, func() {}
}

func (self PlotNextPlotData) c() (result C.ImPlotNextPlotData, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotNextPlotDataFromC(cvalue *C.ImPlotNextPlotData) *PlotNextPlotData {
	result := new(PlotNextPlotData)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotPlot struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotPlot) handle() (result *C.ImPlotPlot, releaseFn func()) {
	result = (*C.ImPlotPlot)(self.data)
	return result, func() {}
}

func (self PlotPlot) c() (result C.ImPlotPlot, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotPlotFromC(cvalue *C.ImPlotPlot) *PlotPlot {
	result := new(PlotPlot)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotPointError struct {
	Field   float64
	Field   float64
	Fieldeg float64
	Fieldos float64
}

func (self PlotPointError) handle() (result *C.ImPlotPointError, releaseFn func()) {
	result = new(C.ImPlotPointError)
	Field := self.Field

	result.X = C.double(Field)
	Field := self.Field

	result.Y = C.double(Field)
	Fieldeg := self.Fieldeg

	result.Neg = C.double(Fieldeg)
	Fieldos := self.Fieldos

	result.Pos = C.double(Fieldos)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotPointError) c() (result C.ImPlotPointError, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotPointErrorFromC(cvalue *C.ImPlotPointError) *PlotPointError {
	result := new(PlotPointError)
	result.Field = float64(cvalue.X)
	result.Field = float64(cvalue.Y)
	result.Fieldeg = float64(cvalue.Neg)
	result.Fieldos = float64(cvalue.Pos)
	return result
}

type PlotRange struct {
	Fieldin float64
	Fieldax float64
}

func (self PlotRange) handle() (result *C.ImPlotRange, releaseFn func()) {
	result = new(C.ImPlotRange)
	Fieldin := self.Fieldin

	result.Min = C.double(Fieldin)
	Fieldax := self.Fieldax

	result.Max = C.double(Fieldax)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotRange) c() (result C.ImPlotRange, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotRangeFromC(cvalue *C.ImPlotRange) *PlotRange {
	result := new(PlotRange)
	result.Fieldin = float64(cvalue.Min)
	result.Fieldax = float64(cvalue.Max)
	return result
}

type PlotRect struct {
	Field PlotRange
	Field PlotRange
}

func (self PlotRect) handle() (result *C.ImPlotRect, releaseFn func()) {
	result = new(C.ImPlotRect)
	Field := self.Field
	FieldArg, FieldFin := Field.c()
	result.X = FieldArg
	Field := self.Field
	FieldArg, FieldFin := Field.c()
	result.Y = FieldArg
	releaseFn = func() {
		FieldFin()
		FieldFin()
	}
	return result, releaseFn
}

func (self PlotRect) c() (result C.ImPlotRect, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotRectFromC(cvalue *C.ImPlotRect) *PlotRect {
	result := new(PlotRect)
	result.Field = *newPlotRangeFromC(cvalue.X)

	result.Field = *newPlotRangeFromC(cvalue.Y)

	return result
}

type PlotStyle struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotStyle) handle() (result *C.ImPlotStyle, releaseFn func()) {
	result = (*C.ImPlotStyle)(self.data)
	return result, func() {}
}

func (self PlotStyle) c() (result C.ImPlotStyle, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotStyleFromC(cvalue *C.ImPlotStyle) *PlotStyle {
	result := new(PlotStyle)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotSubplot struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotSubplot) handle() (result *C.ImPlotSubplot, releaseFn func()) {
	result = (*C.ImPlotSubplot)(self.data)
	return result, func() {}
}

func (self PlotSubplot) c() (result C.ImPlotSubplot, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotSubplotFromC(cvalue *C.ImPlotSubplot) *PlotSubplot {
	result := new(PlotSubplot)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotTag struct {
	// TODO: contains unsupported fields
	data unsafe.Pointer
}

func (self PlotTag) handle() (result *C.ImPlotTag, releaseFn func()) {
	result = (*C.ImPlotTag)(self.data)
	return result, func() {}
}

func (self PlotTag) c() (result C.ImPlotTag, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotTagFromC(cvalue *C.ImPlotTag) *PlotTag {
	result := new(PlotTag)
	result.data = unsafe.Pointer(cvalue)
	return result
}

type PlotTagCollection struct {
	Fieldags       Vector[*PlotTag]
	FieldextBuffer TextBuffer
	Fieldize       int32
}

func (self PlotTagCollection) handle() (result *C.ImPlotTagCollection, releaseFn func()) {
	result = new(C.ImPlotTagCollection)
	Fieldags := self.Fieldags
	FieldagsData := Fieldags.Data
	FieldagsDataArg, FieldagsDataFin := FieldagsData.handle()
	FieldagsVecArg := new(C.ImVector_ImPlotTag)
	FieldagsVecArg.Size = C.int(Fieldags.Size)
	FieldagsVecArg.Capacity = C.int(Fieldags.Capacity)
	FieldagsVecArg.Data = FieldagsDataArg

	result.Tags = *FieldagsVecArg
	FieldextBuffer := self.FieldextBuffer
	FieldextBufferArg, FieldextBufferFin := FieldextBuffer.c()
	result.TextBuffer = FieldextBufferArg
	Fieldize := self.Fieldize

	result.Size = C.int(Fieldize)
	releaseFn = func() {
		FieldagsDataFin()
		FieldextBufferFin()
	}
	return result, releaseFn
}

func (self PlotTagCollection) c() (result C.ImPlotTagCollection, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotTagCollectionFromC(cvalue *C.ImPlotTagCollection) *PlotTagCollection {
	result := new(PlotTagCollection)
	result.Fieldags = newVectorFromC(cvalue.Tags.Size, cvalue.Tags.Capacity, newPlotTagFromC(cvalue.Tags.Data))
	result.FieldextBuffer = *newTextBufferFromC(cvalue.TextBuffer)

	result.Fieldize = int32(cvalue.Size)
	return result
}

type PlotTick struct {
	FieldlotPos    float64
	FieldixelPos   float32
	FieldabelSize  Vec2
	FieldextOffset int32
	Fieldajor      bool
	FieldhowLabel  bool
	Fieldevel      int32
	Fielddx        int32
}

func (self PlotTick) handle() (result *C.ImPlotTick, releaseFn func()) {
	result = new(C.ImPlotTick)
	FieldlotPos := self.FieldlotPos

	result.PlotPos = C.double(FieldlotPos)
	FieldixelPos := self.FieldixelPos

	result.PixelPos = C.float(FieldixelPos)
	FieldabelSize := self.FieldabelSize

	result.LabelSize = FieldabelSize.toC()
	FieldextOffset := self.FieldextOffset

	result.TextOffset = C.int(FieldextOffset)
	Fieldajor := self.Fieldajor

	result.Major = C.bool(Fieldajor)
	FieldhowLabel := self.FieldhowLabel

	result.ShowLabel = C.bool(FieldhowLabel)
	Fieldevel := self.Fieldevel

	result.Level = C.int(Fieldevel)
	Fielddx := self.Fielddx

	result.Idx = C.int(Fielddx)
	releaseFn = func() {
	}
	return result, releaseFn
}

func (self PlotTick) c() (result C.ImPlotTick, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotTickFromC(cvalue *C.ImPlotTick) *PlotTick {
	result := new(PlotTick)
	result.FieldlotPos = float64(cvalue.PlotPos)
	result.FieldixelPos = float32(cvalue.PixelPos)
	result.FieldabelSize = *(&Vec2{}).fromC(cvalue.LabelSize)
	result.FieldextOffset = int32(cvalue.TextOffset)
	result.Fieldajor = cvalue.Major == C.bool(true)
	result.FieldhowLabel = cvalue.ShowLabel == C.bool(true)
	result.Fieldevel = int32(cvalue.Level)
	result.Fielddx = int32(cvalue.Idx)
	return result
}

type PlotTicker struct {
	Fieldicks      Vector[*PlotTick]
	FieldextBuffer TextBuffer
	FieldaxSize    Vec2
	FieldateSize   Vec2
	Fieldevels     int32
}

func (self PlotTicker) handle() (result *C.ImPlotTicker, releaseFn func()) {
	result = new(C.ImPlotTicker)
	Fieldicks := self.Fieldicks
	FieldicksData := Fieldicks.Data
	FieldicksDataArg, FieldicksDataFin := FieldicksData.handle()
	FieldicksVecArg := new(C.ImVector_ImPlotTick)
	FieldicksVecArg.Size = C.int(Fieldicks.Size)
	FieldicksVecArg.Capacity = C.int(Fieldicks.Capacity)
	FieldicksVecArg.Data = FieldicksDataArg

	result.Ticks = *FieldicksVecArg
	FieldextBuffer := self.FieldextBuffer
	FieldextBufferArg, FieldextBufferFin := FieldextBuffer.c()
	result.TextBuffer = FieldextBufferArg
	FieldaxSize := self.FieldaxSize

	result.MaxSize = FieldaxSize.toC()
	FieldateSize := self.FieldateSize

	result.LateSize = FieldateSize.toC()
	Fieldevels := self.Fieldevels

	result.Levels = C.int(Fieldevels)
	releaseFn = func() {
		FieldicksDataFin()
		FieldextBufferFin()
	}
	return result, releaseFn
}

func (self PlotTicker) c() (result C.ImPlotTicker, fin func()) {
	resultPtr, finFn := self.handle()
	return *resultPtr, finFn
}

func newPlotTickerFromC(cvalue *C.ImPlotTicker) *PlotTicker {
	result := new(PlotTicker)
	result.Fieldicks = newVectorFromC(cvalue.Ticks.Size, cvalue.Ticks.Capacity, newPlotTickFromC(cvalue.Ticks.Data))
	result.FieldextBuffer = *newTextBufferFromC(cvalue.TextBuffer)

	result.FieldaxSize = *(&Vec2{}).fromC(cvalue.MaxSize)
	result.FieldateSize = *(&Vec2{}).fromC(cvalue.LateSize)
	result.Fieldevels = int32(cvalue.Levels)
	return result
}
